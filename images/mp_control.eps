%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9kgm3u6_jcc9e8_16s.tmp.pdf
%%Creator: Adobe Acrobat 24.1.0
%%For: yy010
%%CreationDate: 2024/12/27, 14:34:33
%%BoundingBox: 0 0 103 67
%%HiResBoundingBox: 0 0 102.6000 66.6000
%%CropBox: 0 0 102.6000 66.6000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1183 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2024-12-27T14:26:40+01:00"
   xmp:CreateDate="2024-12-27T14:26:40+01:00"
   xmp:MetadataDate="2024-12-27T14:26:40+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0634af6b-1dc3-47d4-be52-dc0d48480383"
   xmpMM:InstanceID="uuid:42114992-a188-4e40-8f05-f7f06e65d422"
   pdf:Producer="Acrobat Distiller 10.0.0 (Windows); modified using iText 4.2.0 by 1T3XT">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Herding Cats</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">ACM Trans. Program. Lang. Syst. 2014.36:1-74</rdf:li>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -66.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 66.6 li
102.6 66.6 li
102.6 0 li
cp
clp
.2 setflat
.252 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
-191.196 -189.93 mo
-191.196 -213.843 li
false sop
1 /1 /CSD get_res sepcs
1 sep
@
-225.144 -179.895 mo
-201.231 -179.895 li
@
304.812 -179.895 mo
328.725 -179.895 li
@
294.552 -189.336 mo
294.552 -213.249 li
@
-225.396 539.853 mo
-201.483 539.853 li
@
-190.998 575.25 mo
-190.998 551.337 li
@
294.552 574.647 mo
294.552 550.734 li
@
304.839 539.853 mo
328.752 539.853 li
@
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /FAAAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 65 /A put
dup 74 /J put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 108 /l put
dup 116 /t put
dup 118 /v put
def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/BlueScale 0.0437916 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
13 dict dup begin
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/seven <1C60D8A8C9B7EF327C10274AB025EB21CC3BB5514D7A792BCFB0F254
664FBEE7353071728231DCE5A09FB578C9A63F4547F469AB016F484730> |-
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23
A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F
7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA
2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1C
B4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDD
AD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8
950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27
315B3507F9DAF305> |-
/colon <1C60D8A8C9B854D088E8E1AEAD30C92AB0D98EADF1DE7A77B7CB74CD
7251B14F346AB2E7541FDEE4> |-
/A <1C60D8A8C9B64EDFA3F30AE40D82621F0FCB1DE3B8FE08B0132A2CCBB252
5814D0E06433BF12343DC9A9AB3FF78B46F8CC42B8A00C8B5EA738952A496397
7B57B3D18EEA0F5BB95C06FA8CB59D2805C2A2BCC67181B967> |-
/J <1C60D8A8C9B7A73D365A7906CB17A1CF980A8A86BA58E86DDB37907A2C1F
C33CC7791A34EF51E4037755F037141ECD4AB979BEF37C1BD53571DD37087E42
56F1> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC44F3A27E4CCC92606F912C02778569997A6186F8A1
606F089477CA3B9FEB77CDA1F7183DD095278503BED44AEA29368E1D5A667236
914EC902A72DC76F98F26E5874C65C> |-
/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C
0EAF> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8
090086BA063BC631F5BCB6255A1F02FF856D> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKJ+Helvetica /FAAAAA+Helvetica findfont ct_VMDictPut
/UUNUKJ+Helvetica*1 
[46{/.notdef}rp /period 8{/.notdef}rp /seven /eight /.notdef /colon 6{/.notdef}rp 
/A 8{/.notdef}rp /J 22{/.notdef}rp /a 3{/.notdef}rp /e /.notdef 
/g 4{/.notdef}rp /l 7{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]
UUNUKJ+Helvetica nf
UUNUKJ+Helvetica*1 [8.9664 0 0 -8.9664 0 0 ]msf
-145.62 -115.761 mo
(7:8)
[4.98622 2.49355 0 ]xsh
188.777 -115.761 mo
(J.Alglaveetal.)
[4.2124 4.98624 5.98514 1.98874 4.98621 1.98877 4.80597 4.25726 7.47885 4.98624 4.97723 4.98621 
1.98877 0 ]xsh
46.193 -98.132 mo
46.193 -92.902 li
47.03 -92.902 li
47.03 -96.179 li
47.03 -96.937 47.576 -97.544 48.25 -97.544 cv
48.865 -97.544 49.212 -97.166 49.212 -96.498 cv
49.212 -92.902 li
50.049 -92.902 li
50.049 -96.179 li
50.049 -96.937 50.597 -97.544 51.274 -97.544 cv
51.882 -97.544 52.241 -97.156 52.241 -96.498 cv
52.241 -92.902 li
53.078 -92.902 li
53.078 -96.817 li
53.078 -97.754 52.54 -98.272 51.563 -98.272 cv
50.866 -98.272 50.447 -98.062 49.959 -97.475 cv
49.651 -98.032 49.234 -98.272 48.557 -98.272 cv
47.859 -98.272 47.4 -98.012 46.95 -97.385 cv
46.95 -98.132 li
46.193 -98.132 li
false sop
1 /1 /CSD get_res sepcs
1 sep
f
54.314 -90.73 mo
55.151 -90.73 li
55.151 -93.45 li
55.587 -92.912 56.074 -92.673 56.75 -92.673 cv
58.091 -92.673 58.976 -93.759 58.976 -95.422 cv
58.976 -97.176 58.122 -98.272 56.74 -98.272 cv
56.03 -98.272 55.461 -97.953 55.071 -97.335 cv
55.071 -98.123 li
54.304 -98.123 li
54.314 -90.73 li
cp
56.6 -97.495 mo
57.514 -97.495 58.11 -96.688 58.11 -95.442 cv
58.11 -94.257 57.503 -93.45 56.6 -93.45 cv
55.726 -93.45 55.151 -94.247 55.151 -95.472 cv
55.151 -96.698 55.726 -97.495 56.6 -97.495 cv
f
-8.62201 -81.5941 mo
-10.495 -81.474 li
-10.495 -81.046 li
-9.98701 -81.046 li
-9.61801 -81.046 -9.55902 -80.976 -9.55902 -80.548 cv
-9.55902 -77.768 li
-9.55902 -77.37 -9.66801 -77.3 -10.306 -77.3 cv
-10.375 -77.3 li
-10.375 -76.942 li
-7.79501 -76.942 li
-7.79501 -77.3 li
-7.86502 -77.3 li
-8.51202 -77.3 -8.62201 -77.37 -8.62201 -77.769 cv
-8.62201 -81.5941 li
cp
-9.09001 -84.065 mo
-9.40901 -84.065 -9.66801 -83.806 -9.66801 -83.487 cv
-9.66801 -83.178 -9.40901 -82.909 -9.10002 -82.909 cv
-8.77101 -82.909 -8.51202 -83.168 -8.51202 -83.487 cv
-8.51202 -83.806 -8.77101 -84.065 -9.09001 -84.065 cv
f
-5.561 -81.5941 mo
-7.28502 -81.474 li
-7.28502 -81.046 li
-6.92601 -81.046 li
-6.55801 -81.046 -6.49701 -80.976 -6.49701 -80.548 cv
-6.49701 -77.768 li
-6.49701 -77.37 -6.60701 -77.3 -7.24501 -77.3 cv
-7.28502 -77.3 li
-7.28502 -76.942 li
-4.76401 -76.942 li
-4.76401 -77.3 li
-4.80402 -77.3 li
-5.45201 -77.3 -5.561 -77.37 -5.561 -77.768 cv
-5.561 -79.203 li
-5.561 -79.691 -5.49202 -80.139 -5.38202 -80.368 cv
-5.17302 -80.817 -4.72401 -81.126 -4.29601 -81.126 cv
-4.03702 -81.126 -3.73801 -80.976 -3.58902 -80.777 cv
-3.43901 -80.5681 -3.37001 -80.259 -3.37001 -79.78 cv
-3.37001 -77.768 li
-3.37001 -77.37 -3.47902 -77.3 -4.12601 -77.3 cv
-4.16602 -77.3 li
-4.16602 -76.942 li
-1.64601 -76.942 li
-1.64601 -77.3 li
-1.68501 -77.3 li
-2.32301 -77.3 -2.43301 -77.37 -2.43301 -77.768 cv
-2.43301 -79.731 li
-2.43301 -80.448 -2.46301 -80.6281 -2.64201 -80.966 cv
-2.89101 -81.445 -3.39902 -81.734 -3.98701 -81.734 cv
-4.62401 -81.734 -5.12302 -81.434 -5.561 -80.777 cv
-5.561 -81.5941 li
f
.617996 -81.5941 mo
-1.255 -81.474 li
-1.255 -81.046 li
-.747009 -81.046 li
-.379013 -81.046 -.319016 -80.976 -.319016 -80.548 cv
-.319016 -77.768 li
-.319016 -77.37 -.428009 -77.3 -1.06601 -77.3 cv
-1.13501 -77.3 li
-1.13501 -76.942 li
1.44499 -76.942 li
1.44499 -77.3 li
1.37498 -77.3 li
.72699 -77.3 .617996 -77.37 .617996 -77.769 cv
.617996 -81.5941 li
cp
.149994 -84.065 mo
-.169006 -84.065 -.428009 -83.806 -.428009 -83.487 cv
-.428009 -83.178 -.169006 -82.909 .138992 -82.909 cv
.468994 -82.909 .72699 -83.168 .72699 -83.487 cv
.72699 -83.806 .468994 -84.065 .149994 -84.065 cv
f
3.619 -81.584 mo
3.619 -83.556 li
3.20999 -83.556 li
3.11099 -82.261 2.672 -81.604 1.866 -81.544 cv
1.866 -81.155 li
2.68199 -81.155 li
2.68199 -78.615 li
2.68199 -77.917 2.702 -77.668 2.802 -77.439 cv
2.961 -77.021 3.36 -76.792 3.93799 -76.792 cv
4.32599 -76.792 4.66498 -76.911 4.89398 -77.13 cv
5.22299 -77.449 5.41199 -77.977 5.41199 -78.525 cv
5.41199 -78.585 5.41199 -78.655 5.40198 -78.754 cv
4.98398 -78.754 li
4.95398 -77.857 4.69498 -77.399 4.20599 -77.399 cv
3.97699 -77.399 3.778 -77.519 3.70799 -77.688 cv
3.649 -77.828 3.619 -78.077 3.619 -78.436 cv
3.619 -81.155 li
5.08298 -81.155 li
5.08298 -81.584 li
3.619 -81.584 li
f
7.578 -81.5941 mo
5.70499 -81.474 li
5.70499 -81.046 li
6.21298 -81.046 li
6.582 -81.046 6.64099 -80.976 6.64099 -80.548 cv
6.64099 -77.768 li
6.64099 -77.37 6.53198 -77.3 5.89398 -77.3 cv
5.82498 -77.3 li
5.82498 -76.942 li
8.405 -76.942 li
8.405 -77.3 li
8.33499 -77.3 li
7.68698 -77.3 7.578 -77.37 7.578 -77.769 cv
7.578 -81.5941 li
cp
7.10999 -84.065 mo
6.79099 -84.065 6.53198 -83.806 6.53198 -83.487 cv
6.53198 -83.178 6.79099 -82.909 7.099 -82.909 cv
7.42899 -82.909 7.68698 -83.168 7.68698 -83.487 cv
7.68698 -83.806 7.42899 -84.065 7.10999 -84.065 cv
f
13.149 -80.149 mo
13.149 -80.777 13.04 -81.096 12.751 -81.335 cv
12.423 -81.594 11.937 -81.733 11.3 -81.733 cv
10.188 -81.733 9.36301 -81.205 9.36301 -80.488 cv
9.36301 -80.109 9.58899 -79.87 9.93301 -79.87 cv
10.246 -79.87 10.478 -80.079 10.478 -80.378 cv
10.478 -80.508 10.428 -80.648 10.329 -80.787 cv
10.27 -80.857 10.26 -80.886 10.26 -80.916 cv
10.26 -81.126 10.666 -81.305 11.142 -81.305 cv
11.449 -81.305 11.796 -81.205 11.955 -81.056 cv
12.143 -80.897 12.212 -80.657 12.212 -80.209 cv
12.212 -79.82 li
11.166 -79.641 10.848 -79.562 10.359 -79.372 cv
9.50201 -79.053 9.08401 -78.585 9.08401 -77.958 cv
9.08401 -77.25 9.655 -76.792 10.537 -76.792 cv
11.221 -76.792 11.836 -77.071 12.262 -77.579 cv
12.421 -77.071 12.67 -76.872 13.139 -76.872 cv
13.588 -76.872 14.056 -77.16 14.056 -77.449 cv
14.056 -77.519 14.006 -77.569 13.956 -77.569 cv
13.916 -77.569 13.876 -77.559 13.806 -77.529 cv
13.647 -77.469 13.607 -77.459 13.527 -77.459 cv
13.249 -77.459 13.149 -77.649 13.149 -78.147 cv
13.149 -80.149 li
cp
12.212 -78.934 mo
12.212 -78.336 12.183 -78.196 12.014 -77.938 cv
11.767 -77.569 11.311 -77.32 10.884 -77.32 cv
10.432 -77.32 10.09 -77.649 10.09 -78.097 cv
10.09 -78.515 10.299 -78.814 10.738 -79.024 cv
11.047 -79.163 11.435 -79.263 12.212 -79.392 cv
12.212 -78.934 li
f
16.198 -84.2941 mo
14.355 -84.174 li
14.355 -83.746 li
14.843 -83.746 li
15.201 -83.746 15.262 -83.676 15.262 -83.248 cv
15.262 -77.769 li
15.262 -77.3701 15.152 -77.3 14.514 -77.3 cv
14.445 -77.3 li
14.445 -76.942 li
17.025 -76.942 li
17.025 -77.3 li
16.955 -77.3 li
16.307 -77.3 16.198 -77.3701 16.198 -77.769 cv
16.198 -84.2941 li
f
19.318 -84.2941 mo
17.475 -84.174 li
17.475 -83.746 li
17.964 -83.746 li
18.322 -83.746 18.382 -83.676 18.382 -83.248 cv
18.382 -77.769 li
18.382 -77.3701 18.272 -77.3 17.634 -77.3 cv
17.565 -77.3 li
17.565 -76.942 li
20.145 -76.942 li
20.145 -77.3 li
20.075 -77.3 li
19.428 -77.3 19.318 -77.3701 19.318 -77.769 cv
19.318 -84.2941 li
f
23.395 -78.2071 mo
22.299 -80.7671 li
22.259 -80.8571 22.239 -80.9271 22.239 -80.9761 cv
22.239 -81.1561 22.359 -81.225 22.698 -81.225 cv
22.907 -81.225 li
22.907 -81.584 li
20.536 -81.584 li
20.536 -81.225 li
20.646 -81.225 li
20.964 -81.225 21.144 -81.0861 21.323 -80.6871 cv
22.947 -77.011 li
22.777 -76.6631 li
22.418 -75.9061 21.951 -75.3771 21.632 -75.3771 cv
21.542 -75.3771 21.472 -75.4171 21.472 -75.4771 cv
21.472 -75.4971 21.482 -75.527 21.492 -75.5671 cv
21.522 -75.6561 21.542 -75.746 21.542 -75.826 cv
21.542 -76.0851 21.323 -76.274 21.034 -76.274 cv
20.685 -76.274 20.436 -76.0151 20.436 -75.6561 cv
20.436 -75.2181 20.825 -74.889 21.343 -74.889 cv
21.871 -74.889 22.319 -75.1481 22.718 -75.686 cv
23.026 -76.105 23.226 -76.5031 23.664 -77.6091 cv
24.8 -80.4181 li
25.049 -81.0261 25.258 -81.225 25.637 -81.225 cv
25.696 -81.225 li
25.696 -81.584 li
23.704 -81.584 li
23.704 -81.225 li
23.863 -81.225 li
24.242 -81.225 24.401 -81.1161 24.401 -80.8571 cv
24.401 -80.7571 24.372 -80.6281 24.302 -80.4581 cv
23.395 -78.2071 li
f
31.546 -79.1531 mo
32.682 -80.6281 li
33.08 -80.6281 li
33.219 -80.6281 33.488 -80.6281 33.488 -80.926 cv
33.488 -81.235 33.23 -81.235 33.08 -81.235 cv
31.915 -81.235 li
31.765 -81.235 31.516 -81.235 31.516 -80.936 cv
31.516 -80.6281 31.735 -80.6281 32.004 -80.6281 cv
31.267 -79.621 li
30.51 -80.6281 li
30.769 -80.6281 30.988 -80.6281 30.988 -80.936 cv
30.988 -81.235 30.739 -81.235 30.589 -81.235 cv
29.424 -81.235 li
29.275 -81.235 29.015 -81.235 29.015 -80.926 cv
29.015 -80.6281 29.284 -80.6281 29.424 -80.6281 cv
29.822 -80.6281 li
30.998 -79.1531 li
29.762 -77.5491 li
29.364 -77.5491 li
29.214 -77.5491 28.956 -77.5491 28.956 -77.2401 cv
28.956 -76.942 29.225 -76.942 29.364 -76.942 cv
30.529 -76.942 li
30.679 -76.942 30.928 -76.942 30.928 -77.2401 cv
30.928 -77.5491 30.719 -77.5491 30.41 -77.5491 cv
31.267 -78.775 li
32.153 -77.5491 li
31.875 -77.5491 31.655 -77.5491 31.655 -77.2401 cv
31.655 -76.942 31.904 -76.942 32.054 -76.942 cv
33.219 -76.942 li
33.359 -76.942 33.628 -76.942 33.628 -77.2401 cv
33.628 -77.5491 33.369 -77.5491 33.219 -77.5491 cv
32.821 -77.5491 li
31.546 -79.1531 li
f
38.36 -80.399 mo
38.48 -80.399 38.808 -80.399 38.808 -80.748 cv
38.808 -81.096 38.44 -81.096 38.3 -81.096 cv
34.853 -81.096 li
34.713 -81.096 34.345 -81.096 34.345 -80.748 cv
34.345 -80.399 34.674 -80.399 34.794 -80.399 cv
38.36 -80.399 li
cp
38.3 -78.884 mo
38.44 -78.884 38.808 -78.884 38.808 -79.233 cv
38.808 -79.582 38.48 -79.582 38.36 -79.582 cv
34.794 -79.582 li
34.674 -79.582 34.345 -79.582 34.345 -79.233 cv
34.345 -78.884 34.713 -78.884 34.853 -78.884 cv
38.3 -78.884 li
f
43.968 -79.98 mo
43.968 -81.834 42.952 -83.138 41.856 -83.138 cv
40.74 -83.138 39.744 -81.803 39.744 -79.99 cv
39.744 -78.137 40.76 -76.832 41.856 -76.832 cv
42.972 -76.832 43.968 -78.167 43.968 -79.98 cv
cp
41.856 -77.44 mo
41.079 -77.44 40.431 -78.615 40.431 -80.09 cv
40.431 -81.545 41.119 -82.531 41.856 -82.531 cv
42.583 -82.531 43.281 -81.554 43.281 -80.09 cv
43.281 -78.615 42.633 -77.44 41.856 -77.44 cv
f
47.764 -80.608 mo
47.764 -80.977 47.465 -81.235 47.146 -81.235 cv
46.768 -81.235 46.519 -80.927 46.519 -80.618 cv
46.519 -80.249 46.818 -79.99 47.137 -79.99 cv
47.515 -79.99 47.764 -80.299 47.764 -80.608 cv
cp
47.176 -76.942 mo
47.047 -76.404 46.668 -76.214 46.519 -76.135 cv
46.459 -76.105 46.32 -76.035 46.32 -75.876 cv
46.32 -75.726 46.469 -75.557 46.639 -75.557 cv
46.857 -75.557 47.814 -76.095 47.814 -77.211 cv
47.814 -77.868 47.515 -78.187 47.137 -78.187 cv
46.778 -78.187 46.519 -77.908 46.519 -77.569 cv
46.519 -77.291 46.688 -76.942 47.176 -76.942 cv
f
59.13 -80.6281 mo
59.429 -80.6281 li
59.578 -80.6281 59.827 -80.6281 59.827 -80.927 cv
59.827 -81.235 59.588 -81.235 59.429 -81.235 cv
58.264 -81.235 li
58.114 -81.235 57.864 -81.235 57.864 -80.937 cv
57.864 -80.6281 58.104 -80.6281 58.264 -80.6281 cv
58.542 -80.6281 li
57.825 -78.506 li
57.695 -78.137 57.636 -77.958 57.566 -77.649 cv
57.556 -77.649 li
57.506 -77.838 57.416 -78.047 57.347 -78.237 cv
56.42 -80.6281 li
56.669 -80.6281 li
56.819 -80.6281 57.068 -80.6281 57.068 -80.927 cv
57.068 -81.235 56.829 -81.235 56.669 -81.235 cv
55.504 -81.235 li
55.344 -81.235 55.106 -81.235 55.106 -80.927 cv
55.106 -80.6281 55.355 -80.6281 55.504 -80.6281 cv
55.813 -80.6281 li
57.228 -77.071 li
57.267 -76.972 57.267 -76.952 57.267 -76.942 cv
57.267 -76.922 57.018 -76.105 56.889 -75.856 cv
56.6 -75.308 56.241 -75.288 56.092 -75.278 cv
56.092 -75.288 56.142 -75.368 56.142 -75.497 cv
56.142 -75.746 55.962 -75.925 55.713 -75.925 cv
55.444 -75.925 55.275 -75.746 55.275 -75.487 cv
55.275 -75.069 55.613 -74.67 56.102 -74.67 cv
57.098 -74.67 57.546 -75.985 57.586 -76.095 cv
59.13 -80.6281 li
f
64.52 -80.399 mo
64.639 -80.399 64.968 -80.399 64.968 -80.748 cv
64.968 -81.096 64.6 -81.096 64.46 -81.096 cv
61.013 -81.096 li
60.874 -81.096 60.505 -81.096 60.505 -80.748 cv
60.505 -80.399 60.834 -80.399 60.954 -80.399 cv
64.52 -80.399 li
cp
64.46 -78.884 mo
64.6 -78.884 64.968 -78.884 64.968 -79.233 cv
64.968 -79.582 64.639 -79.582 64.52 -79.582 cv
60.954 -79.582 li
60.834 -79.582 60.505 -79.582 60.505 -79.233 cv
60.505 -78.884 60.874 -78.884 61.013 -78.884 cv
64.46 -78.884 li
f
70.128 -79.98 mo
70.128 -81.834 69.112 -83.138 68.017 -83.138 cv
66.9 -83.138 65.904 -81.803 65.904 -79.99 cv
65.904 -78.137 66.92 -76.832 68.017 -76.832 cv
69.132 -76.832 70.128 -78.167 70.128 -79.98 cv
cp
68.017 -77.44 mo
67.239 -77.44 66.592 -78.615 66.592 -80.09 cv
66.592 -81.545 67.279 -82.531 68.017 -82.531 cv
68.743 -82.531 69.441 -81.554 69.441 -80.09 cv
69.441 -78.615 68.793 -77.44 68.017 -77.44 cv
f
16.442 -65.6381 mo
17.329 -65.6381 li
17.448 -65.6381 17.568 -65.6281 17.687 -65.6281 cv
19.022 -65.6281 li
19.022 -66.276 li
12.965 -66.276 li
12.965 -65.6281 li
14.3 -65.6281 li
14.42 -65.6281 14.539 -65.6381 14.659 -65.6381 cv
15.555 -65.6381 li
15.555 -59.421 li
16.442 -59.421 li
16.442 -65.6381 li
f
23.045 -60.2061 mo
23.045 -60.973 22.954 -61.524 22.633 -62.012 cv
22.418 -62.333 21.985 -62.612 21.427 -62.612 cv
19.809 -62.612 19.809 -60.708 19.809 -60.2061 cv
19.809 -59.704 19.809 -57.842 21.427 -57.842 cv
23.045 -57.842 23.045 -59.704 23.045 -60.2061 cv
cp
21.427 -58.037 mo
21.107 -58.037 20.681 -58.226 20.542 -58.797 cv
20.444 -59.209 20.444 -59.781 20.444 -60.297 cv
20.444 -60.806 20.444 -61.336 20.548 -61.719 cv
20.695 -62.27 21.141 -62.416 21.427 -62.416 cv
21.804 -62.416 22.167 -62.187 22.292 -61.782 cv
22.403 -61.406 22.41 -60.903 22.41 -60.297 cv
22.41 -59.781 22.41 -59.265 22.32 -58.825 cv
22.18 -58.19 21.706 -58.037 21.427 -58.037 cv
f
85.562 -65.6381 mo
86.449 -65.6381 li
86.568 -65.6381 86.688 -65.6281 86.807 -65.6281 cv
88.142 -65.6281 li
88.142 -66.276 li
82.084 -66.276 li
82.084 -65.6281 li
83.419 -65.6281 li
83.539 -65.6281 83.658 -65.6381 83.779 -65.6381 cv
84.675 -65.6381 li
84.675 -59.421 li
85.562 -59.421 li
85.562 -65.6381 li
f
90.903 -62.4161 mo
90.903 -62.6041 90.889 -62.611 90.694 -62.611 cv
90.247 -62.1721 89.613 -62.165 89.326 -62.165 cv
89.326 -61.9141 li
89.493 -61.9141 89.954 -61.9141 90.337 -62.1091 cv
90.337 -58.553 li
90.337 -58.3231 90.337 -58.2321 89.64 -58.2321 cv
89.375 -58.2321 li
89.375 -57.981 li
89.5 -57.988 90.359 -58.009 90.616 -58.009 cv
90.832 -58.009 91.711 -57.988 91.865 -57.981 cv
91.865 -58.2321 li
91.6 -58.2321 li
90.903 -58.2321 90.903 -58.3231 90.903 -58.553 cv
90.903 -62.4161 li
f
-9.29698 -39.511 mo
-9.29698 -39.541 -9.29698 -39.561 -9.46599 -39.73 cv
-10.712 -40.985 -11.03 -42.868 -11.03 -44.392 cv
-11.03 -46.126 -10.651 -47.86 -9.42599 -49.105 cv
-9.29698 -49.224 -9.29698 -49.244 -9.29698 -49.274 cv
-9.29698 -49.344 -9.33699 -49.374 -9.39699 -49.374 cv
-9.49599 -49.374 -10.393 -48.696 -10.981 -47.431 cv
-11.488 -46.335 -11.608 -45.229 -11.608 -44.392 cv
-11.608 -43.615 -11.499 -42.41 -10.95 -41.284 cv
-10.353 -40.059 -9.49599 -39.411 -9.39699 -39.411 cv
-9.33699 -39.411 -9.29698 -39.441 -9.29698 -39.511 cv
f
-5.03798 -45.6671 mo
-5.21698 -46.036 -5.50598 -46.305 -5.95398 -46.305 cv
-7.11998 -46.305 -8.35498 -44.84 -8.35498 -43.386 cv
-8.35498 -42.449 -7.80798 -41.7921 -7.02998 -41.7921 cv
-6.83099 -41.7921 -6.33299 -41.832 -5.73499 -42.539 cv
-5.65599 -42.12 -5.30699 -41.7921 -4.82799 -41.7921 cv
-4.47998 -41.7921 -4.25099 -42.021 -4.09099 -42.3391 cv
-3.92198 -42.698 -3.79199 -43.306 -3.79199 -43.326 cv
-3.79199 -43.425 -3.88199 -43.425 -3.91199 -43.425 cv
-4.01199 -43.425 -4.02098 -43.386 -4.05199 -43.246 cv
-4.22099 -42.599 -4.39999 -42.011 -4.80798 -42.011 cv
-5.07799 -42.011 -5.10698 -42.27 -5.10698 -42.469 cv
-5.10698 -42.688 -5.08798 -42.768 -4.97798 -43.206 cv
-4.86899 -43.625 -4.84898 -43.724 -4.75899 -44.103 cv
-4.39999 -45.498 li
-4.32999 -45.776 -4.32999 -45.796 -4.32999 -45.836 cv
-4.32999 -46.006 -4.44998 -46.105 -4.61998 -46.105 cv
-4.85799 -46.105 -5.00798 -45.886 -5.03798 -45.6671 cv
cp
-5.68498 -43.087 mo
-5.73499 -42.907 -5.73499 -42.888 -5.88498 -42.718 cv
-6.32298 -42.17 -6.73099 -42.011 -7.00998 -42.011 cv
-7.50899 -42.011 -7.64798 -42.559 -7.64798 -42.947 cv
-7.64798 -43.445 -7.32898 -44.671 -7.09999 -45.129 cv
-6.79099 -45.717 -6.34299 -46.086 -5.94398 -46.086 cv
-5.29698 -46.086 -5.15698 -45.269 -5.15698 -45.209 cv
-5.15698 -45.149 -5.17699 -45.0891 -5.18698 -45.04 cv
-5.68498 -43.087 li
f
-.594986 -44.392 mo
-.594986 -45.169 -.703995 -46.375 -1.252 -47.5 cv
-1.84999 -48.726 -2.707 -49.374 -2.806 -49.374 cv
-2.866 -49.374 -2.90599 -49.333 -2.90599 -49.274 cv
-2.90599 -49.244 -2.90599 -49.224 -2.717 -49.045 cv
-1.73999 -48.059 -1.17299 -46.475 -1.17299 -44.392 cv
-1.17299 -42.688 -1.541 -40.935 -2.77699 -39.68 cv
-2.90599 -39.561 -2.90599 -39.54 -2.90599 -39.511 cv
-2.90599 -39.451 -2.866 -39.411 -2.806 -39.411 cv
-2.707 -39.411 -1.81 -40.088 -1.222 -41.353 cv
-.714996 -42.45 -.594986 -43.555 -.594986 -44.392 cv
f
5.02502 -44.113 mo
6.16101 -45.588 li
6.55902 -45.588 li
6.69901 -45.588 6.96701 -45.588 6.96701 -45.886 cv
6.96701 -46.195 6.70901 -46.195 6.55902 -46.195 cv
5.39401 -46.195 li
5.24402 -46.195 4.995 -46.195 4.995 -45.896 cv
4.995 -45.588 5.21402 -45.588 5.483 -45.588 cv
4.746 -44.581 li
3.98901 -45.588 li
4.24802 -45.588 4.46701 -45.588 4.46701 -45.896 cv
4.46701 -46.195 4.21802 -46.195 4.06802 -46.195 cv
2.90302 -46.195 li
2.75401 -46.195 2.49402 -46.195 2.49402 -45.886 cv
2.49402 -45.588 2.76302 -45.588 2.90302 -45.588 cv
3.30101 -45.588 li
4.47702 -44.113 li
3.24202 -42.509 li
2.84302 -42.509 li
2.69302 -42.509 2.43501 -42.509 2.43501 -42.2 cv
2.43501 -41.902 2.70401 -41.902 2.84302 -41.902 cv
4.009 -41.902 li
4.15802 -41.902 4.40701 -41.902 4.40701 -42.2 cv
4.40701 -42.509 4.198 -42.509 3.88902 -42.509 cv
4.746 -43.735 li
5.63202 -42.509 li
5.354 -42.509 5.134 -42.509 5.134 -42.2 cv
5.134 -41.902 5.383 -41.902 5.53302 -41.902 cv
6.69901 -41.902 li
6.83801 -41.902 7.10699 -41.902 7.10699 -42.2 cv
7.10699 -42.509 6.84802 -42.509 6.69901 -42.509 cv
6.30002 -42.509 li
5.02502 -44.113 li
f
19.132 -44.1931 mo
19.312 -44.1931 19.491 -44.1931 19.491 -44.392 cv
19.491 -44.591 19.312 -44.591 19.132 -44.591 cv
11.73 -44.591 li
12.278 -45.01 12.547 -45.419 12.627 -45.548 cv
13.075 -46.235 13.154 -46.863 13.154 -46.873 cv
13.154 -46.993 13.035 -46.993 12.955 -46.993 cv
12.786 -46.993 12.776 -46.973 12.736 -46.794 cv
12.507 -45.817 11.919 -44.9901 10.794 -44.522 cv
10.684 -44.482 10.644 -44.462 10.644 -44.392 cv
10.644 -44.323 10.694 -44.303 10.794 -44.263 cv
11.83 -43.835 12.497 -43.057 12.746 -41.942 cv
12.776 -41.822 12.786 -41.7921 12.955 -41.7921 cv
13.035 -41.7921 13.154 -41.7921 13.154 -41.912 cv
13.154 -41.932 13.065 -42.559 12.647 -43.2271 cv
12.447 -43.526 12.158 -43.874 11.73 -44.1931 cv
19.132 -44.1931 li
f
25.904 -47.6901 mo
25.904 -47.8491 25.904 -48.098 25.605 -48.098 cv
25.416 -48.098 25.356 -47.979 25.306 -47.859 cv
24.927 -47.012 24.409 -46.903 24.22 -46.8831 cv
24.061 -46.873 23.852 -46.853 23.852 -46.574 cv
23.852 -46.325 24.031 -46.275 24.18 -46.275 cv
24.37 -46.275 24.778 -46.335 25.217 -46.713 cv
25.217 -42.509 li
24.31 -42.509 li
24.15 -42.509 23.911 -42.509 23.911 -42.201 cv
23.911 -41.902 24.16 -41.902 24.31 -41.902 cv
26.811 -41.902 li
26.96 -41.902 27.209 -41.902 27.209 -42.201 cv
27.209 -42.509 26.97 -42.509 26.811 -42.509 cv
25.904 -42.509 li
25.904 -47.6901 li
f
60.184 -39.511 mo
60.184 -39.541 60.184 -39.561 60.014 -39.73 cv
58.769 -40.985 58.451 -42.868 58.451 -44.392 cv
58.451 -46.126 58.829 -47.86 60.054 -49.105 cv
60.184 -49.224 60.184 -49.244 60.184 -49.274 cv
60.184 -49.344 60.144 -49.374 60.084 -49.374 cv
59.985 -49.374 59.088 -48.696 58.5 -47.431 cv
57.992 -46.335 57.872 -45.229 57.872 -44.392 cv
57.872 -43.615 57.982 -42.41 58.53 -41.284 cv
59.127 -40.059 59.985 -39.411 60.084 -39.411 cv
60.144 -39.411 60.184 -39.441 60.184 -39.511 cv
f
64.671 -45.6871 mo
64.512 -45.6871 64.372 -45.6871 64.232 -45.5471 cv
64.073 -45.3981 64.053 -45.2291 64.053 -45.1591 cv
64.053 -44.92 64.232 -44.8101 64.422 -44.8101 cv
64.711 -44.8101 64.98 -45.0491 64.98 -45.4481 cv
64.98 -45.936 64.512 -46.3051 63.804 -46.3051 cv
62.459 -46.3051 61.134 -44.8801 61.134 -43.475 cv
61.134 -42.579 61.712 -41.791 62.748 -41.791 cv
64.173 -41.791 65.01 -42.848 65.01 -42.967 cv
65.01 -43.027 64.95 -43.097 64.89 -43.097 cv
64.84 -43.097 64.82 -43.077 64.761 -42.9971 cv
63.974 -42.011 62.888 -42.011 62.768 -42.011 cv
62.141 -42.011 61.871 -42.499 61.871 -43.097 cv
61.871 -43.5051 62.07 -44.472 62.409 -45.0891 cv
62.718 -45.657 63.266 -46.085 63.814 -46.085 cv
64.152 -46.085 64.531 -45.9561 64.671 -45.6871 cv
f
67.925 -44.3921 mo
67.925 -45.1691 67.816 -46.3751 67.268 -47.5001 cv
66.669 -48.7261 65.813 -49.3741 65.713 -49.3741 cv
65.654 -49.3741 65.613 -49.3331 65.613 -49.274 cv
65.613 -49.2441 65.613 -49.2241 65.803 -49.045 cv
66.78 -48.0591 67.347 -46.475 67.347 -44.3921 cv
67.347 -42.688 66.979 -40.9351 65.743 -39.6801 cv
65.613 -39.561 65.613 -39.54 65.613 -39.511 cv
65.613 -39.451 65.654 -39.4111 65.713 -39.4111 cv
65.813 -39.4111 66.709 -40.0881 67.297 -41.3531 cv
67.805 -42.4501 67.925 -43.5551 67.925 -44.3921 cv
f
72.778 -43.7551 mo
72.778 -44.691 73.366 -45.648 74.571 -45.648 cv
74.581 -45.4091 74.751 -45.21 75 -45.21 cv
75.218 -45.21 75.418 -45.369 75.418 -45.6381 cv
75.418 -45.837 75.299 -46.2551 74.471 -46.2551 cv
73.963 -46.2551 73.326 -46.076 72.778 -45.4481 cv
72.778 -45.787 li
72.778 -46.096 72.718 -46.195 72.38 -46.195 cv
71.284 -46.195 li
71.134 -46.195 70.884 -46.195 70.884 -45.897 cv
70.884 -45.588 71.124 -45.588 71.284 -45.588 cv
72.091 -45.588 li
72.091 -42.509 li
71.284 -42.509 li
71.134 -42.509 70.884 -42.509 70.884 -42.2111 cv
70.884 -41.902 71.124 -41.902 71.284 -41.902 cv
73.883 -41.902 li
74.033 -41.902 74.292 -41.902 74.292 -42.201 cv
74.292 -42.509 74.033 -42.509 73.883 -42.509 cv
72.778 -42.509 li
72.778 -43.7551 li
f
78.944 -47.6901 mo
78.944 -47.8491 78.944 -48.098 78.645 -48.098 cv
78.457 -48.098 78.396 -47.979 78.346 -47.859 cv
77.968 -47.012 77.45 -46.903 77.26 -46.8831 cv
77.101 -46.873 76.892 -46.853 76.892 -46.574 cv
76.892 -46.325 77.072 -46.275 77.221 -46.275 cv
77.41 -46.275 77.819 -46.335 78.257 -46.713 cv
78.257 -42.509 li
77.35 -42.509 li
77.191 -42.509 76.952 -42.509 76.952 -42.201 cv
76.952 -41.902 77.201 -41.902 77.35 -41.902 cv
79.851 -41.902 li
80.001 -41.902 80.25 -41.902 80.25 -42.201 cv
80.25 -42.509 80.01 -42.509 79.851 -42.509 cv
78.944 -42.509 li
78.944 -47.6901 li
f
92.812 -44.1931 mo
92.991 -44.1931 93.17 -44.1931 93.17 -44.392 cv
93.17 -44.591 92.991 -44.591 92.812 -44.591 cv
85.409 -44.591 li
85.957 -45.01 86.227 -45.419 86.306 -45.548 cv
86.754 -46.235 86.834 -46.863 86.834 -46.873 cv
86.834 -46.993 86.714 -46.993 86.635 -46.993 cv
86.465 -46.993 86.455 -46.973 86.415 -46.794 cv
86.187 -45.817 85.599 -44.9901 84.473 -44.522 cv
84.364 -44.482 84.324 -44.462 84.324 -44.392 cv
84.324 -44.323 84.373 -44.303 84.473 -44.263 cv
85.509 -43.835 86.177 -43.057 86.426 -41.942 cv
86.455 -41.822 86.465 -41.7921 86.635 -41.7921 cv
86.714 -41.7921 86.834 -41.7921 86.834 -41.912 cv
86.834 -41.932 86.744 -42.559 86.326 -43.2271 cv
86.127 -43.526 85.838 -43.874 85.409 -44.1931 cv
92.812 -44.1931 li
f
100.89 -45.5881 mo
101.189 -45.5881 li
101.338 -45.5881 101.587 -45.5881 101.587 -45.887 cv
101.587 -46.1951 101.348 -46.1951 101.189 -46.1951 cv
100.023 -46.1951 li
99.873 -46.1951 99.624 -46.1951 99.624 -45.897 cv
99.624 -45.5881 99.864 -45.5881 100.023 -45.5881 cv
100.302 -45.5881 li
99.584 -43.4661 li
99.454 -43.097 99.395 -42.918 99.325 -42.6091 cv
99.316 -42.6091 li
99.266 -42.7991 99.176 -43.007 99.106 -43.197 cv
98.18 -45.5881 li
98.429 -45.5881 li
98.578 -45.5881 98.827 -45.5881 98.827 -45.887 cv
98.827 -46.1951 98.588 -46.1951 98.429 -46.1951 cv
97.263 -46.1951 li
97.104 -46.1951 96.865 -46.1951 96.865 -45.887 cv
96.865 -45.5881 97.114 -45.5881 97.263 -45.5881 cv
97.572 -45.5881 li
98.987 -42.0311 li
99.027 -41.9321 99.027 -41.912 99.027 -41.902 cv
99.027 -41.882 98.778 -41.0651 98.648 -40.816 cv
98.359 -40.2681 98 -40.248 97.851 -40.238 cv
97.851 -40.248 97.901 -40.3281 97.901 -40.457 cv
97.901 -40.7061 97.721 -40.8851 97.472 -40.8851 cv
97.203 -40.8851 97.033 -40.7061 97.033 -40.447 cv
97.033 -40.0291 97.372 -39.6301 97.861 -39.6301 cv
98.857 -39.6301 99.305 -40.9451 99.345 -41.0551 cv
100.89 -45.5881 li
f
-8.21599 -28.5901 mo
-8.21599 -28.6201 -8.21599 -28.6401 -8.38499 -28.8091 cv
-9.631 -30.0651 -9.94899 -31.9471 -9.94899 -33.472 cv
-9.94899 -35.2051 -9.571 -36.9391 -8.345 -38.1841 cv
-8.21599 -38.303 -8.21599 -38.3231 -8.21599 -38.353 cv
-8.21599 -38.423 -8.256 -38.4531 -8.31599 -38.4531 cv
-8.41499 -38.4531 -9.312 -37.7751 -9.89999 -36.5101 cv
-10.407 -35.4141 -10.527 -34.3091 -10.527 -33.472 cv
-10.527 -32.694 -10.418 -31.4891 -9.87 -30.363 cv
-9.272 -29.1381 -8.41499 -28.4901 -8.31599 -28.4901 cv
-8.256 -28.4901 -8.21599 -28.5201 -8.21599 -28.5901 cv
f
-5.29298 -37.7861 mo
-5.29298 -37.796 -5.29298 -37.8961 -5.422 -37.8961 cv
-5.65099 -37.8961 -6.379 -37.816 -6.63799 -37.796 cv
-6.71799 -37.7861 -6.827 -37.7761 -6.827 -37.597 cv
-6.827 -37.4771 -6.73698 -37.4771 -6.588 -37.4771 cv
-6.10999 -37.4771 -6.09 -37.408 -6.09 -37.308 cv
-6.09 -37.238 -6.17999 -36.899 -6.23 -36.6901 cv
-7.04599 -33.442 li
-7.16599 -32.944 -7.20599 -32.785 -7.20599 -32.436 cv
-7.20599 -31.4901 -6.67799 -30.8721 -5.94099 -30.8721 cv
-4.76498 -30.8721 -3.53999 -32.356 -3.53999 -33.791 cv
-3.53999 -34.6981 -4.06699 -35.3851 -4.864 -35.3851 cv
-5.323 -35.3851 -5.73199 -35.0961 -6.03 -34.787 cv
-5.29298 -37.7861 li
cp
-6.23 -34.02 mo
-6.16899 -34.2401 -6.16899 -34.2601 -6.07999 -34.369 cv
-5.592 -35.0161 -5.144 -35.166 -4.88399 -35.166 cv
-4.52599 -35.166 -4.25699 -34.8671 -4.25699 -34.2291 cv
-4.25699 -33.6411 -4.58499 -32.496 -4.76498 -32.1171 cv
-5.09399 -31.45 -5.55199 -31.0911 -5.94099 -31.0911 cv
-6.27899 -31.0911 -6.60799 -31.36 -6.60799 -32.097 cv
-6.60799 -32.287 -6.60799 -32.476 -6.44899 -33.1041 cv
-6.23 -34.02 li
f
-.473984 -33.472 mo
-.473984 -34.249 -.583984 -35.454 -1.13199 -36.58 cv
-1.72899 -37.805 -2.586 -38.453 -2.68599 -38.453 cv
-2.745 -38.453 -2.786 -38.413 -2.786 -38.353 cv
-2.786 -38.324 -2.786 -38.304 -2.59599 -38.124 cv
-1.62 -37.138 -1.05199 -35.554 -1.05199 -33.472 cv
-1.05199 -31.768 -1.42099 -30.015 -2.65599 -28.76 cv
-2.786 -28.64 -2.786 -28.62 -2.786 -28.59 cv
-2.786 -28.531 -2.745 -28.49 -2.68599 -28.49 cv
-2.586 -28.49 -1.68999 -29.168 -1.10199 -30.433 cv
-.593994 -31.529 -.473984 -32.635 -.473984 -33.472 cv
f
6.45001 -34.6671 mo
6.74899 -34.6671 li
6.89801 -34.6671 7.14801 -34.6671 7.14801 -34.966 cv
7.14801 -35.275 6.90799 -35.275 6.74899 -35.275 cv
5.58301 -35.275 li
5.43399 -35.275 5.185 -35.275 5.185 -34.976 cv
5.185 -34.6671 5.42401 -34.6671 5.58301 -34.6671 cv
5.862 -34.6671 li
5.14499 -32.545 li
5.01498 -32.176 4.95599 -31.997 4.88599 -31.688 cv
4.87601 -31.688 li
4.82599 -31.8781 4.737 -32.087 4.66699 -32.276 cv
3.74001 -34.6671 li
3.99001 -34.6671 li
4.13901 -34.6671 4.388 -34.6671 4.388 -34.966 cv
4.388 -35.275 4.14899 -35.275 3.99001 -35.275 cv
2.82401 -35.275 li
2.664 -35.275 2.425 -35.275 2.425 -34.966 cv
2.425 -34.6671 2.67401 -34.6671 2.82401 -34.6671 cv
3.13301 -34.6671 li
4.547 -31.11 li
4.58701 -31.011 4.58701 -30.991 4.58701 -30.981 cv
4.58701 -30.961 4.33798 -30.144 4.20801 -29.895 cv
3.92 -29.347 3.561 -29.327 3.41101 -29.317 cv
3.41101 -29.327 3.461 -29.407 3.461 -29.536 cv
3.461 -29.785 3.282 -29.965 3.033 -29.965 cv
2.76401 -29.965 2.595 -29.785 2.595 -29.526 cv
2.595 -29.108 2.933 -28.709 3.422 -28.709 cv
4.418 -28.709 4.866 -30.024 4.90601 -30.134 cv
6.45001 -34.6671 li
f
19.132 -33.2731 mo
19.311 -33.2731 19.491 -33.2731 19.491 -33.472 cv
19.491 -33.671 19.311 -33.671 19.132 -33.671 cv
11.73 -33.671 li
12.278 -34.09 12.547 -34.498 12.627 -34.6281 cv
13.075 -35.3151 13.155 -35.9431 13.155 -35.9531 cv
13.155 -36.072 13.035 -36.072 12.955 -36.072 cv
12.786 -36.072 12.776 -36.0521 12.736 -35.873 cv
12.507 -34.897 11.919 -34.0701 10.793 -33.6021 cv
10.684 -33.562 10.644 -33.5421 10.644 -33.472 cv
10.644 -33.402 10.694 -33.382 10.793 -33.342 cv
11.829 -32.9141 12.497 -32.137 12.746 -31.0211 cv
12.776 -30.902 12.786 -30.8721 12.955 -30.8721 cv
13.035 -30.8721 13.155 -30.8721 13.155 -30.991 cv
13.155 -31.011 13.065 -31.639 12.646 -32.306 cv
12.447 -32.605 12.158 -32.954 11.73 -33.2731 cv
19.132 -33.2731 li
f
25.905 -36.769 mo
25.905 -36.929 25.905 -37.178 25.606 -37.178 cv
25.417 -37.178 25.357 -37.058 25.307 -36.938 cv
24.928 -36.092 24.41 -35.982 24.221 -35.962 cv
24.062 -35.952 23.852 -35.932 23.852 -35.653 cv
23.852 -35.404 24.032 -35.354 24.181 -35.354 cv
24.37 -35.354 24.779 -35.414 25.218 -35.793 cv
25.218 -31.588 li
24.311 -31.588 li
24.151 -31.588 23.912 -31.588 23.912 -31.28 cv
23.912 -30.981 24.161 -30.981 24.311 -30.981 cv
26.811 -30.981 li
26.961 -30.981 27.21 -30.981 27.21 -31.28 cv
27.21 -31.588 26.971 -31.588 26.811 -31.588 cv
25.905 -31.588 li
25.905 -36.769 li
f
59.343 -28.59 mo
59.343 -28.62 59.343 -28.64 59.173 -28.809 cv
57.928 -30.065 57.609 -31.947 57.609 -33.472 cv
57.609 -35.205 57.988 -36.939 59.213 -38.184 cv
59.343 -38.304 59.343 -38.324 59.343 -38.354 cv
59.343 -38.423 59.303 -38.453 59.243 -38.453 cv
59.144 -38.453 58.246 -37.775 57.659 -36.51 cv
57.151 -35.415 57.032 -34.309 57.032 -33.472 cv
57.032 -32.695 57.141 -31.489 57.689 -30.363 cv
58.286 -29.138 59.144 -28.49 59.243 -28.49 cv
59.303 -28.49 59.343 -28.521 59.343 -28.59 cv
f
65.026 -37.786 mo
65.026 -37.796 65.026 -37.895 64.896 -37.895 cv
64.747 -37.895 63.8 -37.806 63.631 -37.786 cv
63.551 -37.776 63.492 -37.726 63.492 -37.596 cv
63.492 -37.477 63.582 -37.477 63.731 -37.477 cv
64.209 -37.477 64.229 -37.408 64.229 -37.308 cv
64.199 -37.109 li
63.601 -34.747 li
63.422 -35.116 63.133 -35.385 62.685 -35.385 cv
61.519 -35.385 60.284 -33.92 60.284 -32.466 cv
60.284 -31.53 60.832 -30.872 61.609 -30.872 cv
61.808 -30.872 62.306 -30.912 62.904 -31.619 cv
62.984 -31.2 63.333 -30.872 63.81 -30.872 cv
64.159 -30.872 64.388 -31.101 64.547 -31.42 cv
64.717 -31.779 64.846 -32.386 64.846 -32.406 cv
64.846 -32.506 64.756 -32.506 64.727 -32.506 cv
64.628 -32.506 64.618 -32.466 64.588 -32.326 cv
64.419 -31.679 64.239 -31.091 63.831 -31.091 cv
63.561 -31.091 63.532 -31.35 63.532 -31.549 cv
63.532 -31.788 63.551 -31.858 63.591 -32.028 cv
65.026 -37.786 li
cp
62.954 -32.167 mo
62.904 -31.988 62.904 -31.968 62.755 -31.798 cv
62.316 -31.25 61.908 -31.091 61.629 -31.091 cv
61.13 -31.091 60.991 -31.639 60.991 -32.028 cv
60.991 -32.526 61.31 -33.751 61.539 -34.209 cv
61.848 -34.797 62.297 -35.166 62.695 -35.166 cv
63.342 -35.166 63.482 -34.349 63.482 -34.289 cv
63.482 -34.229 63.462 -34.169 63.452 -34.119 cv
62.954 -32.167 li
f
67.924 -33.472 mo
67.924 -34.249 67.815 -35.454 67.267 -36.58 cv
66.669 -37.806 65.812 -38.4529 65.712 -38.4529 cv
65.653 -38.4529 65.613 -38.413 65.613 -38.3539 cv
65.613 -38.324 65.613 -38.304 65.802 -38.1249 cv
66.779 -37.139 67.346 -35.554 67.346 -33.472 cv
67.346 -31.7679 66.978 -30.015 65.742 -28.7599 cv
65.613 -28.6409 65.613 -28.6199 65.613 -28.59 cv
65.613 -28.5309 65.653 -28.4899 65.712 -28.4899 cv
65.812 -28.4899 66.708 -29.168 67.296 -30.433 cv
67.805 -31.53 67.924 -32.6349 67.924 -33.472 cv
f
72.777 -32.834 mo
72.777 -33.7709 73.365 -34.7269 74.57 -34.7269 cv
74.58 -34.488 74.75 -34.2889 74.999 -34.2889 cv
75.218 -34.2889 75.417 -34.4479 75.417 -34.717 cv
75.417 -34.9169 75.298 -35.335 74.47 -35.335 cv
73.963 -35.335 73.325 -35.155 72.777 -34.528 cv
72.777 -34.8669 li
72.777 -35.1749 72.717 -35.275 72.379 -35.275 cv
71.283 -35.275 li
71.134 -35.275 70.884 -35.275 70.884 -34.976 cv
70.884 -34.6669 71.123 -34.6669 71.283 -34.6669 cv
72.09 -34.6669 li
72.09 -31.5889 li
71.283 -31.5889 li
71.134 -31.5889 70.884 -31.5889 70.884 -31.29 cv
70.884 -30.981 71.123 -30.981 71.283 -30.981 cv
73.882 -30.981 li
74.032 -30.981 74.292 -30.981 74.292 -31.28 cv
74.292 -31.5889 74.032 -31.5889 73.882 -31.5889 cv
72.777 -31.5889 li
72.777 -32.834 li
f
76.512 -31.559 mo
76.423 -31.4789 76.363 -31.4299 76.363 -31.2899 cv
76.363 -30.981 76.612 -30.981 76.772 -30.981 cv
80.149 -30.981 li
80.478 -30.981 80.547 -31.0709 80.547 -31.39 cv
80.547 -31.6479 li
80.547 -31.838 80.547 -32.0569 80.208 -32.0569 cv
79.86 -32.0569 79.86 -31.8679 79.86 -31.5889 cv
77.489 -31.5889 li
78.076 -32.0969 79.033 -32.8439 79.461 -33.2429 cv
80.089 -33.8009 80.547 -34.4379 80.547 -35.2349 cv
80.547 -36.4309 79.541 -37.1779 78.326 -37.1779 cv
77.15 -37.1779 76.363 -36.3609 76.363 -35.5139 cv
76.363 -35.145 76.642 -35.0359 76.812 -35.0359 cv
77.021 -35.0359 77.249 -35.205 77.249 -35.4839 cv
77.249 -35.6039 77.2 -35.7329 77.111 -35.8029 cv
77.26 -36.2609 77.728 -36.5699 78.276 -36.5699 cv
79.093 -36.5699 79.86 -36.1119 79.86 -35.2349 cv
79.86 -34.5379 79.371 -33.9599 78.714 -33.4119 cv
76.512 -31.559 li
f
92.811 -33.2729 mo
92.99 -33.2729 93.169 -33.2729 93.169 -33.4719 cv
93.169 -33.6709 92.99 -33.6709 92.811 -33.6709 cv
85.408 -33.6709 li
85.956 -34.0899 86.226 -34.4989 86.305 -34.6279 cv
86.754 -35.3159 86.833 -35.9429 86.833 -35.9529 cv
86.833 -36.0729 86.714 -36.0729 86.634 -36.0729 cv
86.465 -36.0729 86.454 -36.0529 86.415 -35.8739 cv
86.186 -34.8969 85.598 -34.0699 84.472 -33.6019 cv
84.363 -33.5619 84.323 -33.5419 84.323 -33.4719 cv
84.323 -33.4019 84.372 -33.3829 84.472 -33.3429 cv
85.508 -32.9149 86.176 -32.1369 86.425 -31.0219 cv
86.454 -30.9019 86.465 -30.8719 86.634 -30.8719 cv
86.714 -30.8719 86.833 -30.8719 86.833 -30.9919 cv
86.833 -31.0119 86.743 -31.6389 86.325 -32.3069 cv
86.126 -32.6059 85.837 -32.9539 85.408 -33.2729 cv
92.811 -33.2729 li
f
99.4641 -33.1929 mo
100.6 -34.6679 li
100.998 -34.6679 li
101.138 -34.6679 101.407 -34.6679 101.407 -34.9659 cv
101.407 -35.2749 101.148 -35.2749 100.998 -35.2749 cv
99.832 -35.2749 li
99.683 -35.2749 99.434 -35.2749 99.434 -34.9759 cv
99.434 -34.6679 99.654 -34.6679 99.922 -34.6679 cv
99.185 -33.6609 li
98.428 -34.6679 li
98.687 -34.6679 98.907 -34.6679 98.907 -34.9759 cv
98.907 -35.2749 98.657 -35.2749 98.507 -35.2749 cv
97.342 -35.2749 li
97.193 -35.2749 96.934 -35.2749 96.934 -34.9659 cv
96.934 -34.6679 97.202 -34.6679 97.342 -34.6679 cv
97.74 -34.6679 li
98.916 -33.1929 li
97.681 -31.5889 li
97.282 -31.5889 li
97.133 -31.5889 96.873 -31.5889 96.873 -31.2799 cv
96.873 -30.9809 97.143 -30.9809 97.282 -30.9809 cv
98.448 -30.9809 li
98.597 -30.9809 98.846 -30.9809 98.846 -31.2799 cv
98.846 -31.5889 98.637 -31.5889 98.328 -31.5889 cv
99.185 -32.8149 li
100.072 -31.5889 li
99.793 -31.5889 99.574 -31.5889 99.574 -31.2799 cv
99.574 -30.9809 99.823 -30.9809 99.972 -30.9809 cv
101.138 -30.9809 li
101.278 -30.9809 101.546 -30.9809 101.546 -31.2799 cv
101.546 -31.5889 101.287 -31.5889 101.138 -31.5889 cv
100.74 -31.5889 li
99.4641 -33.1929 li
f
gsave
121.22 -98.2719 mo
-16.6139 -98.2719 li
-16.6139 -26.3279 li
121.22 -26.3279 li
cp
clp
.6 lw
true sadj
-16.6139 -71.8279 mo
121.22 -71.8279 li
.721248 .690089 .646357 .890104 cmyk
@
-16.6139 -87.4949 mo
121.22 -87.4949 li
@
-16.6139 -53.9949 mo
121.22 -53.9949 li
@
grestore
.35 lw
true sadj
53.0731 -68.7239 mo
53.0731 -56.1619 li
.721248 .690089 .646357 .890104 cmyk
@
53.0731 -51.2869 mo
53.0731 -26.3289 li
@
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKJ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE0295
8A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-
/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD
078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKJ+Helvetica /Encoding get
dup 49 /one put
dup 70 /F put
dup 105 /i put
pop
%ADOEndSubsetFont
/UUNUKJ+Helvetica*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 5{/.notdef}rp /seven /eight /.notdef 
/colon 6{/.notdef}rp /A 4{/.notdef}rp /F 3{/.notdef}rp /J 22{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp 
/l 7{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]
UUNUKJ+Helvetica nf
UUNUKJ+Helvetica*1 [7.9701 0 0 -7.9701 0 0 ]msf
-88.3979 -10.3889 mo
(Fig.1.)
[4.86807 1.76778 4.42978 4.43695 4.42978 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+NewCenturySchlbk-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+NewCenturySchlbk-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1991 Adobe Systems Incorporated.  All Rights Reserved.) def
/Weight (Roman) def
/ItalicAngle 0 def
/BaseFontName (NewCenturySchlbk-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 65 /A put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/FontBBox {-195 -250 1000 965} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 722 737 464 479 690 705] def
/OtherBlues [273 282 -205 -205] def
/StdHW [45] def
/StdVW [92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/period <1C60D8A8C9B854D07F2CCA4259E1BC866989B66FCDC617465236399
6D824065A52A3C8F3EDB1B6EF155F3C> |-
/A <1C60D8A8C9B6079F1E6E28C363DC874DA112C854773A96B3504B8F778404
4ECEBCF17569C7E38E7843E9DCD77476369B3B2F20F5CD7844B8E255ED5580DE
B64F103867A9620F0F32637ABFD443ECE83082AED237E64E2DB0B87FCBA599A5
58C8670773E426A7603A04EE0B475CE5EBFE7738E3A54314EA390D9C32415592
9A04F6E455DB072B6CC1> |-
/a <1C60D8A8C9B7EF32A0D0AE1EF0F62BB7BBE8AF01A5B7803A26674FB21109
340A467163967FCCC8F63CF4870D04DD1C3F30C6169566F86EF101915E7AD559
C615B9F2CAABDF32B5DB6E2292C2B723211E2994CBCDBB124767C1B84CDBEF29
256B065C4576B7AC57E373222B3153EE1A08433FD43753CFBA3315AC1E9D2E51
A6ECF7830AA2990F43FE03B50F4F7D0DF6435658637343E1CE6F5EF974F54243
004C50FAC54AF7D6D746D2B655809D860354CEA99D420A8B7B4906FB4B664C4D
098B724B41E9AEA5> |-
/d <1C60D8A8C9B7FD84115B7ADBBBBAF6547C0CCC072FBB86ABD0B9CAF03EDB
273AFCA29C0345BC11CA12FBECF7C78E9B64C52B55BDA66FFABD7237D61717B0
3CCFDE6091C1D7E1AA307DA3DC8D74A79B074B39F4052B86EF1FB85B87B2AFF7
528F0D86AA299C7B441DCF88ACEAD9473D0E557EB7AE1509E4B9945BBB7461E7
519212633D805AAA2156820759C883A47DA78D0151AEA071082C46AD9ED7536E
670CBE1077E7F4417DCD6F0F02C235EFE75E99C02BDE4B065FFE4287E633DB08
9F044C10027DAAA5D4EC9684DB89> |-
/e <1C60D8A8C9B7A73D32F7A6F0CEDBBA928DB8CCB39233B59FFE5FB31DB1B3
5C0D76BCD460F0EDA032A6184607F4BF31854DBDC4447881DB3E8BE2235397D0
D3505C20E952C6C9CE2D9EAB28ADE8DB4CBA1E935AA769AEACE103CEB19FC552
15C9396B1C248513> |-
/g <1C60D8A8C9B78256DE28BF97AD34075E4768927ECC8DB90642D77CD31DEC
CBDB5B707178FE864D33EB3286693E7709F074240787F0A3559D10DF0E400826
1E64CED714353CE1A792FE988C644EEB4092FB0271EEE971F242B4FC9A058289
1CA0D7264C7B6B4E527BC5E64F03A77595D9FB6AD2816E8E6AECD0FEE4386668
CFE736EE94DBB7643D0EE597166733E49AFD299893A4DEE4E5CA46C49DFF8629
1A74A8E4E1313D622B7D6F32A364A3760F9E54FDE2091C7BD2D2E71CD687F3ED
F345FB79486586213F5E603F7F7979627283757EB0D8CFCBD318F18B3D429AE0
3E9C7DC5A350E3EBE3FDA82E2B817C3992757C61D830E2E5830799F065659984
19DE1B58E709B52918CDCFE550DC4738A3DF78BA5E25858FDA1842A97F74F7B7
7E7CFBEE4D811BC132A1DC04BFEE3206F22C98CA11ADD53490B2BA5DB4D8853B
E222C805B6292CF528ED23FA879470B6> |-
/h <1C60D8A8C9B7D8BE6A6C43078112631D74441E1CE52948E1DF331D74C26C
D61852A52295A43A1324D5A45ED50FB807BABE903E31731156E4133C1A43634A
037822B1ABE6393C0C4FF937F4A4EA6442CB6A4D27B4D578599079A5D3974637
A3A8BA9A998FAEB77A92304091E6E59C4AB5FBD9F74B1E36AD6618FE44088A74
0EC42A9C9ADADA3C97955BABE9B1B97546EA2EADADC91D6E7A960B8C5D6D9075
7DFB5B3C6C> |-
/i <1C60D8A8C9B831A9FF8CD9197047825E848604FDD6E7F56F76E8364E24F6
D87E40CAC57E2383F9BBFE3BB7DA6CA71D7A4D9481D9CE16F654D52809C855A4
B8A9197C19C0A514FE849E2138CB99432640DCA012878EAE4F77DD8F6D542CA6
C7A1C20255312673CD406B24> |-
/l <1C60D8A8C9B831A9FF8CD9183079FC75DFED442C6F696BE4504C6A290C2C
69FD68EB033C5B91DC3387487D8EA68C3D287BCC0F5CA866E6484C312B19A8DE
15847456788A6325367F3335BB26> |-
/m <1C60D8A8C9B59F85E7C388C8F8D42D4F9C4A07954277BFC922CB62C68FF6
454F0E9BCC64C880EAC95864E86E8260CBC1AB8B8E239EA06B039FDFB30F81A5
B39C51F7C85A927B05DA74CB9AC882C85457F650C386EF445B03FB245C8E321B
532366734F9E903D388575B4A94C1258A9927C501CB78F02C7025CE518A68F70
3A6DC98E705EBFBB972250E4A6ADE8992BE4526C22E6E71B0DB1C9D62AF2683B
7ABB8CCABF0B9FEB908FF6F15194B478D15A79E023FA83D3FC839F5BD5EF264B
4D54F22584B8DE67DC92A172003FAC0DF015046C111B301542B7D539BF1FE0A4
FEB832DD7A9C7315643D9C> |-
/n <1C60D8A8C9B7D8BE6A6C430784FDAE2103086296A83BCDE41BC6C4D542B2
B13631EB1A1FF34635BC8BEC4B88DA4DF2A8A7679F9735541036F171442F972C
2F980F76BC666E74BE29DEB5E8496D04405696B062BBB5FBE37E1FC6B7F85E2C
B2952BAE938A85763D727F32E58260AB4CEB4ECCD4AC11465B6D612E255EE186
62345520347A4A1001239E20717414F5D43EE3F372D9DA28D2> |-
/o <1C60D8A8C9B7A73D32F945FD647005A2F1A7707B71E1A8E0762102820CEB
364242DE4DD59050DDA5727D51AFFE041603A2E1901800384923D88D5E746139
7A2FCA19D5A84C3CE4A0DF8AF5DFB11D3E249B35D4DC6FDA8A56> |-
/p <1C60D8A8C9B7FD8496449B6B5DA3404CAEAF93ECD165DD9344A64EE8865A
51DE9D146B476994D2B7712BDF91851F77C31F7840CE9FB4BCD802712D55415B
319EA6FF9CE3F810D594CF8F336F681D0BCE6373BE25898C726C3492B0FD6C2C
CB343D66FDDFDD10CBA7C093CE389937880A50EF76C2D0327EA3FEFDF625B5F2
D81AB25ED5A2A34CE80D2CD06A4705D1013DD76B54782AC3CFF9CC532F7C663D
2BFA9CFCE62AD3506228D5BF540FF6D073339CFF14B292531B37CE912BD6F496
35668C76> |-
/r <1C60D8A8C9B77FE2B239EC2E62CF2DF5CFA62EC7BD4226DA91B4CEF23A48
5576BEB971FC2664E16D4FB864644556C4C02FA451134CBD4DEEC866E1019CD2
90AA46BEB1E032AFD32D08BE4251C821416623C707CAD2494F3E033F8ED65F62
57A84CD8B3138C8AEE956E8FDB04986ADB1743FA3EE8F1E92D5EC6F40DEA8C8A
DCDECC0A401C2A45C458F0D44C> |-
/s <1C60D8A8C9B74CDD12D9EE5CF892F5086698A8188F60B5A0E646E5570DDF
3FE5BCAC128C0572D20097703FFC435F3E1A978F0186692DA9956ED76501FDC6
636C7DBB2ACCCE8761D2814AE5D87C79037855D41AE65C069E2D7E21AEE30462
ECF122DF4A9C44458E2676CECFA5D51B043E51CF66D9F5E8C47FAB8926825BA6
0525BB67066C9A747C13264521CA966D9BBC4D5EB3593909ED2FBA375CA7E260
37383C549001E8CCDA77492C49AB0FABEAE0E5147032E5CBD5F551823D74F2AD
17652027E12E051F746896044B1C64A4FFBBCB38A2E91AA84FBEC5481EF9E039
FFA0> |-
/t <1C60D8A8C9B7361F894A6F48C35B1AC88BD46856678F93D99F5947E0379F
0D3BFA56C05875C92EA70AB6BAF5B60E86E32EE36B6E5A542EB587149C6271D3
6674605A3F51887D8505AC80C0C1E794011710E5> |-
/u <1C60D8A8C9B7D8BE9D3816895332C8CAD5267F2C5E39CE384D708D78928E
CAE15AA60EA89C65E1AE17F316A09776E8B779FDEE47DB0458EB5F12095DE6AF
F2889E91902D306FAE5C8259C9E42D98A2927FD86BD8CF608339FD64196791D4
4D096B91EB7224CE1E54C40425753CF8F4B7AC7A5125F2608277> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKK+NewCenturySchlbk-Roman /GAAAAA+NewCenturySchlbk-Roman findfont ct_VMDictPut
/UUNUKK+NewCenturySchlbk-Roman*1 
[46{/.notdef}rp /period 18{/.notdef}rp /A 31{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
UUNUKK+NewCenturySchlbk-Roman nf
UUNUKK+NewCenturySchlbk-Roman*1 [7.9701 0 0 -7.9701 0 0 ]msf
-58.9684 -10.3889 mo
(Amultithreadedprogramimplementingamessagepassingpattern.)
[7.96532 7.08389 4.86887 2.50981 3.09962 2.50981 3.09962 4.86888 3.53793 3.98425 4.43057 4.57407 
3.98425 6.80411 4.5741 3.53793 3.98425 4.27914 3.53793 4.43057 9.30676 2.51138 7.08469 4.5741 
2.5098 3.98425 7.08469 3.98425 4.8689 3.09961 2.50983 4.86887 6.5076 6.6423 7.0831 3.98425 
3.68933 3.68936 4.43057 4.27917 6.20154 4.5741 4.4306 3.68933 3.68933 2.50983 4.8689 6.50757 
4.5741 4.4306 3.09961 3.09967 3.98425 3.5379 4.8689 0 ]xsh
.45 lw
2 lj
82.9041 30.2801 mo
82.9041 46.0601 li
false sop
.721248 .690089 .646357 .890104 cmyk
@
84.165 46.1791 mo
82.904 49.7801 li
81.644 46.1791 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
84.165 46.1791 mo
82.904 49.7801 li
81.644 46.1791 li
84.165 46.1791 li
cp
.721248 .690089 .646357 .890104 cmyk
@
23.685 46.1791 mo
22.425 49.7801 li
21.165 46.1791 li
1 /1 /CSD get_res sepcs
1 sep
ef
23.685 46.1791 mo
22.425 49.7801 li
21.165 46.1791 li
23.685 46.1791 li
cp
.721248 .690089 .646357 .890104 cmyk
@
2 lj
22.425 30.2801 mo
22.425 46.0601 li
@
16.672 74.6301 mo
16.672 79.8601 li
17.509 79.8601 li
17.509 76.5821 li
17.509 75.8251 18.054 75.2181 18.729 75.2181 cv
19.344 75.2181 19.69 75.5961 19.69 76.2641 cv
19.69 79.8601 li
20.527 79.8601 li
20.527 76.5821 li
20.527 75.8251 21.075 75.2181 21.753 75.2181 cv
22.361 75.2181 22.719 75.6071 22.719 76.2641 cv
22.719 79.8601 li
23.556 79.8601 li
23.556 75.9451 li
23.556 75.0091 23.018 74.4901 22.042 74.4901 cv
21.344 74.4901 20.926 74.6991 20.438 75.2871 cv
20.129 74.7301 19.712 74.4901 19.036 74.4901 cv
18.337 74.4901 17.879 74.7491 17.429 75.3771 cv
17.429 74.6301 li
16.672 74.6301 li
f
24.793 82.0321 mo
25.63 82.0321 li
25.63 79.3121 li
26.067 79.8501 26.553 80.0891 27.228 80.0891 cv
28.571 80.0891 29.456 79.0031 29.456 77.3401 cv
29.456 75.5861 28.601 74.4901 27.219 74.4901 cv
26.509 74.4901 25.94 74.8091 25.55 75.4271 cv
25.55 74.6391 li
24.783 74.6391 li
24.793 82.0321 li
cp
27.08 75.2671 mo
27.993 75.2671 28.589 76.0741 28.589 77.3191 cv
28.589 78.5051 27.983 79.3121 27.08 79.3121 cv
26.206 79.3121 25.63 78.5151 25.63 77.2901 cv
25.63 76.0641 26.206 75.2671 27.08 75.2671 cv
f
34.876 72.5971 mo
33.88 73.9021 33.252 75.7151 33.252 77.2801 cv
33.252 78.8531 33.88 80.6661 34.876 81.9721 cv
35.424 81.9721 li
34.547 80.5471 34.059 78.8731 34.059 77.2801 cv
34.059 75.6951 34.547 74.0111 35.424 72.5971 cv
34.876 72.5971 li
f
40.577 76.3931 mo
40.537 75.8841 40.428 75.5561 40.228 75.2671 cv
39.869 74.7791 39.242 74.4901 38.515 74.4901 cv
37.11 74.4901 36.194 75.6061 36.194 77.3391 cv
36.194 79.0231 37.09 80.0881 38.505 80.0881 cv
39.75 80.0881 40.537 79.3411 40.637 78.0661 cv
39.8 78.0661 li
39.66 78.9031 39.232 79.3221 38.525 79.3221 cv
37.608 79.3221 37.06 78.5751 37.06 77.3391 cv
37.06 76.0341 37.598 75.2571 38.505 75.2571 cv
39.202 75.2571 39.64 75.6651 39.74 76.3931 cv
40.577 76.3931 li
f
43.635 74.4901 mo
42.17 74.4901 41.283 75.5361 41.283 77.2901 cv
41.283 79.0431 42.16 80.0891 43.645 80.0891 cv
45.109 80.0891 46.006 79.0431 46.006 77.3301 cv
46.006 75.5261 45.139 74.4901 43.635 74.4901 cv
cp
43.645 75.2581 mo
44.581 75.2581 45.139 76.0241 45.139 77.3191 cv
45.139 78.5451 44.561 79.3221 43.645 79.3221 cv
42.718 79.3221 42.151 78.5551 42.151 77.2901 cv
42.151 76.0341 42.718 75.2581 43.645 75.2581 cv
f
47.152 74.6301 mo
47.152 79.8601 li
47.988 79.8601 li
47.988 76.9811 li
47.988 75.9151 48.545 75.2181 49.398 75.2181 cv
50.052 75.2181 50.469 75.6161 50.469 76.2441 cv
50.469 79.8601 li
51.296 79.8601 li
51.296 75.9151 li
51.296 75.0481 50.65 74.4901 49.646 74.4901 cv
48.867 74.4901 48.368 74.7891 47.909 75.5171 cv
47.909 74.6301 li
47.152 74.6301 li
f
54.495 74.6391 mo
53.639 74.6391 li
53.639 73.2041 li
52.811 73.2041 li
52.811 74.6391 li
52.104 74.6391 li
52.104 75.3171 li
52.811 75.3171 li
52.811 79.2621 li
52.811 79.7891 53.17 80.0881 53.817 80.0881 cv
54.016 80.0881 54.217 80.0691 54.495 80.0191 cv
54.495 79.3221 li
54.386 79.3521 54.256 79.3621 54.097 79.3621 cv
53.738 79.3621 53.639 79.2621 53.639 78.8931 cv
53.639 75.3171 li
54.495 75.3171 li
54.495 74.6391 li
f
55.422 74.6391 mo
55.422 79.8601 li
56.259 79.8601 li
56.259 77.1501 li
56.259 76.4031 56.448 75.9141 56.847 75.6251 cv
57.106 75.4361 57.355 75.3761 57.933 75.3671 cv
57.933 74.5201 li
57.793 74.4991 57.724 74.4901 57.614 74.4901 cv
57.072 74.4901 56.661 74.8091 56.18 75.5851 cv
56.18 74.6391 li
55.422 74.6391 li
f
60.795 74.4901 mo
59.33 74.4901 58.443 75.5361 58.443 77.2901 cv
58.443 79.0431 59.32 80.0891 60.805 80.0891 cv
62.27 80.0891 63.166 79.0431 63.166 77.3301 cv
63.166 75.5261 62.299 74.4901 60.795 74.4901 cv
cp
60.805 75.2581 mo
61.741 75.2581 62.299 76.0241 62.299 77.3191 cv
62.299 78.5451 61.721 79.3221 60.805 79.3221 cv
59.878 79.3221 59.311 78.5551 59.311 77.2901 cv
59.311 76.0341 59.878 75.2581 60.805 75.2581 cv
f
64.282 79.8601 mo
65.1189 79.8601 li
65.1189 72.5974 li
64.282 72.5974 li
cp
f
71.085 74.6391 mo
70.219 74.6391 li
70.219 73.8232 li
70.219 73.4731 70.418 73.2942 70.796 73.2942 cv
70.866 73.2942 70.896 73.2942 71.085 73.3041 cv
71.085 72.6071 li
70.896 72.5751 70.786 72.5671 70.617 72.5671 cv
69.85 72.5671 69.392 73.0052 69.392 73.7521 cv
69.392 74.6391 li
68.694 74.6391 li
68.694 75.3171 li
69.392 75.3171 li
69.392 79.8601 li
70.219 79.8601 li
70.219 75.3171 li
71.085 75.3171 li
71.085 74.6391 li
cp
72.809 72.5872 mo
72.809 72.5872 mo
71.9818 72.5872 li
71.9818 79.8596 li
72.809 79.8596 li
cp
f
76.275 74.4901 mo
74.811 74.4901 73.924 75.5362 73.924 77.2902 cv
73.924 79.0432 74.8 80.0892 76.285 80.0892 cv
77.75 80.0892 78.646 79.0432 78.646 77.3302 cv
78.646 75.5262 77.78 74.4901 76.275 74.4901 cv
cp
76.285 75.2581 mo
77.221 75.2581 77.78 76.0242 77.78 77.3192 cv
77.78 78.5452 77.202 79.3221 76.285 79.3221 cv
75.359 79.3221 74.791 78.5551 74.791 77.2902 cv
74.791 76.0341 75.359 75.2581 76.285 75.2581 cv
f
84.485 79.8601 mo
86.019 74.6392 li
85.083 74.6392 li
84.046 78.7042 li
83.02 74.6392 li
82.003 74.6392 li
81.007 78.7042 li
79.942 74.6392 li
79.025 74.6392 li
80.54 79.8601 li
81.476 79.8601 li
82.482 75.7652 li
83.538 79.8601 li
84.485 79.8601 li
f
87.091 81.9721 mo
88.088 80.6661 88.715 78.8531 88.715 77.2892 cv
88.715 75.7151 88.088 73.9022 87.091 72.5971 cv
86.543 72.5971 li
87.42 74.0222 87.908 75.6952 87.908 77.2892 cv
87.908 78.8731 87.42 80.5572 86.543 81.9721 cv
87.091 81.9721 li
f
9.29498 29.0922 mo
9.20596 29.1112 9.16595 29.1112 9.11597 29.1112 cv
8.82697 29.1112 8.66797 28.9622 8.66797 28.7032 cv
8.66797 25.6352 li
8.66797 24.7082 7.98996 24.2102 6.70496 24.2102 cv
5.94797 24.2102 5.31998 24.4302 4.97098 24.8192 cv
4.73297 25.0872 4.63297 25.3862 4.61298 25.9042 cv
5.44998 25.9042 li
5.51898 25.2672 5.89798 24.9782 6.67496 24.9782 cv
7.42197 24.9782 7.83997 25.2562 7.83997 25.7542 cv
7.83997 25.9742 li
7.83997 26.3222 7.63098 26.4722 6.97397 26.5522 cv
5.79797 26.7012 5.61896 26.7402 5.29996 26.8702 cv
4.69196 27.1192 4.38297 27.5882 4.38297 28.2652 cv
4.38297 29.2112 5.04095 29.8102 6.09695 29.8102 cv
6.75397 29.8102 7.28296 29.5802 7.87097 29.0422 cv
7.92996 29.5712 8.18997 29.8102 8.72696 29.8102 cv
8.89697 29.8102 9.02597 29.7892 9.29498 29.7202 cv
9.29498 29.0922 li
cp
7.83997 27.9372 mo
7.83997 28.2152 7.76096 28.3852 7.51196 28.6132 cv
7.17297 28.9232 6.76495 29.0822 6.27597 29.0822 cv
5.62897 29.0822 5.25098 28.7742 5.25098 28.2452 cv
5.25098 27.6972 5.61896 27.4182 6.50497 27.2892 cv
7.38196 27.1692 7.56198 27.1292 7.83997 27.0002 cv
7.83997 27.9372 li
f
11.617 28.5442 mo
10.5809 28.5442 li
10.5809 29.5804 li
11.617 29.5804 li
cp
11.617 24.3592 mo
11.617 24.3592 mo
10.5809 24.3592 li
10.5809 25.3953 li
11.617 25.3953 li
cp
f
22.537 29.5802 mo
24.38 22.3173 li
23.344 22.3173 li
22.009 28.2152 li
20.355 22.3173 li
19.359 22.3173 li
17.745 28.2152 li
16.38 22.3173 li
15.344 22.3173 li
17.207 29.5802 li
18.223 29.5802 li
19.847 23.6122 li
21.521 29.5802 li
22.537 29.5802 li
f
27.394 26.8802 mo
29.147 24.3592 li
28.211 24.3592 li
26.956 26.2532 li
25.7 24.3592 li
24.754 24.3592 li
26.497 26.9202 li
24.654 29.5802 li
25.601 29.5802 li
26.926 27.5772 li
28.231 29.5802 li
29.197 29.5802 li
27.394 26.8802 li
f
34.845 26.0632 mo
30.0232 26.0632 li
30.0232 26.7604 li
34.845 26.7604 li
cp
34.845 27.7762 mo
34.845 27.7762 mo
30.0232 27.7762 li
30.0232 28.4744 li
34.845 28.4744 li
cp
f
37.865 24.5492 mo
37.865 29.5802 li
38.7409 29.5802 li
38.7409 22.5172 li
38.1639 22.5172 li
37.8549 23.6032 37.6549 23.7522 36.3009 23.9212 cv
36.3009 24.5492 li
37.865 24.5492 li
f
20.641 4.2832 mo
21.528 4.2832 li
21.6469 4.2832 21.7669 4.29321 21.886 4.29321 cv
23.2209 4.29321 li
23.2209 3.64526 li
17.1639 3.64526 li
17.1639 4.29321 li
18.4989 4.29321 li
18.619 4.29321 18.7379 4.2832 18.8569 4.2832 cv
19.7539 4.2832 li
19.7539 10.5002 li
20.641 10.5002 li
20.641 4.2832 li
f
27.243 9.71619 mo
27.243 8.94824 27.1519 8.39819 26.8309 7.90924 cv
26.6149 7.58923 26.1829 7.31024 25.6249 7.31024 cv
24.0069 7.31024 24.0069 9.21423 24.0069 9.71619 cv
24.0069 10.2182 24.0069 12.0802 25.6249 12.0802 cv
27.243 12.0802 27.243 10.2182 27.243 9.71619 cv
cp
25.6249 11.8852 mo
25.3039 11.8852 24.8789 11.6962 24.7399 11.1242 cv
24.6419 10.7132 24.6419 10.1412 24.6419 9.62524 cv
24.6419 9.11621 24.6419 8.58624 24.7459 8.20221 cv
24.8929 7.65222 25.3389 7.50519 25.6249 7.50519 cv
26.0019 7.50519 26.3639 7.73621 26.4899 8.1402 cv
26.6009 8.51624 26.6079 9.01923 26.6079 9.62524 cv
26.6079 10.1412 26.6079 10.6572 26.5179 11.0972 cv
26.3779 11.7312 25.9039 11.8852 25.6249 11.8852 cv
f
4.62296 53.9972 mo
4.62296 61.2602 li
5.36993 61.2602 li
5.36993 60.5932 li
5.76895 61.2002 6.29593 61.4892 7.02393 61.4892 cv
8.39795 61.4892 9.29495 60.3632 9.29495 58.6302 cv
9.29495 56.9362 8.43793 55.8912 7.06293 55.8912 cv
6.34595 55.8912 5.83795 56.1592 5.44995 56.7472 cv
5.44995 53.9972 li
4.62296 53.9972 li
cp
6.90393 56.6672 mo
7.83093 56.6672 8.42896 57.4752 8.42896 58.7202 cv
8.42896 59.9052 7.81094 60.7122 6.90393 60.7122 cv
6.02695 60.7122 5.44995 59.9152 5.44995 58.6892 cv
5.44995 57.4642 6.02695 56.6672 6.90393 56.6672 cv
f
11.737 60.2232 mo
10.7009 60.2232 li
10.7009 61.2595 li
11.737 61.2595 li
cp
11.737 56.0392 mo
11.737 56.0392 mo
10.7009 56.0392 li
10.7009 57.0754 li
11.737 57.0754 li
cp
f
22.537 61.2602 mo
24.3799 53.9973 li
23.3439 53.9973 li
22.0089 59.8962 li
20.3549 53.9973 li
19.3589 53.9973 li
17.7449 59.8962 li
16.3799 53.9973 li
15.3439 53.9973 li
17.2069 61.2602 li
18.2229 61.2602 li
19.847 55.2922 li
21.5199 61.2602 li
22.537 61.2602 li
f
28.11 56.0402 mo
26.6649 60.1052 li
25.3299 56.0402 li
24.4439 56.0402 li
26.2069 61.2803 li
25.8879 62.1063 li
25.7579 62.4763 25.5699 62.6152 25.2199 62.6152 cv
25.101 62.6152 24.9619 62.5953 24.782 62.5563 cv
24.782 63.3032 li
24.9519 63.3932 25.1209 63.4323 25.3399 63.4323 cv
25.6089 63.4323 25.8979 63.3422 26.1169 63.1832 cv
26.3759 62.9932 26.5259 62.7742 26.6849 62.3563 cv
29.0069 56.0402 li
28.11 56.0402 li
f
34.6049 57.7432 mo
29.7831 57.7432 li
29.7831 58.4404 li
34.6049 58.4404 li
cp
34.6049 59.4573 mo
34.6049 59.4573 mo
29.7831 59.4573 li
29.7831 60.1546 li
34.6049 60.1546 li
cp
f
37.6249 56.2282 mo
37.6249 61.2592 li
38.5009 61.2592 li
38.5009 54.1962 li
37.9239 54.1962 li
37.6149 55.2822 37.4149 55.4312 36.0609 55.6013 cv
36.0609 56.2282 li
37.6249 56.2282 li
f
81.1199 4.2832 mo
82.0069 4.2832 li
82.1269 4.2832 82.2459 4.29321 82.3659 4.29321 cv
83.7009 4.29321 li
83.7009 3.64526 li
77.6429 3.64526 li
77.6429 4.29321 li
78.9779 4.29321 li
79.0969 4.29321 79.2179 4.2832 79.3369 4.2832 cv
80.2329 4.2832 li
80.2329 10.5002 li
81.1199 10.5002 li
81.1199 4.2832 li
f
86.4609 7.50519 mo
86.4609 7.3172 86.4469 7.31024 86.2519 7.31024 cv
85.8059 7.74921 85.1709 7.75623 84.8849 7.75623 cv
84.8849 8.0072 li
85.0519 8.0072 85.5129 8.0072 85.8969 7.81219 cv
85.8969 11.3682 li
85.8969 11.5992 85.8969 11.6902 85.1979 11.6902 cv
84.9339 11.6902 li
84.9339 11.9412 li
85.0599 11.9342 85.9169 11.9122 86.1749 11.9122 cv
86.3919 11.9122 87.2699 11.9342 87.4229 11.9412 cv
87.4229 11.6902 li
87.1579 11.6902 li
86.4609 11.6902 86.4609 11.5992 86.4609 11.3682 cv
86.4609 7.50519 li
f
70.5769 26.1132 mo
70.5369 25.6042 70.4279 25.2762 70.2279 24.9872 cv
69.8699 24.4992 69.2419 24.2102 68.5149 24.2102 cv
67.1099 24.2102 66.1929 25.3262 66.1929 27.0592 cv
66.1929 28.7432 67.0909 29.8082 68.5049 29.8082 cv
69.7499 29.8082 70.5369 29.0612 70.6369 27.7872 cv
69.7999 27.7872 li
69.6609 28.6232 69.2319 29.0422 68.5249 29.0422 cv
67.6079 29.0422 67.0599 28.2952 67.0599 27.0592 cv
67.0599 25.7542 67.5989 24.9772 68.5049 24.9772 cv
69.2019 24.9772 69.6409 25.3852 69.7399 26.1132 cv
70.5769 26.1132 li
f
73.0569 28.5442 mo
72.0208 28.5442 li
72.0208 29.5804 li
73.0569 29.5804 li
cp
73.0569 24.3592 mo
73.0569 24.3592 mo
72.0208 24.3592 li
72.0208 25.3953 li
73.0569 25.3953 li
cp
f
78.1779 26.4512 mo
80.5689 26.4512 li
81.3959 26.4512 81.7649 26.8502 81.7649 27.7472 cv
81.7539 28.3942 li
81.7539 28.8432 81.8339 29.2812 81.9639 29.5802 cv
83.0899 29.5802 li
83.0899 29.3502 li
82.7409 29.1112 82.6709 28.8522 82.6519 27.8872 cv
82.6409 26.6902 82.4519 26.3322 81.6649 25.9932 cv
82.4819 25.5952 82.8109 25.0872 82.8109 24.2602 cv
82.8109 23.0052 82.0239 22.3172 80.5989 22.3172 cv
77.2509 22.3172 li
77.2509 29.5802 li
78.1779 29.5802 li
78.1779 26.4512 li
cp
78.1779 25.6352 mo
78.1779 23.1342 li
80.4189 23.1342 li
80.9379 23.1342 81.2369 23.2142 81.4659 23.4132 cv
81.7149 23.6222 81.8439 23.9512 81.8439 24.3892 cv
81.8439 25.2462 81.4059 25.6352 80.4189 25.6352 cv
78.1779 25.6352 li
f
87.391 24.3592 mo
85.946 28.4232 li
84.6109 24.3592 li
83.7239 24.3592 li
85.4879 29.5992 li
85.1689 30.4262 li
85.0399 30.7952 84.8499 30.9342 84.5009 30.9342 cv
84.382 30.9342 84.243 30.9152 84.063 30.8752 cv
84.063 31.6222 li
84.2329 31.7122 84.4019 31.7522 84.6209 31.7522 cv
84.89 31.7522 85.179 31.6622 85.3979 31.5022 cv
85.657 31.3132 85.8069 31.0932 85.9659 30.6752 cv
88.2879 24.3592 li
87.391 24.3592 li
f
93.8849 26.0632 mo
89.0626 26.0632 li
89.0626 26.7604 li
93.8849 26.7604 li
cp
93.8849 27.7762 mo
93.8849 27.7762 mo
89.0626 27.7762 li
89.0626 28.4734 li
93.8849 28.4734 li
cp
f
97.6119 27.5972 mo
97.6119 27.1282 li
97.6119 26.6902 97.7209 26.5212 98.3989 25.8932 cv
99.1459 25.2152 99.3949 24.7672 99.3949 24.1102 cv
99.3949 22.9442 98.5679 22.1972 97.2729 22.1972 cv
95.8389 22.1972 95.0909 22.9932 95.0909 24.5292 cv
95.9379 24.5292 li
95.9379 24.0702 95.9879 23.7912 96.1079 23.5522 cv
96.2969 23.1832 96.6959 22.9742 97.2229 22.9742 cv
97.9909 22.9742 98.4989 23.4322 98.4989 24.1102 cv
98.4989 24.5682 98.2799 24.9562 97.7519 25.4252 cv
97.1639 25.9522 97.1639 25.9522 96.9949 26.1822 cv
96.7849 26.4612 96.7159 26.6902 96.7159 27.0492 cv
96.7159 27.5972 li
97.6119 27.5972 li
cp
97.6119 28.5432 mo
97.6119 28.5432 mo
96.7155 28.5432 li
96.7155 29.5794 li
97.6119 29.5794 li
cp
f
70.4559 53.9972 mo
69.6289 53.9972 li
69.6289 56.6972 li
69.2799 56.1693 68.7229 55.8912 68.0249 55.8912 cv
66.6709 55.8912 65.7839 56.9762 65.7839 58.6402 cv
65.7839 60.4032 66.6499 61.4892 68.0559 61.4892 cv
68.7719 61.4892 69.2709 61.2202 69.7189 60.5722 cv
69.7189 61.2602 li
70.4559 61.2602 li
70.4559 53.9972 li
cp
68.1649 56.6672 mo
69.0619 56.6672 69.6289 57.4642 69.6289 58.7102 cv
69.6289 59.9152 69.0519 60.7122 68.1749 60.7122 cv
67.2579 60.7122 66.6499 59.9052 66.6499 58.6892 cv
66.6499 57.4752 67.2579 56.6672 68.1649 56.6672 cv
f
73.1769 60.2232 mo
72.1408 60.2232 li
72.1408 61.2595 li
73.1769 61.2595 li
cp
73.1769 56.0392 mo
73.1769 56.0392 mo
72.1408 56.0392 li
72.1408 57.0754 li
73.1769 57.0754 li
cp
f
78.5379 58.1322 mo
80.9289 58.1322 li
81.7559 58.1322 82.1239 58.5302 82.1239 59.4272 cv
82.1139 60.0742 li
82.1139 60.5233 82.1939 60.9612 82.3239 61.2603 cv
83.4489 61.2603 li
83.4489 61.0313 li
83.1009 60.7922 83.0309 60.5332 83.0109 59.5673 cv
83.0009 58.3712 82.8109 58.0122 82.0239 57.6743 cv
82.8419 57.2762 83.1709 56.7672 83.1709 55.9412 cv
83.1709 54.6852 82.3839 53.9973 80.9589 53.9973 cv
77.6109 53.9973 li
77.6109 61.2603 li
78.5379 61.2603 li
78.5379 58.1322 li
cp
78.5379 57.3152 mo
78.5379 54.8152 li
80.7789 54.8152 li
81.2979 54.8152 81.5969 54.8942 81.8249 55.0933 cv
82.0739 55.3032 82.2039 55.6312 82.2039 56.0692 cv
82.2039 56.9262 81.7659 57.3152 80.7789 57.3152 cv
78.5379 57.3152 li
f
86.7939 58.5602 mo
88.5479 56.0392 li
87.6109 56.0392 li
86.3559 57.9322 li
85.1009 56.0392 li
84.1539 56.0392 li
85.8969 58.5992 li
84.0549 61.2592 li
85.0009 61.2592 li
86.3259 59.2572 li
87.6309 61.2592 li
88.5979 61.2592 li
86.7939 58.5602 li
f
94.2449 57.7432 mo
89.4226 57.7432 li
89.4226 58.4404 li
94.2449 58.4404 li
cp
94.2449 59.4572 mo
94.2449 59.4572 mo
89.4226 59.4572 li
89.4226 60.1545 li
94.2449 60.1545 li
cp
f
97.9729 59.2772 mo
97.9729 58.8092 li
97.9729 58.3712 98.0819 58.2012 98.7599 57.5742 cv
99.5069 56.8962 99.7559 56.4482 99.7559 55.7912 cv
99.7559 54.6252 98.9289 53.8782 97.6339 53.8782 cv
96.1999 53.8782 95.4519 54.6752 95.4519 56.2092 cv
96.2989 56.2092 li
96.2989 55.7512 96.3489 55.4712 96.4679 55.2322 cv
96.6579 54.8642 97.0559 54.6542 97.5839 54.6542 cv
98.3519 54.6542 98.8599 55.1132 98.8599 55.7912 cv
98.8599 56.2492 98.6399 56.6372 98.1129 57.1052 cv
97.5249 57.6342 97.5249 57.6342 97.3549 57.8622 cv
97.1459 58.1412 97.0769 58.3712 97.0769 58.7292 cv
97.0769 59.2772 li
97.9729 59.2772 li
cp
97.9729 60.2232 mo
97.9729 60.2232 mo
97.0765 60.2232 li
97.0765 61.2594 li
97.9729 61.2594 li
cp
f
71.7239 45.9572 mo
72.3929 45.9572 li
72.3929 43.7812 li
72.7429 44.2122 73.1319 44.4032 73.6719 44.4032 cv
74.7459 44.4032 75.4529 43.5342 75.4529 42.2032 cv
75.4529 40.8012 74.7699 39.9242 73.6639 39.9242 cv
73.0969 39.9242 72.6409 40.1792 72.3289 40.6732 cv
72.3289 40.0442 li
71.7149 40.0442 li
71.7239 45.9572 li
cp
73.5529 40.5462 mo
74.2839 40.5462 74.7599 41.1912 74.7599 42.1882 cv
74.7599 43.1362 74.2759 43.7812 73.5529 43.7812 cv
72.8539 43.7812 72.3929 43.1442 72.3929 42.1632 cv
72.3929 41.1842 72.8539 40.5462 73.5529 40.5462 cv
f
77.8929 39.9241 mo
76.7209 39.9241 76.0119 40.7612 76.0119 42.1631 cv
76.0119 43.5671 76.7129 44.4031 77.9009 44.4031 cv
79.0729 44.4031 79.7899 43.5671 79.7899 42.1952 cv
79.7899 40.7532 79.0969 39.9241 77.8929 39.9241 cv
cp
77.9009 40.5381 mo
78.6509 40.5381 79.0969 41.1522 79.0969 42.1882 cv
79.0969 43.1682 78.6339 43.7892 77.9009 43.7892 cv
77.1599 43.7892 76.7059 43.1761 76.7059 42.1631 cv
76.7059 41.1592 77.1599 40.5381 77.9009 40.5381 cv
f
11.243 45.9572 mo
11.9119 45.9572 li
11.9119 43.7812 li
12.2619 44.2122 12.6509 44.4032 13.1909 44.4032 cv
14.2649 44.4032 14.9729 43.5342 14.9729 42.2032 cv
14.9729 40.8012 14.2889 39.9242 13.1829 39.9242 cv
12.6159 39.9242 12.1599 40.1792 11.8479 40.6732 cv
11.8479 40.0442 li
11.2349 40.0442 li
11.243 45.9572 li
cp
13.0719 40.5462 mo
13.8029 40.5462 14.2799 41.1912 14.2799 42.1882 cv
14.2799 43.1362 13.7949 43.7812 13.0719 43.7812 cv
12.3729 43.7812 11.9119 43.1442 11.9119 42.1632 cv
11.9119 41.1842 12.3729 40.5462 13.0719 40.5462 cv
f
17.413 39.9241 mo
16.2419 39.9241 15.532 40.7612 15.532 42.1631 cv
15.532 43.5671 16.2329 44.4031 17.421 44.4031 cv
18.593 44.4031 19.3099 43.5671 19.3099 42.1952 cv
19.3099 40.7532 18.6169 39.9241 17.413 39.9241 cv
cp
17.421 40.5381 mo
18.17 40.5381 18.6169 41.1522 18.6169 42.1882 cv
18.6169 43.1682 18.154 43.7892 17.421 43.7892 cv
16.68 43.7892 16.226 43.1761 16.226 42.1631 cv
16.226 41.1592 16.68 40.5381 17.421 40.5381 cv
f
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKJ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706F
E45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC7542
58679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52D
A81BBE025DB4544A719A686DB3A0393D2301EEF964B14766F22C4A5827> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066
468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF
3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4
A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC64
86> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKJ+Helvetica /Encoding get
dup 50 /two put
dup 84 /T put
dup 99 /c put
dup 102 /f put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
pop
%ADOEndSubsetFont
/UUNUKJ+Helvetica*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 4{/.notdef}rp /seven /eight 
/.notdef /colon 6{/.notdef}rp /A 4{/.notdef}rp /F 3{/.notdef}rp /J 
9{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /.notdef /e 
/f /g /.notdef /i 2{/.notdef}rp /l /m /.notdef 
/o /p /.notdef /r /.notdef /t /.notdef /v 
137{/.notdef}rp]
UUNUKJ+Helvetica nf
UUNUKJ+Helvetica*1 [7.9701 0 0 -7.9701 0 0 ]msf
-87.534 97.971 mo
(Fig.2.)
[4.86807 1.76778 4.42978 4.42819 4.42978 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+NewCenturySchlbk-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKK+NewCenturySchlbk-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C368BC3322EAEF43482E98909A26D3AA10A10
E90987C0522E1644B9404E184D153290AC2AC956A74ED32A54CA7F9CEFDD308D
789DBE1C49F2> |-
/parenright <1C60D8A8C9B81F2C368BC3322EEAF87A88CDB5C1382A2D16526
FE6F4EB9A3B9D3AB26975DD8920E907F4179F5F27BE3812D592C6EC5EFD3DE0D
F14ACAED6C35D4E> |-
/comma <1C60D8A8C9B854D09AD70766E41E0E33C8605ACBE7471335FA3FDC23
D37C44240231B94D30864EA4E10E3BEFE050EC15643718AFCEFC20EEA8DFEB2C
2218E9141514E2D408237F9E8EE3AC1F2518DC632688A4C4C4E232FF> |-
/hyphen <1C60D8A8C9B81F2C3AE0F7E48C1BB6622FBE20A724C31732CFFFD87
CFB6C> |-
/zero <1C60D8A8C9B7EF32A0D5B6A4EE5D3EC4521733CE7FE3FECCEFE3116A3
2A269FD02460CDAD05B378D9ED480107EA9AA9E3AF55E9BC83D9D64C7A77B8A7
39D38AEA29C182C330F420B082DED3AF53D558A86DC511508E4DDAFA5F6869B1
4> |-
/one <1C60D8A8C9B7EF3257282EF3EEEB92F01EE7B32F7338EA85EE645F8ED2
72958B28EABD74B2AC9F7A902B819C67CA05CC3664FBD4E6731E3E5F6FC6AC07
5555D42B880A3008FE72> |-
/two <1C60D8A8C9B7EF325777E22F5A112FF9949165008E6D1CE12882CA1698
92E66560B37227CDE1B8A97433B87CF1818B9924130E2F1245896B43057FE6D5
A6AA7C15A93A3836C66C41223570CB74F98081A37380DB08849BFA3735FC2B6D
0DE79EB7D645C16952C1488781D8C5ECF90F60183CD0684A979BD0F53C45CAAC> |-
/three <1C60D8A8C9B7EF32A0D5B6AA76780E723361B9513A433CA7854C5C7B
38A77E90D7AECFF757BB400C5CE55AF44942E590841B157578E8A28EE0DD8FA8
ADF80532695B9B5896CF23ADBACD76BFAFD5C3D355EB94900A0542F6ACE690D8
8DE5B8C4C32BAE933305718881CAD0FECDB5ED12492AEA31D75F9DD5C71EEEAC
E0FB87D64A8473A54B50E60AEEE7C6645ACE53569E3AE24A0D841A60F5C40DBC
775DFBA121A645E56BF2C5FE326BA9EC38E0D0B8C44E9B4D1C851FE1FC29CDDA
133F80534B9498B1C3AECFB2D61532EEEA> |-
/four <1C60D8A8C9B7EF3257282EFC36A10F62A5529691098EEDCB503B64C13
D7F5AB6F8FC83B337FB49757C1C65F4A82BC67E2ED4C12D430DAD24444D06CAA
C86FB79B6B5F607B3E9FB0D38707E1FA0C00AF140F9E71E6E70C6A7934A632C4
2A62D52BC9F> |-
/six <1C60D8A8C9B7EF32A0D5B6A593D8C6CF7CB69AAC6636810135ED07DF21
65C95D036DE9AD3C2909CC839B4F74862A92A6C9BAE047A8544D0EE34E43C0FC
DD3EF4F918578582CE4C186BE3A7BB7D3B34B1C22F4C6E136EF282C45585186D
F321DC7162DFD51409D81C1909485919949BB0151A1EAB736D24F908110EC50B
618C8C6829200C432907BDF4004684B681A1E027BBB347183B865228350E3FEA
64535E0655574313A59B6A442BFE13B62E544A3A5C0EC89E50E61518BBEDF368
6DAE6AD0190BD8B2B0DFC6224DC0> |-
/seven <1C60D8A8C9B7EF324DF642F5A47FF209ED6F40C58D8E1F546698938E
D4744B14F5E5171841A20994F214AF4F04DF8CE24DC5EF605F780DF1B629D5A1
E79F50EDFD60D751D76A68FB72DEAD58E95B20CAD9AA9562C8D271295A4FEB3D
2A36C3711DA16C5D72660FDF5F3E9EF7173297A26F61A2D12CECAB54FCC1EDF2
E9BF5511195153F2C9428FA52046CA83972F0E873B149797B4A6BB86144301D8
60194C> |-
/colon <1C60D8A8C9B854D0F4C1662E794E27DCF8D7F7052A15AA707E73262E
045DB5768B2A7CA529CA2FDA76320BD9F473BBEE675FDBC6A2B28DC906FEA255
FA9A0A66CC687D2CE28C5905645BC83655C3E9B63B> |-
/semicolon <1C60D8A8C9B854D09AD707662CB279D7372DFF5480CC555FE5D5
D34759963E167BBC505EC12384FC9D64882D68280591AA3EE4A5554C20C85871
19935CD549DEF0F71963478ABB3722358B7D6CB2BCBA103E8894EFC6F0DA0519
CBFE069B7B542051A89F8B21F4E5988935FEB21FFB301524609B71E192F4CEBA
BD1ED2040208339BE9FF93CB902AA98527D4A3> |-
/question <1C60D8A8C9B77FE245524704395B9D79265C3BDFDF3DCE64D04B8
06A3E362603FD46D637A5A059CBD3DF61C36BC833C347E83EB86246F5139F856
51228294FF99EC7563FAC599177500B48C5FBD85AA656B5EF6760C8B4C0B1CA6
7763427F9DD86574913E538F48877848A8784C6162A3E02B1B1CF0D3295BBD34
0C58DE0A7A3F9092322565E3C1CC282833FFD6F0E8661> |-
/C <1C60D8A8C9B6079FE93EE79EE83623E2A83C8EAAC499D891EE7AF049AA70
CE0D29BC67EFCC5DE1489F46602F176E15B983EC5FCAB09F098BFB05E6C78AFA
6D261CC0E65391EC905294181386411DBB8581C06199C2F7E76016353300C21A
BDA2463C69C4A54BBBB66F79451DF1BF68232F620D39A615B5E4723A8E5B5052
386BB329> |-
/E <1C60D8A8C9B6079F1E6E28C317A04C128EFD7F73926618D86E88D89BD0C8
F31BDB47EE37954F57AF9C3DFB0651942FC35C92259D5C6525BFFA5214E6851E
401E83301FE8FC8D726FA07D6E6ACB5ADA7E563C6FEE2CF0FA222726F758BD47
CFAE40DD0C0B35A283DD48C231F1B1D6740F9B8365962F4759DE4F3D5AF78C5C
CFE6> |-
/F <1C60D8A8C9B64EDF880777C0340D43640F9854E725045637A58B787BAF3B
D63DC57F366E326EB9E3D0DA029A166F10D69E6760315AAE45432EEDF56F50C3
6BB8CB069008B29D4BC0951494F4943EF83F7135A87C2450D7BAD81F1785955C
C9457471D56CB866ED62CF21DC2C639242B73232F91A> |-
/J <1C60D8A8C9B7EF32A0D5B6AA8A16380ABD6292D1829A0E2394FD4C8D73D9
6F239155A57063319BAE6C066C8DFA5C427F7E556D73994E7E43719B7A01B782
F5403BCA59B1F5EB1082DC85E9C83122C39E51775FBF7AB4534410256112E4CD
BA7D429625387FD09EFED05905D85F03B5B09FF7009F98F123A97CB4CC4674BF> |-
/L <1C60D8A8C9B64EDF880777CE354E99ADEFF01E96B42EC472EDAD9587F4B9
A35415C0F1A956EEA12CA2A7C7104704D0682AF5CCE8FD2BDA0BB2A08059CA98
C91763E80BE3CD93E2642FAC52ADF216E4426305AC> |-
/M <1C60D8A8C9B5D6EF3EC3EE079A79DB0688F719229AD2C63192321073BEB2
BD8E2B4691BCF82DF8B4453E4717EE224FD3D7BFEC66C3D32327EFA570151C63
19AE21CA24346E8CEF3597385F06474A1C4A3891ADC4F58BFAB8A3E28B6CC6F6
BF42144E97CD549A574C025CBAC4BE46D23CA98F88B5547D60F7D96CE40BA9FD
4BED76AE11DEE5> |-
/N <1C60D8A8C9B6A283F4FB3B515690A5B84D34A421514D16D5320E43CD5144
9D92C99E8DFD1D41CDF9242914491AA21B1B53BD5DBF3A45901C91B6F791E391
50FC2861C0DADD6149886FCF570272DC624901927CDFFC9CB05BFDAB9B1CB718
8691D4BA13E00774A28408A639EABB87C8EEBFD647B87FDAA2F0D6FA707CA6F9
6E1F49CBE4411B9793F3> |-
/P <1C60D8A8C9B64EDF880777C017EBC6BC56BF2D764F26E77CBA25E71BD0B7
1F3AF3FF2F1825969255686A98F28A3375C919594692C2CAC16FA5EFF72408CC
DA7A2177D4FF34793E08FD9E40A24B0641C64A9037ECCD1644AC338C7E2DCD47
2F918F9E344764A2CF4720F5C0E1F90275D67F7B947A5A759DAE08B9B317A6BB
F06C07CD2E06ADED55098C8FD9624C028089B7E1> |-
/R <1C60D8A8C9B6079F1E6E28C317A04C128EFD7F73926618D86E2318D64B26
942A637A7D7115E18EF41908D872DCC719C62FA38C7D1F09083AA0A3ED356985
4B20C23F0C31150FAC77D1F4DFDF94873456BAFB6332AF5641B5034D5D090464
4B73302F59A243FE730861E47A8BDB5D41142BBBC1922C08E94D540763F835E1
60487C8098B7D5A08B9C28BB1BA401EBEC3518D3093D63061509806724A7700F
C8988E9E45EC0772239B2FF270699416D93481E3481D41C150D0914D38E1A6C6
8F36376F4865B2C0D5BAFA257586CC06B82993B77C9B> |-
/S <1C60D8A8C9B66B39DBD5A8045EA2921B5881BC49A185D833E43BE8AF41EC
921ABCF349AEC2253D0E4247E1AD49246DD8DB5A1BD136EA19F40F51BE885ACC
682E57A549DCBB695CB3D03919F64E27302CCBA6CF8C3CB317E923944E5B2545
DB61549C5CD92CA3FDB0FDDF4C9B996E6670449A766BFDA125D413E43B8975EC
B0108A6B67DD95EB887FBC876BE37B1480DDC65999ADD14F5A6D7BB8B907DE33
2CA85B4111367CFC691982C786C9F1491FEC1F20390DC4775FBD2595CC8DF925
C9772CD8645593653D6EBBC117588CD9C1AD8569253B09B8FB07C10D4316F167
46BAB8C24B5953> |-
/T <1C60D8A8C9B64EDF880777CE354E99AD6405CB636A205433893FEC5B675E
D6280288CBE0A0EB1B6A34DCE365F449C906A06021BAA530B5C674CA619018B1
EB5B0EA1DE51DFC4CE86F1086F82AC6E40CBD410D1A75B691210063788> |-
/V <1C60D8A8C9B6079F03666C378CB0CBE9B0A46453CD45DFD22E63096A0279
2D51035063B1B2D73166FAACE91BBB8D36FAF58ADFD28AAF37E0C595B66DE825
191344F7B04282EB3088F838443B1B8921C97C8B62F9E3426591C3D0CCEB7A36
EB6327CFA3E53401D44A9994400CD78DF04DBD> |-
/W <1C60D8A8C9B5FBBADCC7436682BA6C8BDF0BD11090238B6FFCC53A33C478
2EE773E677742D7FE32F8E2ADAA636EDE23DBCFE08A2F6A6BE39EEB23F39A97F
04BD277506AE59F465B845D3BEBF381395C0BD250125BCC01C916F578A497829
C3E0C3ED6808757941EE6AD8D95CCA43F2F581742B41338D72B14C5D603FBF5D
C1E4FB51E7C0B6A58816C1145CF9AB0C1E81406708257ECD5F3796752F7F86D0
C94A165120180B7C> |-
/b <1C60D8A8C9B7EF32A0D5B6A5D4358DA0EA6E4C63C75017C8D59D57F45A29
FAAE8D1728E386C95ACEF769792C460DFE4713AA41EE4A05C5DF29CCFEB7A527
4540B7266542EC6EE2552F758C32AF6B2D513611FD7FD954130388D442C927F7
99F927F4DAB18C16AC652C10406F8351FC7CB02FAB6D65524D6087A813FEB253
84211DE0E78508B91ABCAE3B4654> |-
/c <1C60D8A8C9B77FE245623FC01BE06AACFFB1E284500877FEB3448950247E
7D4BA890428A60A62DD745AA227720105C7A52055EE1A089FAD839026AD342F6
9390F076E82C13108F275B1A1C0CD2AE30D926016EC9CBCFF0625B2E020A6781
799E5385> |-
/f <1C60D8A8C9B81F2C46DB626C6B39508EDC32BB51ABDDC92AC585C189B321
74741CAC439C3BF5CB52EA1FC3F219FC0BE86914EF91768C09CCDE2A9EFA7E5D
C0ADD67ECB6C7AFDC6840004A3985B0DECE70936460548151A67093065293E07
733A0202AFA65127E703CAEE8AA3F16ED9A96E02D3C05527> |-
/k <1C60D8A8C9B7CA64569795489A6C84DD00DFAF4F6C7C3876E6C24D36A4CA
D8FB578D2A2FD2A20B2372137E7416FFA4E88C06D7DE98F6B13600F189797122
2569DF9A1BF5143F430108398A3BC92AFEF2D22180B5648F7B89AE19E46CC6E4
13095C2422709F776F97E35A4F1841D4CEEE4B73AE0E8B68BE2F1FE148C177DE
AFDEA10B8823B41ABFDB03073448FAA62BC01ADBF4AA166B44275C526E9CBC8F
9B3B871C8568AFE96AFFC8AA81943D6D96ECC8BB6749A4D6E9A321A9CB25176D
7DE045> |-
/v <1C60D8A8C9B78256B3EB580CE0438AF48636D44F69B05BBF18210A54606A
920D15C7D0A024CDC26812F36C950196E592097F6D4FC6DB4026B984F287B6E2
A2F39F2FC8D560F0C027C04B6753B783DD46B4DF88BA612C22ECF7FF7DA0F2B4
7ADF88A2E4EBBAE7D9C6> |-
/w <1C60D8A8C9B6FF8694C16FEA2F906376E8A29B657BAA7670EDA6A00FC8E8
8879DBDE3DA3140AFE2A38A2520F068B547349A35DEB837E58FEAC08E03DF7F7
45FF2E97849EF2198B7381C510688AF911054CD9DEC0CB9E99142D2CB6E0CD19
951ECE2C3BA69B3AE2B160BBE64E8A38C7EBCDA0BBE3CD22AA6E7592DCE763FA
56B7CD287CD7937B9525716E7F6B31A7516BB0F3F3B3DEF6FEFFD85A928AEA85
4272DC> |-
/x <1C60D8A8C9B78256AE267AA480272D96EF0F618D93EBA4CE699CB347C350
AF86825DF9AE51CF3CAE7406460C4FE489A042F6FEA8A52CCBFE03E6715B45D8
9016B12733BA5B408493011CD3800DF4CEA09B61215200D1239B27C842C7B604
44BDFEB51E9D288EA3B3FA42B0117F6519A5F013F019612C6858F7E3DB4EC16C
47FFC712B40C813716995B732BFCE35876AC7A58BCDB331DAAFDDDD1E7C4BEB1
F4CCE5946232C4DC896C9280BC81B3CF6DBD4CD5AF790D28DF482FCFDAF8D2F9
56A9792BDA2897998800839EF167680C6112026E77504702D024C3B4A399038D
2DE5AA49E72DC4> |-
/y <1C60D8A8C9B78256DE28B4B90C3C4B68D876D1D68230B7ACC30903138497
745BD36F21550328A271B815823F02C099A2A0494996944F6497CD089D8F3E66
113A32EB41BC3166AFCFE530C8919AE14A14E54A77113C3136B3EF9DC6AD5438
00FAD55E7C0FBC171900FB91118DEC634460FAAF99FCF59EA5D1750230EE7FAB
A08541D27C377920AE6AF670D7F0D78F13D0D5F74B9343092E9C5E0D19F9B42D
A0F908293754367F413D7096527DA155460E1BD63DBD91105DBD50CCE06F> |-
/fi <1C60D8A8C9B7D8BE6A6C4307816DC29BFF73138C0D0DFBB3772F7D480E8
8DE17A69DD2ADC2AD406D0F188408ED9F80F4141E4B801B235ECA8AAB76E9F82
44A34E2BC8CA7F377F3B515637A7566B3E86805D32FABCA900BE071E7BD4BFDB
EA6B51D39D51F0EE9A7B511EE19742BAF6C7064E7FC272E50F9C9A8B0BBC7070
DF7E07098A6CDBF5CCEEC1CA1A2DC96B569C72656A6326C80AE845E4915ACD2B
28BB524BAE2AA5EC662C8E49061DBB44FAD62CC3146AD869FEDE24AEEEFFC1A3
157025047E819E47D0BBB50237C819547C5F805F24133ECCFB07BE589> |-
/fl <1C60D8A8C9B7D8BE6A6C4307816DC29BFF73138C0D0DFBB3772F7D486A6
7AE2285B2842DE2A2957BE3DD7C5992489F1B6D59A40E1DA3697D7669F90F2E0
88C521FE709B07A616DE3E182DEB5D39B24184CF45BDCEED9CABC4CAED5C4987
9ACF93E9442DA4031B96814068DFC71CF11EA2D98DC6AE586667C8E414119C25
336B2CD8520236590B7FD7F75BD953B213319F7B1AAC5E3340E356E7B4405AE0
5D0958093706A1EED088B8E1A48C9A30B914BE8B337616A6DEA9F2F7A4E58C4F
7C7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKK+NewCenturySchlbk-Roman /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 59 /semicolon put
dup 63 /question put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 98 /b put
dup 99 /c put
dup 102 /f put
dup 107 /k put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 174 /fi put
dup 175 /fl put
pop
%ADOEndSubsetFont
/UUNUKK+NewCenturySchlbk-Roman*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /three /four /.notdef /six /seven 
2{/.notdef}rp /colon /semicolon 3{/.notdef}rp /question /.notdef /A /.notdef 
/C /.notdef /E /F 3{/.notdef}rp /J /.notdef /L 
/M /N /.notdef /P /.notdef /R /S /T 
/.notdef /V /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y 52{/.notdef}rp /fi /fl 
80{/.notdef}rp]
UUNUKK+NewCenturySchlbk-Roman nf
UUNUKK+NewCenturySchlbk-Roman*1 [7.9701 0 0 -7.9701 0 0 ]msf
-58.1132 97.971 mo
(Control-\257owsemanticsforthemessagepassingpatternofFigure1.)
[5.75362 3.98425 4.86887 3.09964 3.53793 3.98425 2.5098 2.6532 4.86887 3.98425 8.41563 3.68933 
3.98425 7.08467 4.43057 4.8689 3.09961 2.50983 3.5379 5.92258 2.65479 3.98425 5.75122 3.09964 
4.86887 6.20154 7.08389 3.98425 3.68933 3.68933 4.4306 4.27917 6.20154 4.5741 4.43057 3.68936 
3.68933 2.50983 4.86887 6.5076 4.5741 4.43057 3.09964 3.09964 3.98425 3.53793 7.10132 3.98425 
4.8689 5.23798 2.51141 4.27917 4.86887 3.53793 6.17923 4.43057 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-145.62 118.563 mo
(location)
[3.13725 4.9803 4.42241 5.5382 3.87453 3.13725 4.9803 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+NewCenturySchlbk-Italic Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /HAAAAA+NewCenturySchlbk-Italic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1991 Adobe Systems Incorporated.  All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle -16 def
/BaseFontName (NewCenturySchlbk-Italic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-166 -250 994 958} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 722 737 451 466 690 705] def
/OtherBlues [273 282 -205 -205] def
/StdHW [45] def
/StdVW [80] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/comma <1C60D8A8C9B854D088EA7C1B1562E7CC29425BA228AC8B8605D6B575
52E00F6BA749AB56E014BA00DB5AF2BC75512C4009F50E2808604E0D6F9AD8> |-
/hyphen <1C60D8A8C9B81F2C3AE5E5676AA4F053B3E5A5CA6A58DF989F425AE
8B864C365> |-
/period <1C60D8A8C9B854D07F2CCA421D4256278866EC2F23B0BE726E1307E
C2F312D629E7BE85896D912B961D1D5> |-
/C <1C60D8A8C9B6079FE93EE79EE83623E9F3CBC10D36E29A1003DB18C723CD
BCCE00C6A3347C54C784C36E4CECDC4A48F40932CB0DC7B8FC22ED668EBA9475
1D5220626A01BA144A28709A8364E69B0AFBC27F1BE2CEC6377B97CDC7DB4BCE
4ACE57109A259009894D683344> |-
/D <1C60D8A8C9B6FF86896095612955EB0DDFFDD4E4FC559709D8C32BF960B8
FA57ADCB9CB75ABDA366B9C276C948BD99323BE93BDF27CEF26B018873151DF6
B5ADFD4F422B3B91D6ABB6915BF584C44C876FBACFE610F22416EEC6500A8F85
85E22A8E16233750653A4D1B396983845BE240694BD81F4C13FD80B49B9EE1F3
B1> |-
/F <1C60D8A8C9B64EDF880777C0340D43640F9854E82C80CA47EDAAFD7F9612
10A5DF157926851D475E82F7CA9135D38DD2A0EF1C5CE7AD862302CD87F8AF4B
347C250E811C10F706BF67A2071F62D591E4AF39715F2D7CDC5672BF01E7EAC1
5F99F77604C705CE3B71DBE7AF4AE1EBAF08B537204E1A27272EC80D0E7590FD
7040E759F4DB5D1F90589233A29C09E83EAE5C56> |-
/S <1C60D8A8C9B64EDF7FC53CE5D0A0E75B293273EFAB0EADF3DA6A67231914
655727F98E1DC2A1E16FEE78A0973677E87DD81D11FCDD99E8A4DC82D1C5960B
9F2C2D3AC31B5B47B4DAB1AA9F80CA02D3CE6BEF8A2663764882F15156CB38F6
85593C5B64B40A50609F540D30CA8A304D140FD87D6DEE00ABD5BE876AAF3579
7629DDEBFCFECE21824F595E9E1CF19521522221C2448DCBB4B1BB3CBE26865E
087003B81FC4EE89F5AB46B5DC93AA23B1F4AB580202C331E851B05601EAA26A
BA8DE1D1B00BC633CBA68618548C3E90F4777FE4BEEA947BD2> |-
/a <1C60D8A8C9B7FD84115EE72F89F36FCFFF092BE54FC8B131BA3B6098DA98
587DBB9C1DEF9AA07C8336AD8B0EBDFE0311AEE34B780FC19AE16FD78EB1CC0A
F35213D61BAFE40960391AB3B92D959BCF51E87C09104960BA4A65657A8EB0D1
33DD7DFE6BE19A4433BB5121CED4E5C58E41C616FBF01DBCD60D1D4869F3E320
F3918CDEA3426BAD551E7754A913B53811529C22F8EAE7BEB134CA85AA944F62
568CB328D6EB496DB493900DA4AA3E19B5E5F9B65996506472D7F713434CCA03
6C5593B30D0B5C9A4D1EA280219E434388F4> |-
/c <1C60D8A8C9B77FE2451D9B3161B82AA8B84D987D9DE79C6FA35D9BBE72FC
119E205AC23F7E49471FE932A5CD8CD764B4AD48C450B0C4E36421591175872A
913E63DDCB0CD008A28AED218E807843A9D9D87F14840689E23F94C2B471C190
76386BA16D9AF0CE1A64> |-
/e <1C60D8A8C9B77FE2451D9B3161B82AA00BF8E4C405FFAC543A9AECD0EEF0
FCB834B0A4C2F6AAB7901C2F398E0205ED1928E2C562F348A61921216E2137A7
10FB0FD45BBF806987B4866CD410E4098F3948735ED2833EAE3857F6C76FDC8C
A942E2E244EF2ED172FF7F6A9317348B> |-
/i <1C60D8A8C9B81F2CB10DD09E7C5B141CA3242ABB87EA18A544F6C7035692
48F0E81E63E816A3A1B1ADF51D785AE4AC4AE1FE390071843F363B485923C9A9
4E624BD3CC6668F639655A74DAAE6091995928BEC8E288A2D58EB99134833A61
6374D2EEEDEED98405893E16ECF8611C71E2D1F5AD64E516A32B85E5143455E8
93CB003DE2D004632A4900A16B454D6A9921> |-
/l <1C60D8A8C9B81F2CB10DD09F54FDD3399BA3DF47C73D79B618E91A75D2C2
0BC64EFD872E208A442F5B4E8246AF45AFF40408071BFF51464DBFA4EE1986DE
774DA1A2B5A7CE9C603356DD9876751CEE8313B0706BDBAABE9B18CAE3FC44CF> |-
/m <1C60D8A8C9B59F856C25D66665D15FA0DDC87F7EFA2E62873EC5AB326B55
BDF823B8EED721979BD228C8859F53DE04BADC3725F813DCEAC8AAE190B07C42
90EE89E6A6F6341F17098A7AFC521E396856A2256E6A3A6BE18E085A697F9D93
2CBC2623CF7B23B97D8E53B641F0A260F7D1B92D40E07D93304AC6F2D3C75606
EA1CAD8418EC2FC9AE9C86AAA67FC4328DADB156C0192E02CE19E13BFBE6DB52
D2F552F0BC1CEC25D998B41A566788D63ADF289462296B36951C42975EB9D3E2
84F4B375838D10133E04B6D320CCD001CCB3BD569FF61615A8C50D6D59473874
B8514DD89C4E6456F7E7CC55615AF7BD6A1F5E5B80> |-
/n <1C60D8A8C9B7D8BE9D4226A7A351E871D9AF32218D4C6289E3F057DA6AA2
E9ECB556F5F6F170620D2892E97A54EE316C7971F7CDFF1AB82F53F71E2BB36E
ACA78D7541590BD56A7A59D2F6E01E9340E7704578E9FBD92D1024C512532D10
92D7941C04435DEAD3EEAB1B169D5E6A0F66BB0E78FF44E46827B4A3E1F3AEE0
3BA54013B96A7A717CB259BA05C741843DCB55CD4E12819036C908737F81585A
30BCAB6B5FB9F2627AD6919BD85B79791208B2> |-
/o <1C60D8A8C9B7A73D32E4548B10C91BF34C05577A306E55DE2CC40286F7BC
9B68D4538D50BE4C0123C2C5B32FC7A3E3A70E9996890FED9AF8CBC30ED3691A
A4C1DD5CF868EEDD130F6E2F17DEC0D63E820E62E732B31E57714B4CAD> |-
/r <1C60D8A8C9B77FE299176F631BAAD80B0BBAA01FA0F7562D0B66722F4DD0
0F5D8E9E4A8AEFC0930B9E6CCFA1E34DB53DFEB3EF6F7B2EDB2A5D25B5B6598B
21BA3FCD9F3B4A21EA9EFF2A40E20168DAEC73D32DE221C81A74D1E1322F2D7E
5FB45DC0241464D18EBB4B96CEEC215D4B810EBD3C0DBE> |-
/s <1C60D8A8C9B77FE2450B16570ACF29F237C9EEC7FED79FB3C847E3206007
A1F7927521B635FEACE54DB01E98F846B081A9ACF0ABC97F0A5D8D0251EF303F
B2FC32AE6CE8358A4F90438EA4B0C3218011D8CCA6C992542ABE4995BC254DBC
88CA2D3ED871DF4D5BC3E5C13631C33ABC813C38A9586C23872A40A0B65F8B14
6DBF044858494313F35E21BF18BAE7961F66F1F896B77A2957A5C23C4B2160E2
8E67E3EBF0E3BA8466077B7453B03A93ADFD6EB73B> |-
/t <1C60D8A8C9B80A3F090E5EC73E512A67C93955E8D5AD5F8E224088E46958
027EFE199C067BFF3923D3164AC85CC86927DCA51ED00E221DD2E518A1E13E4C
E91E41F626BCFA531A37E321A944015015CA1BBE05C5F73A0391D79895ED2818
0D> |-
/w <1C60D8A8C9B6FF867E445CDBAB25956E66D72AA666A7E7F19F7D08A1844E
1F476D3B5FF035BB0F65832DD200683B83F0625F9FE297609B0E8FB89C25B8EE
F628706B8A49AE80C8B7C9C3F5F3AC74A3C49220F6577AD3E26144C8BECBF409
8FFAE85EBF013AC7787BE622A1966AB214133ADEF3528495AC3D91ADD3E62487
1504A2BF88CDEA39E97EA2F814839112AA993E44543E8C082B240D7C3E9245D0
CF76442D5173918CE10A710E53BAB8E5C5BC10616A8CA0F58EF8A19A4B313606
1D9C141FA1CBFB> |-
/x <1C60D8A8C9B7A73D328D2FDBFD1DEAD6DB940811358A18A04979E733584F
44E745AAD3C1DABAAE7D93A5D564B3952AE105343F38D5D0F5588D6EEC354D6E
EB04C9E2A3BFF814821052FAAE5AEFF4FFCF9096D79FB2B659959E5A575E0559
025B64D2567F4E0BF688BC7DB3D0E7E5EBB43A43A012344B060BB08B2B8B9379
BCD15EAAE3789D2647B311E67D81CB8A82C1FED2D0849BB89C4FA8953B96D1DF
A9D0C48DEB405F3E2ECFCA61E49C02EC7E3ED12E7188E266C81B570E52E20327
08463BFD11D4768FEF763C185046AB92E152F53BB48B22> |-
/y <1C60D8A8C9B7A73DB58D81521E52BA3DDC381A15EA418F0FECD9B91D69AD
CD118737AE9ED356FADC9D060491D0F71D546BC8B6892487D74D8FEF3442A671
AE7D12C9A2897EF4CA0B975FCDB48141FA9D9AA9AF43F3DFC39E9D7FDC5286DB
35F30C173F217E181B03B3AF6283310F8F8A025AE541BEB640593793CC12203D
36DF889FB09FCAC6E8B70CDC97136EC0B2F9DBFEA0D03CEED7BD18437B7D> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKL+NewCenturySchlbk-Italic /HAAAAA+NewCenturySchlbk-Italic findfont ct_VMDictPut
/UUNUKL+NewCenturySchlbk-Italic*1 
[44{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp /C /D /.notdef 
/F 12{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t 2{/.notdef}rp /w /x /y 
134{/.notdef}rp]
UUNUKL+NewCenturySchlbk-Italic nf
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-105.723 118.563 mo
(x)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-96.9567 118.563 mo
(into)sh
-75.4225 118.563 mo
(register)sh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-36.3771 118.563 mo
(r)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-32.292 120.057 mo
(2)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-27.918 118.563 mo
(.Memorylocations,forexample)
[6.22762 9.40471 4.97929 8.85484 4.97931 4.42139 8.81992 3.13626 4.97931 4.42142 5.5372 3.87354 
3.13626 4.97931 6.08508 4.36459 6.23657 3.32147 4.97931 7.8844 4.97931 5.34793 5.5372 8.85486 
5.71655 3.13626 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
125.002 118.563 mo
(x)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
133.768 118.563 mo
(and)
[5.53522 6.0831 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
155.215 118.563 mo
(y)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
160.148 118.563 mo
(,aresharedbythe)
[6.23657 5.53622 4.42041 8.45126 4.60968 6.08408 5.53622 4.42041 4.9783 9.18958 5.53619 8.81097 
3.87253 6.08408 0 ]xsh
-145.619 129.516 mo
(twothreads,whereastheregistersareprivatetothethreadholdingthem,here)
[3.87354 7.74892 7.74891 3.87951 6.08508 4.4214 4.97931 5.53722 5.71658 4.36459 5.55315 7.74892 
6.08508 4.97931 4.4214 4.97929 5.53722 7.40718 3.87352 6.08508 7.7489 4.4214 4.97931 5.34793 
3.13626 4.61066 3.87354 4.97931 4.42139 7.38925 5.5372 4.42142 7.76682 5.71661 4.42139 3.13626 
5.34793 5.5372 3.87354 7.75787 3.87952 7.74893 3.87952 6.08505 7.74893 3.8735 6.08508 4.42142 
4.97931 5.5372 8.49615 6.08508 4.97931 3.13626 5.71658 3.13623 6.08508 8.13647 3.87952 6.08508 
4.97934 8.85483 5.53522 6.08511 4.97931 4.42142 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
222.411 129.516 mo
(T)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
228.492 131.01 mo
(1)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
232.875 129.516 mo
(.)sh
-135.656 140.478 mo
(ThesnippetinFigure1isattheheartofamessagepassing\()
[6.64313 6.08508 7.86647 4.61067 6.08508 3.13625 5.7166 5.71658 4.97931 6.76767 3.14124 8.97324 
6.54352 3.13625 5.34795 6.08508 4.42139 7.87346 8.42436 3.13626 7.49683 5.5372 6.75871 3.87354 
6.08507 7.86649 6.08408 4.97931 5.5372 4.42142 6.77661 4.97931 6.20068 8.42435 8.85587 4.97928 
4.61069 4.61066 5.5372 5.34793 7.87546 5.71658 5.5372 4.61066 4.61069 3.13623 6.08508 8.23511 
0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
147.143 140.478 mo
(mp)
[8.29776 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
160.976 140.478 mo
(\)pattern,where)
[6.20065 5.71658 5.5372 3.87354 3.87354 4.97931 4.42142 6.08508 5.66074 7.74893 6.08508 4.97928 
4.42142 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
238.439 140.478 mo
(T)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
244.521 141.972 mo
(0)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-145.62 151.44 mo
(would)sh
-115.644 151.44 mo
(writesomedataintomemorylocation)
[7.74892 4.42339 3.13824 3.87553 7.28067 4.61266 4.98131 8.85681 7.28067 5.71858 5.5392 3.87553 
7.84853 3.13824 6.08707 3.87553 7.27171 8.85681 4.98132 8.85681 4.98129 4.4234 7.66824 3.13824 
4.98129 4.4234 5.53918 3.87555 3.13824 4.98129 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
58.3841 151.44 mo
(x)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
63.6852 151.44 mo
(,thenseta\257agin)
[5.0849 3.87952 6.08508 4.97931 8.38843 4.61664 4.97931 6.17392 7.83856 6.08408 5.5372 7.65033 
3.13623 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
147.143 151.44 mo
(y)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
152.075 151.44 mo
(.)sh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
157.151 151.44 mo
(T)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
163.233 152.934 mo
(1)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
169.911 151.44 mo
(wouldthencheck)
[7.74792 4.9783 6.08408 3.13525 8.01895 3.87952 6.08408 4.97833 8.3974 4.34668 6.08408 4.9783 
4.34668 0 ]xsh
-145.619 162.393 mo
(ifithasthe\257ag,thenreadthedatain)
[3.13725 6.08409 3.13724 6.64215 6.08607 5.53821 7.38924 3.8795 6.08607 7.74892 6.08607 5.53821 
5.0939 5.55315 3.87453 6.08607 4.9803 8.86465 4.42239 4.9803 5.53821 8.49615 3.87453 6.08609 
7.7489 5.71558 5.53821 3.87454 8.31577 3.14124 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
33.0328 162.393 mo
(x)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
38.3339 162.393 mo
(.)sh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-135.656 178.332 mo
(Control-FlowSemantics)
[7.192 4.98032 6.08607 3.50589 4.42239 4.9803 3.31648 3.31648 6.64413 3.31647 4.9803 10.7915 
6.64214 4.42241 8.85583 5.71758 6.08607 3.50589 3.31647 4.42241 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-24.7393 178.332 mo
(.Theinstructionsemantics,inourcase,translatesinstruc-)
[5.82314 6.64413 6.08607 8.00993 3.13724 6.08609 4.61166 3.87451 4.42242 6.08606 4.42239 3.87454 
3.13724 4.98032 9.12567 4.61163 4.98032 8.85583 5.53818 6.08609 3.87454 3.13724 4.42239 4.36459 
5.80521 3.13724 9.1167 4.98032 6.08606 7.461 4.42239 5.53824 4.61163 4.797 5.80524 3.87454 
4.42239 5.53821 6.08612 4.61163 3.13727 5.53821 3.87454 4.98032 7.65027 3.13724 6.08609 4.61166 
3.87454 4.42242 6.08606 4.42242 0 ]xsh
-145.62 189.294 mo
(tionsintoevents,whichrepresent,forexample,memoryorregisteraccesses\(i.e.,reads)
[3.87354 3.13625 4.97931 6.08508 6.90306 3.14124 6.08507 3.87354 7.27171 4.97931 5.34795 4.97931 
6.08508 3.87354 4.36459 5.07594 7.74892 6.08507 3.13625 4.34668 8.38844 4.4214 4.97931 5.71658 
4.4214 4.97929 4.61067 4.97931 6.08507 3.87354 5.08493 3.31546 4.97928 6.71381 4.97931 5.34796 
5.5372 8.85483 5.71661 3.13623 4.797 5.0849 8.85486 4.97931 8.8548 4.97931 4.42142 7.65927 
4.97931 6.72278 4.42139 4.97931 5.34796 3.13623 4.61066 3.87354 4.97931 6.71381 5.53723 4.42139 
4.42139 4.97931 4.61072 4.61066 4.97931 6.92102 3.32147 3.13623 2.76764 4.797 2.77161 5.05798 
4.42139 4.97931 5.53723 5.71661 0 ]xsh
-145.62 200.256 mo
(andwritesfromandtomemoryorregisters\),branchingdecisions)
[5.5372 6.08508 8.49616 7.74891 4.4214 3.13625 3.87354 4.97931 7.38924 3.32047 4.4214 4.97931 
11.6284 5.53722 6.08508 8.49615 3.8795 7.7489 8.85583 4.97931 8.85483 4.97931 4.4214 8.13649 
4.97931 7.19098 4.42142 4.97931 5.34793 3.13626 4.61069 3.8735 4.97931 4.42142 4.61066 3.31549 
5.54416 5.5372 4.42139 5.53723 6.08508 4.34668 6.08411 3.13623 6.08508 8.14545 5.71655 4.97931 
4.42145 3.13623 4.61066 3.13623 4.97931 6.08508 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
154.848 200.256 mo
(,)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
160.392 200.256 mo
(orfences.)
[4.9783 7.19998 3.31448 4.9783 6.08411 4.42041 4.9783 4.36459 0 ]xsh
-135.657 211.209 mo
(ConsiderFigure2:wegiveapossiblecontrol-\257owsemanticstotheprogramin)
[7.19101 4.97931 6.08508 4.61066 3.13625 5.7166 4.97931 9.28813 6.5435 3.14124 5.34795 6.0851 
4.42139 9.84506 5.5372 7.63235 7.7489 9.84604 5.34793 3.13626 5.34795 9.83707 10.395 5.71661 
4.97928 4.61069 4.61066 3.13623 5.53723 3.13623 9.8371 4.42139 4.97931 6.08508 3.87354 4.42139 
4.97931 3.13623 3.31549 6.08508 4.97931 12.6266 4.61066 4.97931 8.85483 5.53723 6.08505 3.87354 
3.13626 4.42139 9.47742 3.87952 9.83707 3.87952 6.08508 9.83707 5.71661 4.42142 4.97931 5.34796 
4.42145 5.5372 13.7345 3.13629 0 ]xsh
-145.62 222.171 mo
(Figure1.Todoso,weproceedasfollows:eachstoreinstruction\(e.g.,)
[6.5435 3.14124 5.34895 6.08607 4.42239 8.85576 5.53821 6.64206 6.09322 8.84677 5.71759 8.85576 
4.61165 4.797 6.6331 7.7489 8.84679 5.71559 4.42241 4.98029 4.42241 4.9803 4.9803 9.61197 
5.53819 8.48712 3.31647 4.98035 3.13724 3.13724 4.98035 7.74988 4.61169 6.63312 4.98029 5.53821 
4.34668 9.96252 4.61169 3.87451 4.98035 4.42239 8.84677 3.13727 6.08612 4.61163 3.87457 4.42236 
6.08612 4.42242 3.87451 3.13727 4.98029 9.96252 3.31647 4.797 2.76862 5.09393 2.76862 0 
]xsh
%ADOBeginSubsetFont: IAAAAA+CMTT10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IAAAAA+CMTT10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMTT10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 114 /r put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-4 -235 731 800} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 611 622 431 440] def
/OtherBlues [-229 -222] def
/BlueScale 0.0479599 def
/StdHW [61] def
/StdVW [69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/one <1C60D8A8C9B78E05996B35731BD1E8649ABE00B4A62CA06EFFF6A69179
B83E2350F8D68EAD6865F6D8537E41F0E30FE946EE08B7943FE12AABC935EC50
D487D4B94DA6881ACD175F5D02F7926A03A6A7857F69CA1B3AEACC576ECE133B
94CCC57736> |-
/r <1C60D8A8C9B78E05996B35735C4B10F0A68C733837FFC46D15E711585D69
409D476B4E1B79D899A1EBE7F07D42FC0D7F3AF51B20EA4BE96332191606B9F9
30E6A59EE195CD4F0E430523A60FA98B36B2D8D170EE2CB19C9F94E68C957715
7726B0DF61D35FB969298349003E15248E2E23535954CBD18C62CEB28D8079F7> |-
/x <1C60D8A8C9B78E05996B3573566568995105A112EC758F266EB06CA3D030
D24193382A89A5EF5D11E36C2DB4A4D3E11F57036BAB7F8643E2D88760A64A76
20AA8F58DD7AAD84A999CEBD138256AF5276829F5EF2F7EBAE1D157FAE0734E6
C7087C366BC363834BDFEC21C84A88208EC7054A8B9EAC0C20BC1441822D6372
A252B0319D772C186FDD8B3CADAB9A0E90A21E7C08A8467C30BB500007> |-
/y <1C60D8A8C9B78E05E95DE290973D6E363A47F2CED9B1B42B6B0D762D57F5
2FBD58655FD8922D99AA453DD21045F754FFEA2D25D7125E3D7E2AAE2CFF8D51
302B9D7F6E12FC2D0713B7975A8C09CE6D90ECF6E2C336D53FAC96C12F0BB1FC
5944E208C4CD65ED837F7D0DBB7DB32B90CC8E56739588036489AC8F0D82C118
47A9A533C31B5732EE64C2CEC44DC4C3A52323257691B77E20476EC17EC2BE0E
0276> |-
/.notdef <1C60D8A8C9B78E051C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKM+CMTT10 /IAAAAA+CMTT10 findfont ct_VMDictPut
/UUNUKM+CMTT10*1 
[49{/.notdef}rp /one 64{/.notdef}rp /r 5{/.notdef}rp /x /y 134{/.notdef}rp]
UUNUKM+CMTT10 nf
UUNUKM+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
186.329 222.171 mo
(x)sh
%ADOBeginSubsetFont: JAAAAA+MTSY Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JAAAAA+MTSY def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation and Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (MTSY) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /equal put
dup 195 /arrowleft put
def
/FontBBox {0 -954 1043 796} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 465 484 501 506 657 676] def
/OtherBlues [-209 -186] def
/BlueScale 0.0479599 def
/StdHW [50] def
/StdVW [50] def
/StemSnapH [20 50] def
/StemSnapV [30 50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/equal <1C60D8A8C9B6C180329C486F337E2637810D8548FE31FA7E089C659A
5FA4521910F4A25ADF4E42AFDF85360EA65D> |-
/arrowleft <1C60D8A8C9B54D64091E48E4827721D215DDA0C1E8BAA03B38CD
86FE83939F6CA3AD022FD77D7D22ADD4F2B6CC8EDFAD95E0788BB960EFBD3E68
2D4D6FFE571F0C9C27C7> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKN+MTSY /JAAAAA+MTSY findfont ct_VMDictPut
/UUNUKN+MTSY*1 
[68{/.notdef}rp /equal 126{/.notdef}rp /arrowleft 60{/.notdef}rp]
UUNUKN+MTSY nf
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
195.852 222.171 mo
(\303)sh
UUNUKM+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
211.088 222.171 mo
(1)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
220.187 222.171 mo
(on)
[4.97733 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
235.118 222.171 mo
(T)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
241.2 223.665 mo
(0)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
245.583 222.171 mo
(\))sh
-145.618 233.133 mo
(correspondstoawriteeventspecifyingamemorylocationandavalue\(e.g.,Wx)
[4.42239 4.9803 4.42241 4.4224 4.98031 4.61166 5.71758 4.9803 6.08609 5.71759 8.21712 3.87952 
8.54094 9.11676 7.74991 4.42239 3.13725 3.87453 8.54991 4.9803 5.34894 4.98032 6.08606 7.46107 
4.61664 5.71758 4.98029 4.42242 3.13727 3.31647 5.34894 3.13727 6.08609 8.9285 9.10779 8.85587 
4.98032 8.85583 4.98029 4.42242 8.93747 3.13727 4.98032 4.42239 5.53824 3.87451 3.13727 4.98032 
9.66562 5.53522 6.08609 9.29715 9.10779 5.34897 5.53821 3.13727 6.08606 8.5589 3.31647 4.797 
2.76859 5.09393 2.76862 6.34515 9.77234 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
229.504 233.133 mo
(D)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
237.271 233.133 mo
(1\).)
[5.53821 3.31647 0 ]xsh
-145.618 244.086 mo
(Eac)sh
-128.54 244.086 mo
(hloadinstruction\(e.g.,)
[8.22604 3.13824 4.98129 5.53922 7.83862 3.13823 6.08708 4.61266 3.87553 4.42339 6.08708 4.4234 
3.87552 3.13824 4.98129 8.21709 3.31746 4.797 2.76959 5.09392 2.76961 0 ]xsh
UUNUKM+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
-22.3173 244.086 mo
(r1)
[5.22931 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
-9.08699 244.086 mo
(\303)sh
UUNUKM+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
4.62952 244.086 mo
(y)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
11.9829 244.086 mo
(on)
[4.97733 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
25.1774 244.086 mo
(T)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
31.257 245.58 mo
(1)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
35.631 244.086 mo
(\)correspondstoareadeventspecifyingamem-)
[5.44449 4.42139 4.97931 4.42142 4.42142 4.97931 4.61066 5.71658 4.97931 6.08508 5.71658 6.76758 
3.87354 7.10135 7.65924 4.42142 4.97928 5.5372 7.85657 4.97931 5.34796 4.97928 6.08508 6.01251 
4.61664 5.71658 4.97931 4.42139 3.13626 3.31546 5.34796 3.13626 6.08508 7.47894 7.65921 8.85486 
4.97931 8.85483 0 ]xsh
-145.62 255.048 mo
(orylocationandaundeterminedvalue\(e.g.,Ry)
[4.9803 4.42239 8.09065 3.13725 4.98032 4.42239 5.53821 3.87453 3.13725 4.9803 8.82878 5.53522 
6.08607 8.46028 8.27097 6.08606 6.08609 5.71758 4.9803 3.87454 4.98029 4.42241 8.85582 3.13725 
6.08607 4.9803 8.47823 5.34897 5.53818 3.13727 6.08609 7.72198 3.31653 4.797 2.76859 5.0939 
2.76862 5.49936 7.19202 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
71.4077 255.048 mo
(D)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
79.1745 255.048 mo
(?\).Notethatthememorylocationsof)
[4.42142 3.31546 5.5173 8.11853 4.97931 3.87354 7.71304 3.87952 6.08508 5.5372 6.61526 3.87949 
6.08508 7.71307 8.85483 4.97928 8.85486 4.97931 4.42139 8.09961 3.13626 4.97931 4.42142 5.53717 
3.87354 3.13626 4.97931 6.08505 7.35339 4.97931 0 ]xsh
-145.621 266.01 mo
(theeventsaredeterminedbytheprogramtext,aswellasthevaluesofthewrites.For)
[3.87354 6.08508 7.60545 4.97931 5.34795 4.97931 6.08508 3.87354 7.24478 5.5372 4.42142 7.61441 
5.71658 4.97931 3.87354 4.97931 4.42142 8.85483 3.13623 6.08508 4.97931 8.36963 5.5372 7.97409 
3.87354 6.08508 7.60544 5.71661 4.42139 4.97931 5.34793 4.42142 5.5372 11.5109 3.87354 4.97931 
5.34793 3.87354 5.39075 5.53522 7.24478 7.7489 4.97931 3.13626 5.76041 5.53519 7.24478 3.87952 
6.08508 7.60544 5.34796 5.5372 3.13623 6.08508 4.97931 7.25375 4.97733 5.93961 3.87952 6.08511 
7.60547 7.7489 4.42142 3.13629 3.87354 4.97934 4.36459 5.39972 6.0932 4.97931 0 ]xsh
-145.621 276.963 mo
(reads,thevalueswillbedeterminedinthenextstage.)
[4.42241 4.9803 5.53821 5.71759 4.36459 5.55315 3.87453 6.08607 7.74892 5.34894 5.53821 3.13725 
6.08607 4.9803 7.39821 7.7489 3.13724 3.13725 5.90385 5.53821 7.75787 5.71759 4.9803 3.87453 
4.98032 4.42239 8.85583 3.13724 6.08606 4.98032 8.50513 3.13724 8.85568 3.87454 6.08609 7.7489 
6.08411 4.98032 5.34894 6.65112 4.61166 3.87454 5.53821 5.34897 4.797 0 ]xsh
-135.658 287.924 mo
(Additionally)sh
-79.8881 287.924 mo
(,wealsohaveimplicitwriteeventsWx)
[6.08415 7.74892 8.28889 5.53522 3.13824 4.61264 8.28889 6.08408 5.43559 5.34596 8.30681 3.14124 
8.85684 5.71857 3.13824 3.13824 4.4234 3.13824 7.18213 7.75089 4.4234 3.13824 3.87552 8.28891 
4.98129 5.34995 4.98129 6.08707 3.87555 7.93814 9.77335 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
103.519 287.924 mo
(D)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
111.286 287.924 mo
(0andWy)
[8.85574 5.53522 6.08411 9.02716 9.2254 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
155.359 287.924 mo
(D)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
163.126 287.924 mo
(0representingthe)
[8.86472 4.42142 4.97931 5.71658 4.42139 4.97931 4.61069 4.97931 6.08505 3.87357 3.13623 6.08508 
8.67645 3.87354 6.08508 0 ]xsh
-145.621 298.886 mo
(initialstateof)
[3.13924 6.08807 3.13924 3.87653 3.13924 5.5402 5.90387 4.61365 3.87653 5.54019 3.87653 7.73994 
4.9823 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-77.8052 298.886 mo
(x)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-69.7235 298.886 mo
(and)
[5.53522 6.08308 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-48.9694 298.886 mo
(y)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-41.2654 298.886 mo
(thatwedonotdepicthere.)
[3.87254 6.08408 5.53622 6.65109 7.74792 7.7489 5.71561 7.75787 6.08408 4.97833 6.65109 5.71561 
4.9783 5.71558 3.13525 4.42041 6.66006 6.08408 4.9783 4.42041 4.797 0 ]xsh
-135.658 309.839 mo
(Theinstructionsemanticsalsode\256nesrelationsovertheseevents,representing,for)
[6.64413 6.08607 7.77582 3.13725 6.08607 4.61166 3.87453 4.42241 6.08606 4.42241 3.87453 3.13724 
4.98032 8.8736 4.61166 4.98032 8.85583 5.53819 6.08607 3.87454 3.13724 4.42239 7.40717 5.53522 
3.13727 4.61166 7.76685 5.71756 4.98032 6.08606 6.08609 4.98032 7.42511 4.42242 4.98029 3.13727 
5.53821 3.87454 3.13727 4.98032 6.08606 7.4072 4.98029 5.34897 4.98032 7.22687 3.87454 6.08609 
4.98032 4.61166 7.76685 4.98032 5.34897 4.98029 6.08609 3.87454 4.36459 5.57108 4.42242 4.98032 
5.71759 4.42239 4.98032 4.61166 4.98032 6.08609 3.87454 3.13724 6.08609 5.0939 5.58905 3.32144 
4.98032 0 ]xsh
-145.621 320.801 mo
(example,theprogramorderwithinathread,oraddress,data,orcontroldependencies)
[4.97832 5.34695 5.53621 8.85385 5.71559 3.13525 4.79698 5.44456 3.87254 6.08408 7.63235 5.71559 
4.42041 4.97832 5.34694 4.42039 5.53622 11.5378 4.97832 4.42039 5.71561 4.9783 7.10135 7.74789 
3.13525 3.87253 6.08408 3.13525 8.73914 8.19025 3.87952 6.08408 4.42041 4.97833 5.53622 5.71558 
5.44458 4.97729 7.0834 5.53522 5.71561 5.71561 4.42041 4.9783 4.60968 4.36459 5.43558 5.71561 
5.53619 3.87256 5.53622 5.43558 4.97833 7.0834 4.42041 4.9783 6.08411 3.87253 4.42041 4.9783 
5.81421 5.71558 4.9783 5.71558 4.9783 6.08408 5.71558 4.9783 6.08408 4.42038 3.13525 4.9783 
0 ]xsh
-145.621 331.763 mo
(fromonememoryaccesstotheother,viacomputationsoverregistervalues.)
[3.31548 4.42142 4.97931 11.6284 4.97931 6.08508 7.75787 8.85582 4.97931 8.85484 4.97931 4.4214 
8.13647 5.53722 4.4214 4.4214 4.97931 4.61066 7.39821 3.87952 7.7489 3.87949 6.08508 7.7489 
4.97931 3.87354 6.08508 4.97931 3.42017 5.55316 5.34793 3.13626 8.30679 4.42142 4.97931 8.85483 
5.71658 6.08508 3.87354 5.5372 3.87354 3.13623 4.97931 6.08508 7.40717 4.97931 5.34793 4.97931 
7.19998 4.42139 4.97931 5.34796 3.13623 4.61066 3.87354 4.97931 7.19998 5.34793 5.53723 3.13626 
6.08511 4.97931 4.36462 0 ]xsh
-135.658 342.716 mo
(Thus,inFigure3,wealsogivetheprogramorderrelation,written)
[6.64314 6.08508 6.08508 4.36459 6.31827 3.14124 9.6208 6.5435 3.13626 5.34796 6.08507 4.4214 
8.53098 5.53522 6.30933 7.7489 8.52301 5.53522 3.13625 4.61067 8.52301 5.34595 3.13626 5.34793 
8.52301 3.87952 6.08508 8.51404 5.71658 4.42139 4.97931 5.34796 4.42139 5.53723 12.4204 4.97931 
4.42139 5.71658 4.97931 7.98303 4.42142 4.97931 3.13623 5.53723 3.87354 3.13623 4.97931 6.08508 
6.31827 7.7489 4.42142 3.13623 3.87354 3.87354 4.97931 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
182.476 342.716 mo
(po)
[5.53522 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
193.555 342.716 mo
(,whichlifts)
[6.30933 7.7489 6.09006 3.14124 4.34668 9.62976 3.14124 3.14124 3.32047 3.87851 0 ]xsh
-145.621 353.678 mo
(theorderinwhichinstructionshavebeenwrittentothelevelofevents.Forexam-)
[3.87354 6.08508 8.96436 4.97931 4.4214 5.71658 4.97931 8.43333 3.13626 10.0711 7.74892 6.08508 
3.13625 4.34668 10.0891 3.14124 6.08507 4.61067 3.87352 4.42142 6.08508 4.42139 3.87354 3.13626 
4.97928 6.08508 8.60367 6.08408 5.43561 5.34595 8.98227 5.53723 4.97931 4.97928 10.0891 7.7489 
4.42142 3.13623 3.87354 3.87354 4.97931 10.0801 3.87952 8.96436 3.87952 6.08505 8.96436 3.13623 
4.97931 5.34796 4.97931 7.13721 4.97931 7.31647 4.97931 5.34796 4.97931 6.08511 3.87354 4.36462 
6.76758 6.09317 4.97934 8.41541 4.97931 5.34796 5.53723 8.85486 0 ]xsh
-145.621 364.639 mo
(ple,thetwostoreson)
[5.71759 3.13725 4.79698 6.31829 3.87453 6.08607 8.52301 3.8795 7.74991 8.51404 4.61165 3.87454 
4.98029 4.42241 4.9803 8.16333 4.9803 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
-41.3819 364.639 mo
(T)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-35.298 366.135 mo
(0)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-27.378 364.641 mo
(inFigure1havebeenwritteninprogramorder,thustheir)
[3.13625 9.62978 6.54352 3.14122 5.34796 6.08508 4.42139 8.53198 9.0809 6.08408 5.43561 5.34595 
8.53198 5.5372 4.97931 4.97928 9.64771 7.74893 4.42139 3.13626 3.87354 3.87354 4.97931 9.62976 
3.14124 9.62079 5.71661 4.42139 4.97931 5.34796 4.42139 5.53723 12.4294 4.97931 4.42142 5.71658 
4.97931 3.42017 6.32721 3.87952 6.08508 6.08508 8.16333 3.87354 6.08508 4.97931 3.13623 0 
]xsh
-145.619 375.594 mo
(correspondingeventsWx)
[4.4214 4.97931 4.4214 4.42142 4.97931 4.61066 5.7166 4.97931 6.08508 5.71658 3.13626 6.08508 
8.1544 4.97931 5.34795 4.97931 6.08508 3.87354 7.38922 9.77135 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
-30.1486 375.594 mo
(D)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-22.3818 375.594 mo
(1andWy)
[8.31578 5.53522 6.08408 8.49615 9.2254 0 ]xsh
UUNUKN+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
20.6208 375.594 mo
(D)sh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
28.3876 375.594 mo
(1arerelatedby)
[8.31577 5.53622 4.42041 7.75787 4.42041 4.9783 3.13525 5.53622 3.87253 4.97833 8.50513 5.53619 
0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
103.502 375.594 mo
(po)
[5.53622 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
117.353 375.594 mo
(inFigure2.)
[3.13626 8.85568 6.54349 3.14124 5.34796 6.08508 4.42139 7.75488 5.53723 0 ]xsh
-135.658 386.556 mo
(Wearenowatastagewherewehave,givenaprogramsuchastheoneinFigure1,)
[9.18057 7.8575 5.53622 4.42039 7.86647 6.08409 4.97832 10.6381 5.53522 6.7587 8.42438 4.60966 
3.87254 5.53619 5.34695 7.85751 7.74789 6.08408 4.97832 4.42039 7.87543 7.74792 7.86646 6.08411 
5.43558 5.34695 4.797 5.66074 5.34595 3.13525 5.34698 4.9783 8.98221 8.41541 5.71561 4.42041 
4.9783 5.34695 4.42044 5.53619 11.7629 4.60968 6.08408 4.34668 8.97324 5.53622 7.49683 3.87256 
6.08408 7.85751 4.97729 6.08408 7.87546 3.13522 8.96426 6.54352 3.14124 5.34695 6.08405 4.42041 
7.86148 5.53622 0 ]xsh
-145.62 397.518 mo
(severaleventgraphs,suchastheoneinFigure2.Eachgraphgivesasetofeventsrep-)
[4.60968 4.9783 5.34695 4.97832 4.42041 5.53621 5.64285 4.9783 5.34695 4.9783 6.08409 6.37215 
5.34695 4.42041 5.53622 5.71558 6.08409 4.36458 5.2742 4.61664 6.08408 4.34669 8.57672 5.53523 
7.11026 3.87952 6.08408 7.461 4.9783 6.08411 7.47891 3.14124 8.56775 6.54352 3.13525 5.34695 
6.08411 4.42041 7.47693 5.53522 5.25626 7.19101 5.53622 4.34668 8.58566 5.34695 4.42041 5.53622 
5.71561 8.59467 5.34595 3.13525 5.34695 4.97833 7.11026 8.01889 4.61664 4.9783 6.36316 4.9783 
5.80511 4.9783 5.34695 4.9783 6.08405 3.87253 7.11026 4.42041 4.9783 5.71558 0 ]xsh
-145.62 408.471 mo
(resentingaccessestomemoryandregisters;theprogramorderbetweentheseevents,)
[4.4214 4.97931 4.61067 4.97931 6.08508 3.87354 3.13625 6.08508 8.27098 5.5372 4.42142 4.4214 
4.97931 4.61067 4.61066 4.97931 7.54166 3.87952 7.89337 8.85583 4.97929 8.85484 4.97929 4.4214 
8.27994 5.5372 6.08508 8.63962 4.42139 4.97931 5.34796 3.13623 4.61069 3.8735 4.97931 4.42142 
4.61066 5.69662 3.87952 6.08508 7.89334 5.71658 4.42142 4.97931 5.34793 4.42142 5.5372 11.7988 
4.97931 4.42139 5.71661 4.97928 7.35339 5.53723 4.97931 3.8735 7.74893 4.97931 4.97934 9.01807 
3.87354 6.08511 4.97931 4.61069 7.90234 4.97934 5.34796 4.97931 6.08511 3.87354 4.36462 0 
]xsh
-145.62 419.432 mo
(includingbranchingdecisions;andthedependencies.)
[3.13626 6.08507 4.34669 3.14124 6.08508 5.71658 3.13626 6.08507 8.12752 5.53722 4.4214 5.53722 
6.08507 4.34669 6.08409 3.13625 6.08508 8.14543 5.7166 4.97929 4.42142 3.13623 4.61067 3.13625 
4.97931 6.08508 4.61066 5.54419 5.5372 6.08508 8.49615 3.87952 6.08508 7.75787 5.71658 4.97931 
5.71658 4.97931 6.08508 5.71658 4.97931 6.08505 4.42142 3.13626 4.97928 4.36459 0 ]xsh
UUNUKL+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-135.658 435.372 mo
(Data-FlowSemantics.)
[7.74992 5.71758 3.50589 5.71759 3.31647 6.64413 3.31648 4.9803 9.79224 6.64214 4.42241 8.85582 
5.71759 6.08607 3.50589 3.31648 4.42239 3.92426 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-33.2012 435.372 mo
(Thepurposeofintroducingdata\257owistode\256newhichcommu-)
[6.64314 6.08507 7.02863 5.71658 6.08508 4.4214 5.7166 4.97931 4.61066 7.0376 4.97931 5.36377 
3.13626 6.08508 3.87354 4.42139 4.97931 5.71658 6.08508 4.42142 3.13623 6.08508 7.40723 5.71658 
5.5372 3.87354 5.5372 6.08508 4.97931 9.80121 3.13623 6.651 3.87354 7.01965 5.71658 4.97931 
6.08505 6.08508 7.02863 7.7489 6.08508 3.13623 4.34671 8.13638 4.42139 4.97931 8.85483 8.85483 
6.08508 0 ]xsh
-145.621 446.333 mo
(nications,orinterferences,mighthappenbetweenthedifferentthreadsofourprogram.)
[6.08508 3.13625 4.4214 5.53722 3.87354 3.13625 4.97931 6.08508 4.36458 4.80597 4.97731 6.46175 
3.14124 6.08508 3.87354 4.97931 4.4214 3.31548 4.97931 4.42139 4.97931 6.08508 4.4214 4.97929 
4.36459 4.83286 8.85583 3.13625 5.34795 6.08508 5.91287 6.08508 5.5372 5.71658 5.71658 4.97931 
8.13638 5.5372 4.97931 3.87354 7.7489 4.97931 4.97931 8.13638 3.8735 6.08508 7.01965 5.7146 
3.13623 3.31549 3.31549 4.97931 4.42139 4.97931 6.08508 5.91284 3.87952 6.08508 4.42145 4.97931 
5.53717 5.71661 6.66895 4.97931 5.3548 4.97931 6.08508 6.46179 5.71661 4.42139 4.97937 5.34796 
4.42139 5.53723 8.85486 0 ]xsh
-145.621 457.286 mo
(Todoso,weneedtode\256networelationsovermemoryevents:theread-fromrelation)
[6.0932 8.22612 5.71659 8.23508 4.61067 4.79698 6.02139 7.74892 8.2261 6.08409 4.97931 4.97931 
8.97337 3.87354 8.2261 5.71658 4.97931 6.08508 6.08508 8.24405 3.87354 7.7489 8.22612 4.4214 
4.97931 3.13623 5.53723 3.87354 3.13623 4.97931 6.08508 7.8754 4.97931 5.34793 4.97931 7.67719 
8.85483 4.97931 8.85483 4.97931 4.42139 8.6127 4.97928 5.34796 4.97931 6.08508 3.87354 4.61066 
6.02142 3.87354 6.08508 8.22607 4.42145 4.97931 5.53723 5.71655 3.31549 3.31555 4.42139 4.97931 
12.1236 4.42139 4.97937 3.13623 5.53723 3.87354 3.13629 4.97931 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
-145.621 468.248 mo
(rf)
[3.32045 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-139.537 468.248 mo
(,andthecoherenceorder)
[5.54419 5.53522 6.08409 8.49615 3.87254 6.08408 7.74892 4.42041 4.97832 6.08408 4.97832 4.42039 
4.97832 6.08409 4.42041 7.78476 4.97832 4.42039 5.71561 4.9783 0 ]xsh
UUNUKJ+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
-20.727 468.248 mo
(co)
[4.97832 0 ]xsh
UUNUKK+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-10.2055 468.248 mo
(.)sh
UUNUKK+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-121.302 496.149 mo
(ACMTransactionsonProgrammingLanguagesandSystems,Vol.36,No.2,Article7,Publicationdate:June2014.)
[5.03439 5.03438 8.53246 4.65088 3.09567 3.87672 4.26024 3.22816 3.87672 3.09567 2.71216 2.19608 
3.48621 4.26024 5.17523 3.48621 6.21011 4.65088 3.09567 3.48621 3.74425 3.09567 3.87674 6.19905 
6.19907 2.19606 4.26025 5.68854 4.65089 3.87675 4.26022 3.74426 4.26025 3.87674 3.74426 3.48621 
5.17523 3.87674 4.26025 5.94031 4.39212 3.74426 3.22815 2.71219 3.48621 6.19907 3.06009 3.87881 
4.50928 3.4834 2.19611 3.88788 3.87674 3.87674 3.87881 5.68295 3.35721 3.87045 3.87955 3.87955 
5.03156 3.0957 2.71216 2.19608 3.05106 2.19604 5.4361 3.87674 3.87045 4.65088 4.26025 3.87674 
2.19608 2.19608 3.09567 3.87674 2.71216 2.19608 3.48621 6.21011 4.00232 3.87674 2.71216 3.48621 
3.88788 3.70868 4.26025 4.26022 5.427 3.87674 3.87674 3.87674 3.87674 0 ]xsh
1 setflat
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/UUNUKL+NewCenturySchlbk-Italic*1 uf
/UUNUKL+NewCenturySchlbk-Italic uf
/HAAAAA+NewCenturySchlbk-Italic uf
/UUNUKM+CMTT10*1 uf
/UUNUKM+CMTT10 uf
/IAAAAA+CMTT10 uf
/UUNUKJ+Helvetica*1 uf
/UUNUKJ+Helvetica uf
/FAAAAA+Helvetica uf
/UUNUKK+NewCenturySchlbk-Roman*1 uf
/UUNUKK+NewCenturySchlbk-Roman uf
/GAAAAA+NewCenturySchlbk-Roman uf
/UUNUKN+MTSY*1 uf
/UUNUKN+MTSY uf
/JAAAAA+MTSY uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
