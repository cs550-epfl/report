%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9qd4do_jcc9e5_16s.tmp.pdf
%%Creator: Adobe Acrobat 24.1.0
%%For: yy010
%%CreationDate: 2024/12/27, 14:33:10
%%BoundingBox: 0 0 143 85
%%HiResBoundingBox: 0 0 142.2000 84.6000
%%CropBox: 0 0 142.2000 84.6000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1183 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2024-12-27T14:26:25+01:00"
   xmp:CreateDate="2024-12-27T14:26:25+01:00"
   xmp:MetadataDate="2024-12-27T14:26:25+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:395c889e-4bd4-46bc-b85c-4a9d31393ccd"
   xmpMM:InstanceID="uuid:f9d8cc29-a0ac-46d7-9e97-fd080e5f61de"
   pdf:Producer="Acrobat Distiller 10.0.0 (Windows); modified using iText 4.2.0 by 1T3XT">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Herding Cats</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">ACM Trans. Program. Lang. Syst. 2014.36:1-74</rdf:li>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -84.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 84.6 li
142.2 84.6 li
142.2 0 li
cp
clp
.2 setflat
.252 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
-173.196 -85.53 mo
-173.196 -109.443 li
false sop
1 /1 /CSD get_res sepcs
1 sep
@
-207.144 -75.495 mo
-183.231 -75.495 li
@
322.812 -75.495 mo
346.725 -75.495 li
@
312.552 -84.936 mo
312.552 -108.849 li
@
-207.396 644.253 mo
-183.483 644.253 li
@
-172.998 679.65 mo
-172.998 655.737 li
@
312.552 679.047 mo
312.552 655.134 li
@
322.839 644.253 mo
346.752 644.253 li
@
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /FAAAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 55 /seven put
dup 56 /eight put
dup 58 /colon put
dup 65 /A put
dup 74 /J put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 108 /l put
dup 116 /t put
dup 118 /v put
def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/BlueScale 0.0437916 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
13 dict dup begin
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/seven <1C60D8A8C9B7EF327C10274AB025EB21CC3BB5514D7A792BCFB0F254
664FBEE7353071728231DCE5A09FB578C9A63F4547F469AB016F484730> |-
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23
A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F
7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA
2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1C
B4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDD
AD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8
950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27
315B3507F9DAF305> |-
/colon <1C60D8A8C9B854D088E8E1AEAD30C92AB0D98EADF1DE7A77B7CB74CD
7251B14F346AB2E7541FDEE4> |-
/A <1C60D8A8C9B64EDFA3F30AE40D82621F0FCB1DE3B8FE08B0132A2CCBB252
5814D0E06433BF12343DC9A9AB3FF78B46F8CC42B8A00C8B5EA738952A496397
7B57B3D18EEA0F5BB95C06FA8CB59D2805C2A2BCC67181B967> |-
/J <1C60D8A8C9B7A73D365A7906CB17A1CF980A8A86BA58E86DDB37907A2C1F
C33CC7791A34EF51E4037755F037141ECD4AB979BEF37C1BD53571DD37087E42
56F1> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC44F3A27E4CCC92606F912C02778569997A6186F8A1
606F089477CA3B9FEB77CDA1F7183DD095278503BED44AEA29368E1D5A667236
914EC902A72DC76F98F26E5874C65C> |-
/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C
0EAF> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8
090086BA063BC631F5BCB6255A1F02FF856D> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKE+Helvetica /FAAAAA+Helvetica findfont ct_VMDictPut
/UUNUKE+Helvetica*1 
[46{/.notdef}rp /period 8{/.notdef}rp /seven /eight /.notdef /colon 6{/.notdef}rp 
/A 8{/.notdef}rp /J 22{/.notdef}rp /a 3{/.notdef}rp /e /.notdef 
/g 4{/.notdef}rp /l 7{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]
UUNUKE+Helvetica nf
UUNUKE+Helvetica*1 [8.9664 0 0 -8.9664 0 0 ]msf
-127.62 -11.361 mo
(7:8)
[4.98621 2.49355 0 ]xsh
206.777 -11.361 mo
(J.Alglaveetal.)
[4.2124 4.98624 5.98514 1.98874 4.98621 1.98877 4.80597 4.25726 7.47885 4.98624 4.97723 4.98621 
1.98877 0 ]xsh
64.193 6.26801 mo
64.193 11.498 li
65.03 11.498 li
65.03 8.22101 li
65.03 7.46301 65.576 6.85602 66.25 6.85602 cv
66.865 6.85602 67.212 7.23401 67.212 7.90204 cv
67.212 11.498 li
68.049 11.498 li
68.049 8.22101 li
68.049 7.46301 68.597 6.85602 69.274 6.85602 cv
69.882 6.85602 70.241 7.24402 70.241 7.90204 cv
70.241 11.498 li
71.078 11.498 li
71.078 7.58301 li
71.078 6.64606 70.54 6.12805 69.563 6.12805 cv
68.866 6.12805 68.447 6.33801 67.959 6.92505 cv
67.651 6.36804 67.234 6.12805 66.557 6.12805 cv
65.859 6.12805 65.4 6.38806 64.95 7.01501 cv
64.95 6.26801 li
64.193 6.26801 li
false sop
1 /1 /CSD get_res sepcs
1 sep
f
72.314 13.67 mo
73.151 13.67 li
73.151 10.95 li
73.587 11.488 74.074 11.727 74.75 11.727 cv
76.091 11.727 76.976 10.641 76.976 8.97803 cv
76.976 7.224 76.122 6.12799 74.74 6.12799 cv
74.03 6.12799 73.461 6.44702 73.071 7.065 cv
73.071 6.27704 li
72.304 6.27704 li
72.314 13.67 li
cp
74.6 6.90503 mo
75.514 6.90503 76.11 7.71204 76.11 8.95801 cv
76.11 10.143 75.503 10.95 74.6 10.95 cv
73.726 10.95 73.151 10.153 73.151 8.92804 cv
73.151 7.70203 73.726 6.90503 74.6 6.90503 cv
f
9.37799 22.806 mo
7.50499 22.926 li
7.50499 23.354 li
8.01299 23.354 li
8.38199 23.354 8.44098 23.424 8.44098 23.852 cv
8.44098 26.632 li
8.44098 27.03 8.33199 27.1 7.69398 27.1 cv
7.62498 27.1 li
7.62498 27.458 li
10.205 27.458 li
10.205 27.1 li
10.135 27.1 li
9.48798 27.1 9.37799 27.03 9.37799 26.631 cv
9.37799 22.806 li
cp
8.90999 20.335 mo
8.59099 20.335 8.33199 20.594 8.33199 20.913 cv
8.33199 21.222 8.59099 21.491 8.89998 21.491 cv
9.22899 21.491 9.48798 21.232 9.48798 20.913 cv
9.48798 20.594 9.22899 20.335 8.90999 20.335 cv
f
12.439 22.806 mo
10.715 22.926 li
10.715 23.354 li
11.074 23.354 li
11.442 23.354 11.503 23.424 11.503 23.852 cv
11.503 26.632 li
11.503 27.03 11.393 27.1 10.755 27.1 cv
10.715 27.1 li
10.715 27.458 li
13.236 27.458 li
13.236 27.1 li
13.196 27.1 li
12.548 27.1 12.439 27.03 12.439 26.632 cv
12.439 25.197 li
12.439 24.709 12.508 24.261 12.618 24.032 cv
12.827 23.583 13.276 23.274 13.704 23.274 cv
13.963 23.274 14.262 23.424 14.411 23.623 cv
14.561 23.832 14.63 24.141 14.63 24.62 cv
14.63 26.632 li
14.63 27.03 14.521 27.1 13.874 27.1 cv
13.834 27.1 li
13.834 27.458 li
16.354 27.458 li
16.354 27.1 li
16.315 27.1 li
15.677 27.1 15.567 27.03 15.567 26.632 cv
15.567 24.669 li
15.567 23.952 15.537 23.772 15.358 23.434 cv
15.109 22.955 14.601 22.666 14.013 22.666 cv
13.376 22.666 12.877 22.966 12.439 23.623 cv
12.439 22.806 li
f
18.618 22.806 mo
16.745 22.926 li
16.745 23.354 li
17.253 23.354 li
17.621 23.354 17.681 23.424 17.681 23.852 cv
17.681 26.632 li
17.681 27.03 17.572 27.1 16.934 27.1 cv
16.865 27.1 li
16.865 27.458 li
19.445 27.458 li
19.445 27.1 li
19.375 27.1 li
18.727 27.1 18.618 27.03 18.618 26.631 cv
18.618 22.806 li
cp
18.15 20.335 mo
17.831 20.335 17.572 20.594 17.572 20.913 cv
17.572 21.222 17.831 21.491 18.139 21.491 cv
18.469 21.491 18.727 21.232 18.727 20.913 cv
18.727 20.594 18.469 20.335 18.15 20.335 cv
f
21.619 22.816 mo
21.619 20.844 li
21.21 20.844 li
21.111 22.139 20.672 22.796 19.866 22.856 cv
19.866 23.245 li
20.682 23.245 li
20.682 25.785 li
20.682 26.483 20.702 26.732 20.802 26.961 cv
20.961 27.379 21.36 27.608 21.938 27.608 cv
22.326 27.608 22.665 27.489 22.894 27.27 cv
23.223 26.951 23.412 26.423 23.412 25.875 cv
23.412 25.815 23.412 25.745 23.402 25.646 cv
22.984 25.646 li
22.954 26.543 22.695 27.001 22.206 27.001 cv
21.977 27.001 21.778 26.881 21.708 26.712 cv
21.649 26.572 21.619 26.323 21.619 25.964 cv
21.619 23.245 li
23.083 23.245 li
23.083 22.816 li
21.619 22.816 li
f
25.578 22.806 mo
23.705 22.926 li
23.705 23.354 li
24.213 23.354 li
24.582 23.354 24.641 23.424 24.641 23.852 cv
24.641 26.632 li
24.641 27.03 24.532 27.1 23.894 27.1 cv
23.825 27.1 li
23.825 27.458 li
26.405 27.458 li
26.405 27.1 li
26.335 27.1 li
25.687 27.1 25.578 27.03 25.578 26.631 cv
25.578 22.806 li
cp
25.11 20.335 mo
24.791 20.335 24.532 20.594 24.532 20.913 cv
24.532 21.222 24.791 21.491 25.099 21.491 cv
25.429 21.491 25.687 21.232 25.687 20.913 cv
25.687 20.594 25.429 20.335 25.11 20.335 cv
f
31.149 24.251 mo
31.149 23.623 31.04 23.304 30.751 23.065 cv
30.423 22.806 29.937 22.667 29.3 22.667 cv
28.188 22.667 27.363 23.195 27.363 23.912 cv
27.363 24.291 27.589 24.53 27.933 24.53 cv
28.246 24.53 28.478 24.321 28.478 24.022 cv
28.478 23.892 28.428 23.752 28.329 23.613 cv
28.27 23.543 28.26 23.514 28.26 23.484 cv
28.26 23.274 28.666 23.095 29.142 23.095 cv
29.449 23.095 29.796 23.195 29.955 23.344 cv
30.143 23.503 30.212 23.743 30.212 24.191 cv
30.212 24.58 li
29.166 24.759 28.848 24.838 28.359 25.028 cv
27.502 25.347 27.084 25.815 27.084 26.442 cv
27.084 27.15 27.655 27.608 28.537 27.608 cv
29.221 27.608 29.836 27.329 30.262 26.821 cv
30.421 27.329 30.67 27.528 31.139 27.528 cv
31.588 27.528 32.056 27.24 32.056 26.951 cv
32.056 26.881 32.006 26.831 31.956 26.831 cv
31.916 26.831 31.876 26.841 31.806 26.871 cv
31.647 26.931 31.607 26.941 31.527 26.941 cv
31.249 26.941 31.149 26.751 31.149 26.253 cv
31.149 24.251 li
cp
30.212 25.466 mo
30.212 26.064 30.183 26.204 30.014 26.462 cv
29.767 26.831 29.311 27.08 28.884 27.08 cv
28.432 27.08 28.09 26.751 28.09 26.303 cv
28.09 25.885 28.299 25.586 28.738 25.376 cv
29.047 25.237 29.435 25.137 30.212 25.008 cv
30.212 25.466 li
f
34.198 20.106 mo
32.355 20.226 li
32.355 20.654 li
32.843 20.654 li
33.201 20.654 33.262 20.724 33.262 21.152 cv
33.262 26.631 li
33.262 27.03 33.152 27.1 32.514 27.1 cv
32.445 27.1 li
32.445 27.458 li
35.025 27.458 li
35.025 27.1 li
34.955 27.1 li
34.307 27.1 34.198 27.03 34.198 26.631 cv
34.198 20.106 li
f
37.318 20.106 mo
35.475 20.226 li
35.475 20.654 li
35.964 20.654 li
36.322 20.654 36.382 20.724 36.382 21.152 cv
36.382 26.631 li
36.382 27.03 36.272 27.1 35.634 27.1 cv
35.565 27.1 li
35.565 27.458 li
38.145 27.458 li
38.145 27.1 li
38.075 27.1 li
37.428 27.1 37.318 27.03 37.318 26.631 cv
37.318 20.106 li
f
41.395 26.1929 mo
40.299 23.6329 li
40.259 23.543 40.239 23.473 40.239 23.424 cv
40.239 23.244 40.359 23.175 40.698 23.175 cv
40.907 23.175 li
40.907 22.816 li
38.536 22.816 li
38.536 23.175 li
38.646 23.175 li
38.964 23.175 39.144 23.314 39.323 23.713 cv
40.947 27.389 li
40.777 27.7369 li
40.418 28.494 39.951 29.0229 39.632 29.0229 cv
39.542 29.0229 39.472 28.983 39.472 28.923 cv
39.472 28.903 39.482 28.873 39.492 28.8329 cv
39.522 28.744 39.542 28.654 39.542 28.574 cv
39.542 28.3149 39.323 28.126 39.034 28.126 cv
38.685 28.126 38.436 28.3849 38.436 28.744 cv
38.436 29.1819 38.825 29.511 39.343 29.511 cv
39.871 29.511 40.319 29.252 40.718 28.714 cv
41.026 28.295 41.226 27.897 41.664 26.791 cv
42.8 23.9819 li
43.049 23.374 43.258 23.175 43.637 23.175 cv
43.696 23.175 li
43.696 22.816 li
41.704 22.816 li
41.704 23.175 li
41.863 23.175 li
42.242 23.175 42.401 23.2839 42.401 23.543 cv
42.401 23.6429 42.372 23.772 42.302 23.942 cv
41.395 26.1929 li
f
49.546 25.2469 mo
50.682 23.772 li
51.08 23.772 li
51.219 23.772 51.488 23.772 51.488 23.474 cv
51.488 23.165 51.23 23.165 51.08 23.165 cv
49.915 23.165 li
49.765 23.165 49.516 23.165 49.516 23.464 cv
49.516 23.772 49.735 23.772 50.004 23.772 cv
49.267 24.779 li
48.51 23.772 li
48.769 23.772 48.988 23.772 48.988 23.464 cv
48.988 23.165 48.739 23.165 48.589 23.165 cv
47.424 23.165 li
47.275 23.165 47.015 23.165 47.015 23.474 cv
47.015 23.772 47.284 23.772 47.424 23.772 cv
47.822 23.772 li
48.998 25.2469 li
47.762 26.851 li
47.364 26.851 li
47.214 26.851 46.956 26.851 46.956 27.16 cv
46.956 27.458 47.225 27.458 47.364 27.458 cv
48.529 27.458 li
48.679 27.458 48.928 27.458 48.928 27.16 cv
48.928 26.851 48.719 26.851 48.41 26.851 cv
49.267 25.625 li
50.153 26.851 li
49.875 26.851 49.655 26.851 49.655 27.16 cv
49.655 27.458 49.904 27.458 50.054 27.458 cv
51.219 27.458 li
51.359 27.458 51.628 27.458 51.628 27.16 cv
51.628 26.851 51.369 26.851 51.219 26.851 cv
50.821 26.851 li
49.546 25.2469 li
f
56.36 24.001 mo
56.48 24.001 56.808 24.001 56.808 23.652 cv
56.808 23.304 56.44 23.304 56.3 23.304 cv
52.853 23.304 li
52.713 23.304 52.345 23.304 52.345 23.652 cv
52.345 24.001 52.674 24.001 52.794 24.001 cv
56.36 24.001 li
cp
56.3 25.516 mo
56.44 25.516 56.808 25.516 56.808 25.167 cv
56.808 24.818 56.48 24.818 56.36 24.818 cv
52.794 24.818 li
52.674 24.818 52.345 24.818 52.345 25.167 cv
52.345 25.516 52.713 25.516 52.853 25.516 cv
56.3 25.516 li
f
61.968 24.42 mo
61.968 22.566 60.952 21.262 59.856 21.262 cv
58.74 21.262 57.744 22.597 57.744 24.41 cv
57.744 26.263 58.76 27.568 59.856 27.568 cv
60.972 27.568 61.968 26.233 61.968 24.42 cv
cp
59.856 26.96 mo
59.079 26.96 58.431 25.785 58.431 24.31 cv
58.431 22.855 59.119 21.869 59.856 21.869 cv
60.583 21.869 61.281 22.846 61.281 24.31 cv
61.281 25.785 60.633 26.96 59.856 26.96 cv
f
65.764 23.792 mo
65.764 23.423 65.465 23.165 65.146 23.165 cv
64.768 23.165 64.519 23.473 64.519 23.782 cv
64.519 24.151 64.818 24.41 65.137 24.41 cv
65.515 24.41 65.764 24.101 65.764 23.792 cv
cp
65.176 27.458 mo
65.047 27.996 64.668 28.186 64.519 28.265 cv
64.459 28.295 64.32 28.3651 64.32 28.524 cv
64.32 28.674 64.469 28.843 64.639 28.843 cv
64.857 28.843 65.814 28.305 65.814 27.189 cv
65.814 26.532 65.515 26.213 65.137 26.213 cv
64.778 26.213 64.519 26.492 64.519 26.831 cv
64.519 27.109 64.688 27.458 65.176 27.458 cv
f
77.13 23.772 mo
77.429 23.772 li
77.578 23.772 77.827 23.772 77.827 23.473 cv
77.827 23.165 77.588 23.165 77.429 23.165 cv
76.264 23.165 li
76.114 23.165 75.864 23.165 75.864 23.463 cv
75.864 23.772 76.104 23.772 76.264 23.772 cv
76.542 23.772 li
75.825 25.894 li
75.695 26.263 75.636 26.442 75.566 26.751 cv
75.556 26.751 li
75.506 26.562 75.416 26.353 75.347 26.163 cv
74.42 23.772 li
74.669 23.772 li
74.819 23.772 75.068 23.772 75.068 23.473 cv
75.068 23.165 74.829 23.165 74.669 23.165 cv
73.504 23.165 li
73.344 23.165 73.106 23.165 73.106 23.473 cv
73.106 23.772 73.355 23.772 73.504 23.772 cv
73.813 23.772 li
75.228 27.329 li
75.267 27.428 75.267 27.448 75.267 27.458 cv
75.267 27.478 75.018 28.295 74.889 28.544 cv
74.6 29.092 74.241 29.112 74.092 29.122 cv
74.092 29.112 74.142 29.032 74.142 28.903 cv
74.142 28.654 73.962 28.475 73.713 28.475 cv
73.444 28.475 73.275 28.654 73.275 28.913 cv
73.275 29.331 73.613 29.73 74.102 29.73 cv
75.098 29.73 75.546 28.415 75.586 28.305 cv
77.13 23.772 li
f
82.52 24.001 mo
82.639 24.001 82.968 24.001 82.968 23.652 cv
82.968 23.304 82.6 23.304 82.46 23.304 cv
79.013 23.304 li
78.874 23.304 78.505 23.304 78.505 23.652 cv
78.505 24.001 78.834 24.001 78.954 24.001 cv
82.52 24.001 li
cp
82.46 25.516 mo
82.6 25.516 82.968 25.516 82.968 25.167 cv
82.968 24.818 82.639 24.818 82.52 24.818 cv
78.954 24.818 li
78.834 24.818 78.505 24.818 78.505 25.167 cv
78.505 25.516 78.874 25.516 79.013 25.516 cv
82.46 25.516 li
f
88.128 24.42 mo
88.128 22.566 87.112 21.262 86.017 21.262 cv
84.9 21.262 83.904 22.597 83.904 24.41 cv
83.904 26.263 84.92 27.568 86.017 27.568 cv
87.132 27.568 88.128 26.233 88.128 24.42 cv
cp
86.017 26.96 mo
85.239 26.96 84.592 25.785 84.592 24.31 cv
84.592 22.855 85.279 21.869 86.017 21.869 cv
86.743 21.869 87.441 22.846 87.441 24.31 cv
87.441 25.785 86.793 26.96 86.017 26.96 cv
f
34.442 38.762 mo
35.329 38.762 li
35.448 38.762 35.568 38.772 35.687 38.772 cv
37.022 38.772 li
37.022 38.124 li
30.965 38.124 li
30.965 38.772 li
32.3 38.772 li
32.42 38.772 32.539 38.762 32.659 38.762 cv
33.555 38.762 li
33.555 44.979 li
34.442 44.979 li
34.442 38.762 li
f
41.045 44.194 mo
41.045 43.427 40.954 42.876 40.633 42.388 cv
40.418 42.067 39.985 41.788 39.427 41.788 cv
37.809 41.788 37.809 43.692 37.809 44.194 cv
37.809 44.696 37.809 46.558 39.427 46.558 cv
41.045 46.558 41.045 44.696 41.045 44.194 cv
cp
39.427 46.363 mo
39.107 46.363 38.681 46.174 38.542 45.603 cv
38.444 45.191 38.444 44.619 38.444 44.103 cv
38.444 43.594 38.444 43.064 38.548 42.681 cv
38.695 42.13 39.141 41.984 39.427 41.984 cv
39.804 41.984 40.167 42.213 40.292 42.618 cv
40.403 42.994 40.41 43.497 40.41 44.103 cv
40.41 44.619 40.41 45.135 40.32 45.575 cv
40.18 46.21 39.706 46.363 39.427 46.363 cv
f
103.562 38.762 mo
104.449 38.762 li
104.568 38.762 104.688 38.772 104.807 38.772 cv
106.142 38.772 li
106.142 38.124 li
100.084 38.124 li
100.084 38.772 li
101.419 38.772 li
101.539 38.772 101.658 38.762 101.779 38.762 cv
102.675 38.762 li
102.675 44.979 li
103.562 44.979 li
103.562 38.762 li
f
108.903 41.9839 mo
108.903 41.796 108.889 41.789 108.694 41.789 cv
108.247 42.228 107.613 42.235 107.326 42.235 cv
107.326 42.486 li
107.493 42.486 107.954 42.486 108.337 42.291 cv
108.337 45.847 li
108.337 46.077 108.337 46.168 107.64 46.168 cv
107.375 46.168 li
107.375 46.419 li
107.5 46.412 108.359 46.391 108.616 46.391 cv
108.832 46.391 109.711 46.412 109.865 46.419 cv
109.865 46.168 li
109.6 46.168 li
108.903 46.168 108.903 46.077 108.903 45.847 cv
108.903 41.9839 li
f
8.70302 64.889 mo
8.70302 64.859 8.70302 64.839 8.53401 64.67 cv
7.28801 63.415 6.97002 61.532 6.97002 60.008 cv
6.97002 58.274 7.34901 56.54 8.57401 55.295 cv
8.70302 55.176 8.70302 55.156 8.70302 55.126 cv
8.70302 55.056 8.66301 55.026 8.60301 55.026 cv
8.50401 55.026 7.60701 55.704 7.01901 56.969 cv
6.51201 58.065 6.39201 59.171 6.39201 60.008 cv
6.39201 60.785 6.50101 61.99 7.05 63.116 cv
7.647 64.341 8.50401 64.989 8.60301 64.989 cv
8.66301 64.989 8.70302 64.959 8.70302 64.889 cv
f
12.962 58.733 mo
12.783 58.364 12.494 58.095 12.046 58.095 cv
10.88 58.095 9.64502 59.56 9.64502 61.014 cv
9.64502 61.951 10.192 62.608 10.97 62.608 cv
11.169 62.608 11.667 62.568 12.265 61.861 cv
12.344 62.28 12.693 62.608 13.172 62.608 cv
13.52 62.608 13.749 62.379 13.909 62.061 cv
14.078 61.702 14.208 61.094 14.208 61.074 cv
14.208 60.975 14.118 60.975 14.088 60.975 cv
13.988 60.975 13.979 61.014 13.948 61.154 cv
13.779 61.801 13.6 62.389 13.192 62.389 cv
12.922 62.389 12.893 62.13 12.893 61.931 cv
12.893 61.712 12.912 61.632 13.022 61.194 cv
13.131 60.775 13.151 60.676 13.241 60.297 cv
13.6 58.902 li
13.67 58.624 13.67 58.604 13.67 58.564 cv
13.67 58.394 13.55 58.295 13.38 58.295 cv
13.142 58.295 12.992 58.514 12.962 58.733 cv
cp
12.315 61.313 mo
12.265 61.493 12.265 61.512 12.115 61.682 cv
11.677 62.23 11.269 62.389 10.99 62.389 cv
10.491 62.389 10.352 61.841 10.352 61.453 cv
10.352 60.955 10.671 59.729 10.9 59.271 cv
11.209 58.683 11.657 58.314 12.056 58.314 cv
12.703 58.314 12.843 59.131 12.843 59.191 cv
12.843 59.251 12.823 59.311 12.813 59.36 cv
12.315 61.313 li
f
17.405 60.008 mo
17.405 59.231 17.296 58.025 16.748 56.9 cv
16.15 55.674 15.293 55.026 15.194 55.026 cv
15.134 55.026 15.094 55.067 15.094 55.126 cv
15.094 55.156 15.094 55.176 15.283 55.355 cv
16.26 56.341 16.827 57.925 16.827 60.008 cv
16.827 61.712 16.459 63.465 15.223 64.72 cv
15.094 64.8391 15.094 64.86 15.094 64.889 cv
15.094 64.949 15.134 64.989 15.194 64.989 cv
15.293 64.989 16.19 64.312 16.778 63.047 cv
17.285 61.95 17.405 60.845 17.405 60.008 cv
f
23.025 60.287 mo
24.161 58.812 li
24.559 58.812 li
24.699 58.812 24.967 58.812 24.967 58.514 cv
24.967 58.205 24.709 58.205 24.559 58.205 cv
23.394 58.205 li
23.244 58.205 22.995 58.205 22.995 58.504 cv
22.995 58.812 23.214 58.812 23.483 58.812 cv
22.746 59.819 li
21.989 58.812 li
22.248 58.812 22.467 58.812 22.467 58.504 cv
22.467 58.205 22.218 58.205 22.068 58.205 cv
20.903 58.205 li
20.754 58.205 20.494 58.205 20.494 58.514 cv
20.494 58.812 20.763 58.812 20.903 58.812 cv
21.301 58.812 li
22.477 60.287 li
21.242 61.891 li
20.843 61.891 li
20.693 61.891 20.435 61.891 20.435 62.2 cv
20.435 62.498 20.704 62.498 20.843 62.498 cv
22.009 62.498 li
22.158 62.498 22.407 62.498 22.407 62.2 cv
22.407 61.891 22.198 61.891 21.889 61.891 cv
22.746 60.665 li
23.632 61.891 li
23.354 61.891 23.134 61.891 23.134 62.2 cv
23.134 62.498 23.383 62.498 23.533 62.498 cv
24.699 62.498 li
24.838 62.498 25.107 62.498 25.107 62.2 cv
25.107 61.891 24.848 61.891 24.699 61.891 cv
24.3 61.891 li
23.025 60.287 li
f
37.132 60.207 mo
37.312 60.207 37.491 60.207 37.491 60.008 cv
37.491 59.809 37.312 59.809 37.132 59.809 cv
29.73 59.809 li
30.278 59.39 30.547 58.981 30.627 58.852 cv
31.075 58.165 31.154 57.537 31.154 57.527 cv
31.154 57.407 31.035 57.407 30.955 57.407 cv
30.786 57.407 30.776 57.427 30.736 57.606 cv
30.507 58.583 29.919 59.41 28.794 59.878 cv
28.684 59.918 28.644 59.938 28.644 60.008 cv
28.644 60.077 28.694 60.097 28.794 60.137 cv
29.83 60.565 30.497 61.343 30.746 62.458 cv
30.776 62.578 30.786 62.608 30.955 62.608 cv
31.035 62.608 31.154 62.608 31.154 62.488 cv
31.154 62.468 31.065 61.841 30.647 61.173 cv
30.447 60.874 30.158 60.526 29.73 60.207 cv
37.132 60.207 li
f
43.904 56.71 mo
43.904 56.551 43.904 56.302 43.605 56.302 cv
43.416 56.302 43.356 56.421 43.306 56.541 cv
42.927 57.388 42.409 57.497 42.22 57.517 cv
42.061 57.527 41.852 57.547 41.852 57.826 cv
41.852 58.075 42.031 58.125 42.18 58.125 cv
42.37 58.125 42.778 58.065 43.217 57.687 cv
43.217 61.891 li
42.31 61.891 li
42.15 61.891 41.911 61.891 41.911 62.199 cv
41.911 62.498 42.16 62.498 42.31 62.498 cv
44.811 62.498 li
44.96 62.498 45.209 62.498 45.209 62.199 cv
45.209 61.891 44.97 61.891 44.811 61.891 cv
43.904 61.891 li
43.904 56.71 li
f
78.184 64.889 mo
78.184 64.859 78.184 64.839 78.014 64.67 cv
76.769 63.415 76.451 61.532 76.451 60.008 cv
76.451 58.274 76.829 56.54 78.054 55.295 cv
78.184 55.176 78.184 55.156 78.184 55.126 cv
78.184 55.056 78.144 55.026 78.084 55.026 cv
77.985 55.026 77.088 55.704 76.5 56.969 cv
75.992 58.065 75.872 59.171 75.872 60.008 cv
75.872 60.785 75.982 61.99 76.53 63.116 cv
77.127 64.341 77.985 64.989 78.084 64.989 cv
78.144 64.989 78.184 64.959 78.184 64.889 cv
f
82.671 58.713 mo
82.512 58.713 82.372 58.713 82.232 58.853 cv
82.073 59.002 82.053 59.171 82.053 59.241 cv
82.053 59.48 82.232 59.59 82.422 59.59 cv
82.711 59.59 82.98 59.351 82.98 58.952 cv
82.98 58.464 82.512 58.095 81.804 58.095 cv
80.459 58.095 79.134 59.52 79.134 60.925 cv
79.134 61.821 79.712 62.609 80.748 62.609 cv
82.173 62.609 83.01 61.552 83.01 61.433 cv
83.01 61.373 82.95 61.303 82.89 61.303 cv
82.84 61.303 82.82 61.323 82.761 61.403 cv
81.974 62.389 80.888 62.389 80.768 62.389 cv
80.141 62.389 79.871 61.901 79.871 61.303 cv
79.871 60.895 80.07 59.928 80.409 59.311 cv
80.718 58.743 81.266 58.315 81.814 58.315 cv
82.152 58.315 82.531 58.444 82.671 58.713 cv
f
85.925 60.0079 mo
85.925 59.231 85.816 58.025 85.268 56.9 cv
84.669 55.674 83.813 55.0259 83.713 55.0259 cv
83.654 55.0259 83.613 55.067 83.613 55.126 cv
83.613 55.1559 83.613 55.176 83.803 55.355 cv
84.78 56.3409 85.347 57.925 85.347 60.0079 cv
85.347 61.712 84.979 63.465 83.743 64.72 cv
83.613 64.839 83.613 64.86 83.613 64.889 cv
83.613 64.949 83.654 64.989 83.713 64.989 cv
83.813 64.989 84.709 64.312 85.297 63.0469 cv
85.805 61.95 85.925 60.845 85.925 60.0079 cv
f
90.778 60.645 mo
90.778 59.709 91.366 58.752 92.571 58.752 cv
92.581 58.991 92.751 59.19 93 59.19 cv
93.218 59.19 93.418 59.031 93.418 58.762 cv
93.418 58.563 93.299 58.145 92.471 58.145 cv
91.963 58.145 91.326 58.324 90.778 58.952 cv
90.778 58.613 li
90.778 58.304 90.718 58.205 90.38 58.205 cv
89.284 58.205 li
89.134 58.205 88.884 58.205 88.884 58.503 cv
88.884 58.812 89.124 58.812 89.284 58.812 cv
90.091 58.812 li
90.091 61.891 li
89.284 61.891 li
89.134 61.891 88.884 61.891 88.884 62.189 cv
88.884 62.498 89.124 62.498 89.284 62.498 cv
91.883 62.498 li
92.033 62.498 92.292 62.498 92.292 62.199 cv
92.292 61.891 92.033 61.891 91.883 61.891 cv
90.778 61.891 li
90.778 60.645 li
f
96.944 56.71 mo
96.944 56.551 96.944 56.302 96.645 56.302 cv
96.457 56.302 96.396 56.421 96.346 56.541 cv
95.968 57.388 95.45 57.497 95.26 57.517 cv
95.101 57.527 94.892 57.547 94.892 57.826 cv
94.892 58.075 95.072 58.125 95.221 58.125 cv
95.41 58.125 95.819 58.065 96.257 57.687 cv
96.257 61.891 li
95.35 61.891 li
95.191 61.891 94.952 61.891 94.952 62.199 cv
94.952 62.498 95.201 62.498 95.35 62.498 cv
97.851 62.498 li
98.001 62.498 98.25 62.498 98.25 62.199 cv
98.25 61.891 98.01 61.891 97.851 61.891 cv
96.944 61.891 li
96.944 56.71 li
f
110.812 60.207 mo
110.991 60.207 111.17 60.207 111.17 60.008 cv
111.17 59.809 110.991 59.809 110.812 59.809 cv
103.409 59.809 li
103.957 59.39 104.227 58.981 104.306 58.852 cv
104.754 58.165 104.834 57.537 104.834 57.527 cv
104.834 57.407 104.714 57.407 104.635 57.407 cv
104.465 57.407 104.455 57.427 104.415 57.606 cv
104.187 58.583 103.599 59.41 102.473 59.878 cv
102.364 59.918 102.324 59.938 102.324 60.008 cv
102.324 60.077 102.373 60.097 102.473 60.137 cv
103.509 60.565 104.177 61.343 104.426 62.458 cv
104.455 62.578 104.465 62.608 104.635 62.608 cv
104.714 62.608 104.834 62.608 104.834 62.488 cv
104.834 62.468 104.744 61.841 104.326 61.173 cv
104.127 60.874 103.838 60.526 103.409 60.207 cv
110.812 60.207 li
f
118.89 58.812 mo
119.189 58.812 li
119.338 58.812 119.587 58.812 119.587 58.513 cv
119.587 58.205 119.348 58.205 119.189 58.205 cv
118.023 58.205 li
117.873 58.205 117.624 58.205 117.624 58.503 cv
117.624 58.812 117.864 58.812 118.023 58.812 cv
118.302 58.812 li
117.584 60.934 li
117.454 61.303 117.395 61.482 117.325 61.791 cv
117.316 61.791 li
117.266 61.601 117.176 61.393 117.106 61.203 cv
116.18 58.812 li
116.429 58.812 li
116.578 58.812 116.827 58.812 116.827 58.513 cv
116.827 58.205 116.588 58.205 116.429 58.205 cv
115.263 58.205 li
115.104 58.205 114.865 58.205 114.865 58.513 cv
114.865 58.812 115.114 58.812 115.263 58.812 cv
115.572 58.812 li
116.987 62.369 li
117.027 62.468 117.027 62.488 117.027 62.498 cv
117.027 62.518 116.778 63.335 116.648 63.584 cv
116.359 64.132 116 64.152 115.851 64.162 cv
115.851 64.152 115.901 64.072 115.901 63.943 cv
115.901 63.694 115.721 63.515 115.472 63.515 cv
115.203 63.515 115.033 63.694 115.033 63.953 cv
115.033 64.371 115.372 64.77 115.861 64.77 cv
116.857 64.77 117.305 63.455 117.345 63.345 cv
118.89 58.812 li
f
9.78401 75.8099 mo
9.78401 75.78 9.78401 75.7599 9.61501 75.5909 cv
8.369 74.335 8.05101 72.4529 8.05101 70.928 cv
8.05101 69.1949 8.429 67.4609 9.655 66.2159 cv
9.78401 66.097 9.78401 66.077 9.78401 66.047 cv
9.78401 65.977 9.744 65.947 9.68401 65.947 cv
9.58501 65.947 8.688 66.6249 8.10001 67.89 cv
7.593 68.986 7.47301 70.0909 7.47301 70.928 cv
7.47301 71.706 7.582 72.9109 8.13 74.037 cv
8.728 75.262 9.58501 75.91 9.68401 75.91 cv
9.744 75.91 9.78401 75.8799 9.78401 75.8099 cv
f
12.707 66.614 mo
12.707 66.604 12.707 66.504 12.578 66.504 cv
12.349 66.504 11.621 66.584 11.362 66.604 cv
11.282 66.614 11.173 66.624 11.173 66.803 cv
11.173 66.923 11.263 66.923 11.412 66.923 cv
11.89 66.923 11.91 66.992 11.91 67.092 cv
11.91 67.162 11.82 67.501 11.77 67.71 cv
10.954 70.958 li
10.834 71.456 10.794 71.615 10.794 71.964 cv
10.794 72.91 11.322 73.528 12.059 73.528 cv
13.235 73.528 14.46 72.044 14.46 70.609 cv
14.46 69.702 13.933 69.015 13.136 69.015 cv
12.677 69.015 12.268 69.304 11.97 69.613 cv
12.707 66.614 li
cp
11.77 70.38 mo
11.831 70.16 11.831 70.14 11.92 70.031 cv
12.408 69.384 12.856 69.234 13.116 69.234 cv
13.474 69.234 13.743 69.533 13.743 70.171 cv
13.743 70.759 13.415 71.904 13.235 72.283 cv
12.906 72.95 12.448 73.309 12.059 73.309 cv
11.721 73.309 11.392 73.04 11.392 72.303 cv
11.392 72.113 11.392 71.924 11.551 71.296 cv
11.77 70.38 li
f
17.526 70.928 mo
17.526 70.151 17.416 68.946 16.868 67.82 cv
16.271 66.595 15.414 65.947 15.314 65.947 cv
15.255 65.947 15.214 65.987 15.214 66.047 cv
15.214 66.076 15.214 66.096 15.404 66.276 cv
16.38 67.262 16.948 68.846 16.948 70.928 cv
16.948 72.632 16.579 74.385 15.344 75.64 cv
15.214 75.76 15.214 75.78 15.214 75.81 cv
15.214 75.869 15.255 75.91 15.314 75.91 cv
15.414 75.91 16.31 75.232 16.898 73.967 cv
17.406 72.871 17.526 71.765 17.526 70.928 cv
f
24.45 69.733 mo
24.749 69.733 li
24.898 69.733 25.148 69.733 25.148 69.434 cv
25.148 69.125 24.908 69.125 24.749 69.125 cv
23.583 69.125 li
23.434 69.125 23.185 69.125 23.185 69.424 cv
23.185 69.733 23.424 69.733 23.583 69.733 cv
23.862 69.733 li
23.145 71.855 li
23.015 72.224 22.956 72.403 22.886 72.712 cv
22.876 72.712 li
22.826 72.522 22.737 72.313 22.667 72.124 cv
21.74 69.733 li
21.99 69.733 li
22.139 69.733 22.388 69.733 22.388 69.434 cv
22.388 69.125 22.149 69.125 21.99 69.125 cv
20.824 69.125 li
20.664 69.125 20.425 69.125 20.425 69.434 cv
20.425 69.733 20.674 69.733 20.824 69.733 cv
21.133 69.733 li
22.547 73.29 li
22.587 73.389 22.587 73.409 22.587 73.419 cv
22.587 73.439 22.338 74.256 22.208 74.505 cv
21.92 75.053 21.561 75.073 21.411 75.083 cv
21.411 75.073 21.461 74.993 21.461 74.864 cv
21.461 74.615 21.282 74.435 21.033 74.435 cv
20.764 74.435 20.595 74.615 20.595 74.874 cv
20.595 75.292 20.933 75.691 21.422 75.691 cv
22.418 75.691 22.866 74.376 22.906 74.266 cv
24.45 69.733 li
f
37.132 71.127 mo
37.311 71.127 37.491 71.127 37.491 70.928 cv
37.491 70.729 37.311 70.729 37.132 70.729 cv
29.73 70.729 li
30.278 70.31 30.547 69.902 30.627 69.772 cv
31.075 69.085 31.155 68.457 31.155 68.447 cv
31.155 68.328 31.035 68.328 30.955 68.328 cv
30.786 68.328 30.776 68.348 30.736 68.527 cv
30.507 69.503 29.919 70.33 28.793 70.798 cv
28.684 70.838 28.644 70.858 28.644 70.928 cv
28.644 70.998 28.694 71.018 28.793 71.058 cv
29.829 71.486 30.497 72.263 30.746 73.379 cv
30.776 73.498 30.786 73.528 30.955 73.528 cv
31.035 73.528 31.155 73.528 31.155 73.409 cv
31.155 73.389 31.065 72.761 30.646 72.094 cv
30.447 71.795 30.158 71.446 29.73 71.127 cv
37.132 71.127 li
f
43.905 67.631 mo
43.905 67.471 43.905 67.222 43.606 67.222 cv
43.417 67.222 43.357 67.342 43.307 67.462 cv
42.928 68.308 42.41 68.418 42.221 68.438 cv
42.062 68.448 41.852 68.468 41.852 68.747 cv
41.852 68.996 42.032 69.046 42.181 69.046 cv
42.37 69.046 42.779 68.986 43.218 68.607 cv
43.218 72.812 li
42.311 72.812 li
42.151 72.812 41.912 72.812 41.912 73.12 cv
41.912 73.419 42.161 73.419 42.311 73.419 cv
44.811 73.419 li
44.961 73.419 45.21 73.419 45.21 73.12 cv
45.21 72.812 44.971 72.812 44.811 72.812 cv
43.905 72.812 li
43.905 67.631 li
f
77.343 75.81 mo
77.343 75.78 77.343 75.76 77.173 75.591 cv
75.928 74.335 75.609 72.453 75.609 70.928 cv
75.609 69.195 75.988 67.461 77.213 66.216 cv
77.343 66.096 77.343 66.076 77.343 66.046 cv
77.343 65.9771 77.303 65.947 77.243 65.947 cv
77.144 65.947 76.246 66.625 75.659 67.89 cv
75.151 68.985 75.032 70.091 75.032 70.928 cv
75.032 71.705 75.141 72.911 75.689 74.037 cv
76.286 75.262 77.144 75.91 77.243 75.91 cv
77.303 75.91 77.343 75.879 77.343 75.81 cv
f
83.026 66.614 mo
83.026 66.6041 83.026 66.5051 82.896 66.5051 cv
82.747 66.5051 81.8 66.5941 81.631 66.614 cv
81.551 66.624 81.492 66.6741 81.492 66.804 cv
81.492 66.923 81.582 66.923 81.731 66.923 cv
82.209 66.923 82.229 66.9921 82.229 67.092 cv
82.199 67.291 li
81.601 69.653 li
81.422 69.2841 81.133 69.015 80.685 69.015 cv
79.519 69.015 78.284 70.48 78.284 71.934 cv
78.284 72.8701 78.832 73.528 79.609 73.528 cv
79.808 73.528 80.306 73.488 80.904 72.7811 cv
80.984 73.2001 81.333 73.528 81.81 73.528 cv
82.159 73.528 82.388 73.2991 82.547 72.98 cv
82.717 72.621 82.846 72.014 82.846 71.994 cv
82.846 71.894 82.756 71.894 82.727 71.894 cv
82.628 71.894 82.618 71.934 82.588 72.074 cv
82.419 72.7211 82.239 73.309 81.831 73.309 cv
81.561 73.309 81.532 73.05 81.532 72.8511 cv
81.532 72.6121 81.551 72.5421 81.591 72.3721 cv
83.026 66.614 li
cp
80.954 72.233 mo
80.904 72.412 80.904 72.4321 80.755 72.6021 cv
80.316 73.15 79.908 73.309 79.629 73.309 cv
79.13 73.309 78.991 72.761 78.991 72.3721 cv
78.991 71.874 79.31 70.649 79.539 70.191 cv
79.848 69.603 80.297 69.2341 80.695 69.2341 cv
81.342 69.2341 81.482 70.051 81.482 70.111 cv
81.482 70.171 81.462 70.231 81.452 70.2811 cv
80.954 72.233 li
f
85.924 70.928 mo
85.924 70.1511 85.815 68.946 85.267 67.8201 cv
84.669 66.5941 83.812 65.9471 83.712 65.9471 cv
83.653 65.9471 83.613 65.9871 83.613 66.0461 cv
83.613 66.076 83.613 66.0961 83.802 66.2751 cv
84.779 67.261 85.346 68.8461 85.346 70.928 cv
85.346 72.6321 84.978 74.3851 83.742 75.6401 cv
83.613 75.7591 83.613 75.7801 83.613 75.8101 cv
83.613 75.8691 83.653 75.9101 83.712 75.9101 cv
83.812 75.9101 84.708 75.2321 85.296 73.967 cv
85.805 72.8701 85.924 71.7651 85.924 70.928 cv
f
90.777 71.566 mo
90.777 70.6291 91.365 69.6731 92.57 69.6731 cv
92.58 69.912 92.75 70.1111 92.999 70.1111 cv
93.218 70.1111 93.417 69.9521 93.417 69.683 cv
93.417 69.4831 93.298 69.0651 92.47 69.0651 cv
91.963 69.0651 91.325 69.2451 90.777 69.8721 cv
90.777 69.5331 li
90.777 69.2251 90.717 69.1251 90.379 69.1251 cv
89.283 69.1251 li
89.134 69.1251 88.884 69.1251 88.884 69.4241 cv
88.884 69.7331 89.123 69.7331 89.283 69.7331 cv
90.09 69.7331 li
90.09 72.8111 li
89.283 72.8111 li
89.134 72.8111 88.884 72.8111 88.884 73.11 cv
88.884 73.4191 89.123 73.4191 89.283 73.4191 cv
91.882 73.4191 li
92.032 73.4191 92.292 73.4191 92.292 73.1201 cv
92.292 72.8111 92.032 72.8111 91.882 72.8111 cv
90.777 72.8111 li
90.777 71.566 li
f
94.512 72.8411 mo
94.423 72.9211 94.363 72.9701 94.363 73.1101 cv
94.363 73.4191 94.612 73.4191 94.772 73.4191 cv
98.149 73.4191 li
98.478 73.4191 98.547 73.3291 98.547 73.0101 cv
98.547 72.7521 li
98.547 72.5621 98.547 72.3431 98.208 72.3431 cv
97.86 72.3431 97.86 72.5321 97.86 72.8111 cv
95.489 72.8111 li
96.076 72.3031 97.033 71.5561 97.461 71.1571 cv
98.089 70.5991 98.547 69.9621 98.547 69.1651 cv
98.547 67.9691 97.541 67.2221 96.326 67.2221 cv
95.15 67.2221 94.363 68.0391 94.363 68.8861 cv
94.363 69.2551 94.642 69.3641 94.812 69.3641 cv
95.021 69.3641 95.249 69.1951 95.249 68.9161 cv
95.249 68.7961 95.2 68.6671 95.111 68.5971 cv
95.26 68.1391 95.728 67.8301 96.276 67.8301 cv
97.093 67.8301 97.86 68.2881 97.86 69.1651 cv
97.86 69.8621 97.371 70.4401 96.714 70.9881 cv
94.512 72.8411 li
f
110.811 71.1271 mo
110.99 71.1271 111.169 71.1271 111.169 70.9281 cv
111.169 70.7291 110.99 70.7291 110.811 70.7291 cv
103.408 70.7291 li
103.956 70.3101 104.226 69.9011 104.305 69.7721 cv
104.754 69.0841 104.833 68.4571 104.833 68.4471 cv
104.833 68.3271 104.714 68.3271 104.634 68.3271 cv
104.465 68.3271 104.454 68.3471 104.415 68.5261 cv
104.186 69.5031 103.598 70.3301 102.472 70.7981 cv
102.363 70.8381 102.323 70.8581 102.323 70.9281 cv
102.323 70.9981 102.372 71.0171 102.472 71.0571 cv
103.508 71.4851 104.176 72.2631 104.425 73.3781 cv
104.454 73.4981 104.465 73.5281 104.634 73.5281 cv
104.714 73.5281 104.833 73.5281 104.833 73.4081 cv
104.833 73.3881 104.743 72.7611 104.325 72.0931 cv
104.126 71.7941 103.837 71.4461 103.408 71.1271 cv
110.811 71.1271 li
f
117.464 71.2071 mo
118.6 69.7321 li
118.998 69.7321 li
119.138 69.7321 119.407 69.7321 119.407 69.4341 cv
119.407 69.1251 119.148 69.1251 118.998 69.1251 cv
117.832 69.1251 li
117.683 69.1251 117.434 69.1251 117.434 69.4241 cv
117.434 69.7321 117.654 69.7321 117.922 69.7321 cv
117.185 70.7391 li
116.428 69.7321 li
116.687 69.7321 116.907 69.7321 116.907 69.4241 cv
116.907 69.1251 116.657 69.1251 116.507 69.1251 cv
115.342 69.1251 li
115.193 69.1251 114.934 69.1251 114.934 69.4341 cv
114.934 69.7321 115.202 69.7321 115.342 69.7321 cv
115.74 69.7321 li
116.916 71.2071 li
115.681 72.8111 li
115.282 72.8111 li
115.133 72.8111 114.873 72.8111 114.873 73.1201 cv
114.873 73.4191 115.143 73.4191 115.282 73.4191 cv
116.448 73.4191 li
116.597 73.4191 116.846 73.4191 116.846 73.1201 cv
116.846 72.8111 116.637 72.8111 116.328 72.8111 cv
117.185 71.5851 li
118.072 72.8111 li
117.793 72.8111 117.574 72.8111 117.574 73.1201 cv
117.574 73.4191 117.823 73.4191 117.972 73.4191 cv
119.138 73.4191 li
119.278 73.4191 119.546 73.4191 119.546 73.1201 cv
119.546 72.8111 119.287 72.8111 119.138 72.8111 cv
118.74 72.8111 li
117.464 71.2071 li
f
gsave
139.22 6.12811 mo
1.38606 6.12811 li
1.38606 78.0721 li
139.22 78.0721 li
cp
clp
.6 lw
true sadj
1.38606 32.5721 mo
139.22 32.5721 li
.721248 .690089 .646357 .890104 cmyk
@
1.38606 16.9051 mo
139.22 16.9051 li
@
1.38606 50.4051 mo
139.22 50.4051 li
@
grestore
.35 lw
true sadj
71.0731 35.6761 mo
71.0731 48.2381 li
.721248 .690089 .646357 .890104 cmyk
@
71.0731 53.1131 mo
71.0731 78.0711 li
@
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKE+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE0295
8A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-
/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD
078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKE+Helvetica /Encoding get
dup 49 /one put
dup 70 /F put
dup 105 /i put
pop
%ADOEndSubsetFont
/UUNUKE+Helvetica*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 5{/.notdef}rp /seven /eight /.notdef 
/colon 6{/.notdef}rp /A 4{/.notdef}rp /F 3{/.notdef}rp /J 22{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g /.notdef /i 2{/.notdef}rp 
/l 7{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]
UUNUKE+Helvetica nf
UUNUKE+Helvetica*1 [7.9701 0 0 -7.9701 0 0 ]msf
-70.3979 94.0111 mo
(Fig.1.)
[4.86807 1.76778 4.42978 4.43695 4.42978 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+NewCenturySchlbk-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+NewCenturySchlbk-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1991 Adobe Systems Incorporated.  All Rights Reserved.) def
/Weight (Roman) def
/ItalicAngle 0 def
/BaseFontName (NewCenturySchlbk-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 65 /A put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/FontBBox {-195 -250 1000 965} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 722 737 464 479 690 705] def
/OtherBlues [273 282 -205 -205] def
/StdHW [45] def
/StdVW [92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/period <1C60D8A8C9B854D07F2CCA4259E1BC866989B66FCDC617465236399
6D824065A52A3C8F3EDB1B6EF155F3C> |-
/A <1C60D8A8C9B6079F1E6E28C363DC874DA112C854773A96B3504B8F778404
4ECEBCF17569C7E38E7843E9DCD77476369B3B2F20F5CD7844B8E255ED5580DE
B64F103867A9620F0F32637ABFD443ECE83082AED237E64E2DB0B87FCBA599A5
58C8670773E426A7603A04EE0B475CE5EBFE7738E3A54314EA390D9C32415592
9A04F6E455DB072B6CC1> |-
/a <1C60D8A8C9B7EF32A0D0AE1EF0F62BB7BBE8AF01A5B7803A26674FB21109
340A467163967FCCC8F63CF4870D04DD1C3F30C6169566F86EF101915E7AD559
C615B9F2CAABDF32B5DB6E2292C2B723211E2994CBCDBB124767C1B84CDBEF29
256B065C4576B7AC57E373222B3153EE1A08433FD43753CFBA3315AC1E9D2E51
A6ECF7830AA2990F43FE03B50F4F7D0DF6435658637343E1CE6F5EF974F54243
004C50FAC54AF7D6D746D2B655809D860354CEA99D420A8B7B4906FB4B664C4D
098B724B41E9AEA5> |-
/d <1C60D8A8C9B7FD84115B7ADBBBBAF6547C0CCC072FBB86ABD0B9CAF03EDB
273AFCA29C0345BC11CA12FBECF7C78E9B64C52B55BDA66FFABD7237D61717B0
3CCFDE6091C1D7E1AA307DA3DC8D74A79B074B39F4052B86EF1FB85B87B2AFF7
528F0D86AA299C7B441DCF88ACEAD9473D0E557EB7AE1509E4B9945BBB7461E7
519212633D805AAA2156820759C883A47DA78D0151AEA071082C46AD9ED7536E
670CBE1077E7F4417DCD6F0F02C235EFE75E99C02BDE4B065FFE4287E633DB08
9F044C10027DAAA5D4EC9684DB89> |-
/e <1C60D8A8C9B7A73D32F7A6F0CEDBBA928DB8CCB39233B59FFE5FB31DB1B3
5C0D76BCD460F0EDA032A6184607F4BF31854DBDC4447881DB3E8BE2235397D0
D3505C20E952C6C9CE2D9EAB28ADE8DB4CBA1E935AA769AEACE103CEB19FC552
15C9396B1C248513> |-
/g <1C60D8A8C9B78256DE28BF97AD34075E4768927ECC8DB90642D77CD31DEC
CBDB5B707178FE864D33EB3286693E7709F074240787F0A3559D10DF0E400826
1E64CED714353CE1A792FE988C644EEB4092FB0271EEE971F242B4FC9A058289
1CA0D7264C7B6B4E527BC5E64F03A77595D9FB6AD2816E8E6AECD0FEE4386668
CFE736EE94DBB7643D0EE597166733E49AFD299893A4DEE4E5CA46C49DFF8629
1A74A8E4E1313D622B7D6F32A364A3760F9E54FDE2091C7BD2D2E71CD687F3ED
F345FB79486586213F5E603F7F7979627283757EB0D8CFCBD318F18B3D429AE0
3E9C7DC5A350E3EBE3FDA82E2B817C3992757C61D830E2E5830799F065659984
19DE1B58E709B52918CDCFE550DC4738A3DF78BA5E25858FDA1842A97F74F7B7
7E7CFBEE4D811BC132A1DC04BFEE3206F22C98CA11ADD53490B2BA5DB4D8853B
E222C805B6292CF528ED23FA879470B6> |-
/h <1C60D8A8C9B7D8BE6A6C43078112631D74441E1CE52948E1DF331D74C26C
D61852A52295A43A1324D5A45ED50FB807BABE903E31731156E4133C1A43634A
037822B1ABE6393C0C4FF937F4A4EA6442CB6A4D27B4D578599079A5D3974637
A3A8BA9A998FAEB77A92304091E6E59C4AB5FBD9F74B1E36AD6618FE44088A74
0EC42A9C9ADADA3C97955BABE9B1B97546EA2EADADC91D6E7A960B8C5D6D9075
7DFB5B3C6C> |-
/i <1C60D8A8C9B831A9FF8CD9197047825E848604FDD6E7F56F76E8364E24F6
D87E40CAC57E2383F9BBFE3BB7DA6CA71D7A4D9481D9CE16F654D52809C855A4
B8A9197C19C0A514FE849E2138CB99432640DCA012878EAE4F77DD8F6D542CA6
C7A1C20255312673CD406B24> |-
/l <1C60D8A8C9B831A9FF8CD9183079FC75DFED442C6F696BE4504C6A290C2C
69FD68EB033C5B91DC3387487D8EA68C3D287BCC0F5CA866E6484C312B19A8DE
15847456788A6325367F3335BB26> |-
/m <1C60D8A8C9B59F85E7C388C8F8D42D4F9C4A07954277BFC922CB62C68FF6
454F0E9BCC64C880EAC95864E86E8260CBC1AB8B8E239EA06B039FDFB30F81A5
B39C51F7C85A927B05DA74CB9AC882C85457F650C386EF445B03FB245C8E321B
532366734F9E903D388575B4A94C1258A9927C501CB78F02C7025CE518A68F70
3A6DC98E705EBFBB972250E4A6ADE8992BE4526C22E6E71B0DB1C9D62AF2683B
7ABB8CCABF0B9FEB908FF6F15194B478D15A79E023FA83D3FC839F5BD5EF264B
4D54F22584B8DE67DC92A172003FAC0DF015046C111B301542B7D539BF1FE0A4
FEB832DD7A9C7315643D9C> |-
/n <1C60D8A8C9B7D8BE6A6C430784FDAE2103086296A83BCDE41BC6C4D542B2
B13631EB1A1FF34635BC8BEC4B88DA4DF2A8A7679F9735541036F171442F972C
2F980F76BC666E74BE29DEB5E8496D04405696B062BBB5FBE37E1FC6B7F85E2C
B2952BAE938A85763D727F32E58260AB4CEB4ECCD4AC11465B6D612E255EE186
62345520347A4A1001239E20717414F5D43EE3F372D9DA28D2> |-
/o <1C60D8A8C9B7A73D32F945FD647005A2F1A7707B71E1A8E0762102820CEB
364242DE4DD59050DDA5727D51AFFE041603A2E1901800384923D88D5E746139
7A2FCA19D5A84C3CE4A0DF8AF5DFB11D3E249B35D4DC6FDA8A56> |-
/p <1C60D8A8C9B7FD8496449B6B5DA3404CAEAF93ECD165DD9344A64EE8865A
51DE9D146B476994D2B7712BDF91851F77C31F7840CE9FB4BCD802712D55415B
319EA6FF9CE3F810D594CF8F336F681D0BCE6373BE25898C726C3492B0FD6C2C
CB343D66FDDFDD10CBA7C093CE389937880A50EF76C2D0327EA3FEFDF625B5F2
D81AB25ED5A2A34CE80D2CD06A4705D1013DD76B54782AC3CFF9CC532F7C663D
2BFA9CFCE62AD3506228D5BF540FF6D073339CFF14B292531B37CE912BD6F496
35668C76> |-
/r <1C60D8A8C9B77FE2B239EC2E62CF2DF5CFA62EC7BD4226DA91B4CEF23A48
5576BEB971FC2664E16D4FB864644556C4C02FA451134CBD4DEEC866E1019CD2
90AA46BEB1E032AFD32D08BE4251C821416623C707CAD2494F3E033F8ED65F62
57A84CD8B3138C8AEE956E8FDB04986ADB1743FA3EE8F1E92D5EC6F40DEA8C8A
DCDECC0A401C2A45C458F0D44C> |-
/s <1C60D8A8C9B74CDD12D9EE5CF892F5086698A8188F60B5A0E646E5570DDF
3FE5BCAC128C0572D20097703FFC435F3E1A978F0186692DA9956ED76501FDC6
636C7DBB2ACCCE8761D2814AE5D87C79037855D41AE65C069E2D7E21AEE30462
ECF122DF4A9C44458E2676CECFA5D51B043E51CF66D9F5E8C47FAB8926825BA6
0525BB67066C9A747C13264521CA966D9BBC4D5EB3593909ED2FBA375CA7E260
37383C549001E8CCDA77492C49AB0FABEAE0E5147032E5CBD5F551823D74F2AD
17652027E12E051F746896044B1C64A4FFBBCB38A2E91AA84FBEC5481EF9E039
FFA0> |-
/t <1C60D8A8C9B7361F894A6F48C35B1AC88BD46856678F93D99F5947E0379F
0D3BFA56C05875C92EA70AB6BAF5B60E86E32EE36B6E5A542EB587149C6271D3
6674605A3F51887D8505AC80C0C1E794011710E5> |-
/u <1C60D8A8C9B7D8BE9D3816895332C8CAD5267F2C5E39CE384D708D78928E
CAE15AA60EA89C65E1AE17F316A09776E8B779FDEE47DB0458EB5F12095DE6AF
F2889E91902D306FAE5C8259C9E42D98A2927FD86BD8CF608339FD64196791D4
4D096B91EB7224CE1E54C40425753CF8F4B7AC7A5125F2608277> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKF+NewCenturySchlbk-Roman /GAAAAA+NewCenturySchlbk-Roman findfont ct_VMDictPut
/UUNUKF+NewCenturySchlbk-Roman*1 
[46{/.notdef}rp /period 18{/.notdef}rp /A 31{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
UUNUKF+NewCenturySchlbk-Roman nf
UUNUKF+NewCenturySchlbk-Roman*1 [7.9701 0 0 -7.9701 0 0 ]msf
-40.9684 94.0111 mo
(Amultithreadedprogramimplementingamessagepassingpattern.)
[7.96532 7.08389 4.86887 2.50981 3.09962 2.50981 3.09962 4.86888 3.53793 3.98425 4.43057 4.57407 
3.98425 6.80411 4.5741 3.53793 3.98425 4.27914 3.53793 4.43057 9.30676 2.51138 7.08469 4.5741 
2.5098 3.98425 7.08469 3.98425 4.8689 3.09961 2.50983 4.86887 6.5076 6.6423 7.0831 3.98425 
3.68933 3.68936 4.43057 4.27917 6.20154 4.5741 4.4306 3.68933 3.68933 2.50983 4.8689 6.50757 
4.5741 4.4306 3.09961 3.09967 3.98425 3.5379 4.8689 0 ]xsh
.45 lw
2 lj
100.904 134.68 mo
100.904 150.46 li
false sop
.721248 .690089 .646357 .890104 cmyk
@
102.165 150.579 mo
100.904 154.18 li
99.644 150.579 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
102.165 150.579 mo
100.904 154.18 li
99.644 150.579 li
102.165 150.579 li
cp
.721248 .690089 .646357 .890104 cmyk
@
41.685 150.579 mo
40.425 154.18 li
39.165 150.579 li
1 /1 /CSD get_res sepcs
1 sep
ef
41.685 150.579 mo
40.425 154.18 li
39.165 150.579 li
41.685 150.579 li
cp
.721248 .690089 .646357 .890104 cmyk
@
2 lj
40.425 134.68 mo
40.425 150.46 li
@
34.672 179.03 mo
34.672 184.26 li
35.509 184.26 li
35.509 180.982 li
35.509 180.225 36.054 179.618 36.729 179.618 cv
37.344 179.618 37.69 179.996 37.69 180.664 cv
37.69 184.26 li
38.527 184.26 li
38.527 180.982 li
38.527 180.225 39.075 179.618 39.753 179.618 cv
40.361 179.618 40.719 180.007 40.719 180.664 cv
40.719 184.26 li
41.556 184.26 li
41.556 180.345 li
41.556 179.409 41.018 178.89 40.042 178.89 cv
39.344 178.89 38.926 179.099 38.438 179.687 cv
38.129 179.13 37.712 178.89 37.036 178.89 cv
36.337 178.89 35.879 179.149 35.429 179.777 cv
35.429 179.03 li
34.672 179.03 li
f
42.793 186.432 mo
43.63 186.432 li
43.63 183.712 li
44.067 184.25 44.553 184.489 45.228 184.489 cv
46.571 184.489 47.456 183.403 47.456 181.74 cv
47.456 179.986 46.601 178.89 45.219 178.89 cv
44.509 178.89 43.94 179.209 43.55 179.827 cv
43.55 179.039 li
42.783 179.039 li
42.793 186.432 li
cp
45.08 179.667 mo
45.993 179.667 46.589 180.474 46.589 181.719 cv
46.589 182.905 45.983 183.712 45.08 183.712 cv
44.206 183.712 43.63 182.915 43.63 181.69 cv
43.63 180.464 44.206 179.667 45.08 179.667 cv
f
52.876 176.997 mo
51.88 178.302 51.252 180.115 51.252 181.68 cv
51.252 183.253 51.88 185.066 52.876 186.372 cv
53.424 186.372 li
52.547 184.947 52.059 183.273 52.059 181.68 cv
52.059 180.095 52.547 178.411 53.424 176.997 cv
52.876 176.997 li
f
58.577 180.793 mo
58.537 180.284 58.428 179.956 58.228 179.667 cv
57.869 179.179 57.242 178.89 56.515 178.89 cv
55.11 178.89 54.194 180.006 54.194 181.739 cv
54.194 183.423 55.09 184.488 56.505 184.488 cv
57.75 184.488 58.537 183.741 58.637 182.466 cv
57.8 182.466 li
57.66 183.303 57.232 183.722 56.525 183.722 cv
55.608 183.722 55.06 182.975 55.06 181.739 cv
55.06 180.434 55.598 179.657 56.505 179.657 cv
57.202 179.657 57.64 180.065 57.74 180.793 cv
58.577 180.793 li
f
61.635 178.89 mo
60.17 178.89 59.283 179.936 59.283 181.69 cv
59.283 183.443 60.16 184.489 61.645 184.489 cv
63.109 184.489 64.006 183.443 64.006 181.73 cv
64.006 179.926 63.139 178.89 61.635 178.89 cv
cp
61.645 179.658 mo
62.581 179.658 63.139 180.424 63.139 181.719 cv
63.139 182.945 62.561 183.722 61.645 183.722 cv
60.718 183.722 60.151 182.955 60.151 181.69 cv
60.151 180.434 60.718 179.658 61.645 179.658 cv
f
65.152 179.03 mo
65.152 184.26 li
65.988 184.26 li
65.988 181.381 li
65.988 180.315 66.545 179.618 67.398 179.618 cv
68.052 179.618 68.469 180.016 68.469 180.644 cv
68.469 184.26 li
69.296 184.26 li
69.296 180.315 li
69.296 179.448 68.65 178.89 67.646 178.89 cv
66.867 178.89 66.368 179.189 65.909 179.917 cv
65.909 179.03 li
65.152 179.03 li
f
72.495 179.039 mo
71.639 179.039 li
71.639 177.604 li
70.811 177.604 li
70.811 179.039 li
70.104 179.039 li
70.104 179.717 li
70.811 179.717 li
70.811 183.662 li
70.811 184.189 71.17 184.488 71.817 184.488 cv
72.016 184.488 72.217 184.469 72.495 184.419 cv
72.495 183.722 li
72.386 183.752 72.256 183.762 72.097 183.762 cv
71.738 183.762 71.639 183.662 71.639 183.293 cv
71.639 179.717 li
72.495 179.717 li
72.495 179.039 li
f
73.422 179.039 mo
73.422 184.26 li
74.259 184.26 li
74.259 181.55 li
74.259 180.803 74.448 180.314 74.847 180.025 cv
75.106 179.836 75.355 179.776 75.933 179.767 cv
75.933 178.92 li
75.793 178.899 75.724 178.89 75.614 178.89 cv
75.072 178.89 74.661 179.209 74.18 179.985 cv
74.18 179.039 li
73.422 179.039 li
f
78.795 178.89 mo
77.33 178.89 76.443 179.936 76.443 181.69 cv
76.443 183.443 77.32 184.489 78.805 184.489 cv
80.27 184.489 81.166 183.443 81.166 181.73 cv
81.166 179.926 80.299 178.89 78.795 178.89 cv
cp
78.805 179.658 mo
79.741 179.658 80.299 180.424 80.299 181.719 cv
80.299 182.945 79.721 183.722 78.805 183.722 cv
77.878 183.722 77.311 182.955 77.311 181.69 cv
77.311 180.434 77.878 179.658 78.805 179.658 cv
f
82.282 184.26 mo
83.1189 184.26 li
83.1189 176.997 li
82.282 176.997 li
cp
f
89.085 179.039 mo
88.219 179.039 li
88.219 178.223 li
88.219 177.873 88.418 177.694 88.796 177.694 cv
88.866 177.694 88.896 177.694 89.085 177.704 cv
89.085 177.007 li
88.896 176.975 88.786 176.967 88.617 176.967 cv
87.85 176.967 87.392 177.405 87.392 178.152 cv
87.392 179.039 li
86.694 179.039 li
86.694 179.717 li
87.392 179.717 li
87.392 184.26 li
88.219 184.26 li
88.219 179.717 li
89.085 179.717 li
89.085 179.039 li
cp
90.809 176.987 mo
90.809 176.987 mo
89.9818 176.987 li
89.9818 184.26 li
90.809 184.26 li
cp
f
94.275 178.89 mo
92.811 178.89 91.924 179.936 91.924 181.69 cv
91.924 183.443 92.8 184.489 94.285 184.489 cv
95.75 184.489 96.646 183.443 96.646 181.73 cv
96.646 179.926 95.78 178.89 94.275 178.89 cv
cp
94.285 179.658 mo
95.221 179.658 95.78 180.424 95.78 181.719 cv
95.78 182.945 95.202 183.722 94.285 183.722 cv
93.359 183.722 92.791 182.955 92.791 181.69 cv
92.791 180.434 93.359 179.658 94.285 179.658 cv
f
102.485 184.26 mo
104.019 179.039 li
103.083 179.039 li
102.046 183.104 li
101.02 179.039 li
100.003 179.039 li
99.007 183.104 li
97.942 179.039 li
97.025 179.039 li
98.54 184.26 li
99.476 184.26 li
100.482 180.165 li
101.538 184.26 li
102.485 184.26 li
f
105.091 186.372 mo
106.088 185.066 106.715 183.253 106.715 181.689 cv
106.715 180.115 106.088 178.302 105.091 176.997 cv
104.543 176.997 li
105.42 178.422 105.908 180.095 105.908 181.689 cv
105.908 183.273 105.42 184.957 104.543 186.372 cv
105.091 186.372 li
f
27.295 133.492 mo
27.206 133.511 27.166 133.511 27.116 133.511 cv
26.827 133.511 26.668 133.362 26.668 133.103 cv
26.668 130.035 li
26.668 129.108 25.99 128.61 24.705 128.61 cv
23.948 128.61 23.32 128.83 22.971 129.219 cv
22.733 129.487 22.633 129.786 22.613 130.304 cv
23.45 130.304 li
23.519 129.667 23.898 129.378 24.675 129.378 cv
25.422 129.378 25.84 129.656 25.84 130.154 cv
25.84 130.374 li
25.84 130.722 25.631 130.872 24.974 130.952 cv
23.798 131.101 23.619 131.14 23.3 131.27 cv
22.692 131.519 22.383 131.988 22.383 132.665 cv
22.383 133.611 23.041 134.21 24.097 134.21 cv
24.754 134.21 25.283 133.98 25.871 133.442 cv
25.93 133.971 26.19 134.21 26.727 134.21 cv
26.897 134.21 27.026 134.189 27.295 134.12 cv
27.295 133.492 li
cp
25.84 132.337 mo
25.84 132.615 25.761 132.785 25.512 133.013 cv
25.173 133.323 24.765 133.482 24.276 133.482 cv
23.629 133.482 23.251 133.174 23.251 132.645 cv
23.251 132.097 23.619 131.818 24.505 131.689 cv
25.382 131.569 25.562 131.529 25.84 131.4 cv
25.84 132.337 li
f
29.617 132.944 mo
28.5809 132.944 li
28.5809 133.98 li
29.617 133.98 li
cp
29.617 128.759 mo
29.617 128.759 mo
28.5809 128.759 li
28.5809 129.795 li
29.617 129.795 li
cp
f
40.537 133.98 mo
42.38 126.717 li
41.344 126.717 li
40.009 132.615 li
38.355 126.717 li
37.359 126.717 li
35.745 132.615 li
34.38 126.717 li
33.344 126.717 li
35.207 133.98 li
36.223 133.98 li
37.847 128.012 li
39.521 133.98 li
40.537 133.98 li
f
45.394 131.28 mo
47.147 128.759 li
46.211 128.759 li
44.956 130.653 li
43.7 128.759 li
42.754 128.759 li
44.497 131.32 li
42.654 133.98 li
43.601 133.98 li
44.926 131.977 li
46.231 133.98 li
47.197 133.98 li
45.394 131.28 li
f
52.845 130.463 mo
48.0232 130.463 li
48.0232 131.16 li
52.845 131.16 li
cp
52.845 132.176 mo
52.845 132.176 mo
48.0232 132.176 li
48.0232 132.874 li
52.845 132.874 li
cp
f
55.865 128.949 mo
55.865 133.98 li
56.7409 133.98 li
56.7409 126.917 li
56.1639 126.917 li
55.8549 128.003 55.6549 128.152 54.3009 128.321 cv
54.3009 128.949 li
55.865 128.949 li
f
38.641 108.683 mo
39.528 108.683 li
39.6469 108.683 39.7669 108.693 39.886 108.693 cv
41.2209 108.693 li
41.2209 108.045 li
35.1639 108.045 li
35.1639 108.693 li
36.4989 108.693 li
36.619 108.693 36.7379 108.683 36.8569 108.683 cv
37.7539 108.683 li
37.7539 114.9 li
38.641 114.9 li
38.641 108.683 li
f
45.243 114.116 mo
45.243 113.348 45.1519 112.798 44.8309 112.309 cv
44.6149 111.989 44.1829 111.71 43.6249 111.71 cv
42.0069 111.71 42.0069 113.614 42.0069 114.116 cv
42.0069 114.618 42.0069 116.48 43.6249 116.48 cv
45.243 116.48 45.243 114.618 45.243 114.116 cv
cp
43.6249 116.285 mo
43.3039 116.285 42.8789 116.096 42.7399 115.524 cv
42.6419 115.113 42.6419 114.541 42.6419 114.025 cv
42.6419 113.516 42.6419 112.986 42.7459 112.602 cv
42.8929 112.052 43.3389 111.905 43.6249 111.905 cv
44.0019 111.905 44.3639 112.136 44.4899 112.54 cv
44.6009 112.916 44.6079 113.419 44.6079 114.025 cv
44.6079 114.541 44.6079 115.057 44.5179 115.497 cv
44.3779 116.131 43.9039 116.285 43.6249 116.285 cv
f
22.623 158.397 mo
22.623 165.66 li
23.3699 165.66 li
23.3699 164.993 li
23.769 165.6 24.2959 165.889 25.0239 165.889 cv
26.3979 165.889 27.295 164.763 27.295 163.03 cv
27.295 161.336 26.4379 160.291 25.0629 160.291 cv
24.3459 160.291 23.838 160.559 23.45 161.147 cv
23.45 158.397 li
22.623 158.397 li
cp
24.9039 161.067 mo
25.8309 161.067 26.429 161.875 26.429 163.12 cv
26.429 164.305 25.8109 165.112 24.9039 165.112 cv
24.0269 165.112 23.45 164.315 23.45 163.089 cv
23.45 161.864 24.0269 161.067 24.9039 161.067 cv
f
29.737 164.623 mo
28.7009 164.623 li
28.7009 165.659 li
29.737 165.659 li
cp
29.737 160.439 mo
29.737 160.439 mo
28.7009 160.439 li
28.7009 161.475 li
29.737 161.475 li
cp
f
40.537 165.66 mo
42.3799 158.397 li
41.3439 158.397 li
40.0089 164.296 li
38.3549 158.397 li
37.3589 158.397 li
35.7449 164.296 li
34.3799 158.397 li
33.3439 158.397 li
35.2069 165.66 li
36.2229 165.66 li
37.847 159.692 li
39.5199 165.66 li
40.537 165.66 li
f
46.11 160.44 mo
44.6649 164.505 li
43.3299 160.44 li
42.4439 160.44 li
44.2069 165.68 li
43.8879 166.506 li
43.7579 166.876 43.5699 167.015 43.2199 167.015 cv
43.101 167.015 42.9619 166.995 42.782 166.956 cv
42.782 167.703 li
42.9519 167.793 43.1209 167.832 43.3399 167.832 cv
43.6089 167.832 43.8979 167.742 44.1169 167.583 cv
44.3759 167.393 44.5259 167.174 44.6849 166.756 cv
47.0069 160.44 li
46.11 160.44 li
f
52.6049 162.143 mo
47.7831 162.143 li
47.7831 162.84 li
52.6049 162.84 li
cp
52.6049 163.857 mo
52.6049 163.857 mo
47.7831 163.857 li
47.7831 164.555 li
52.6049 164.555 li
cp
f
55.6249 160.628 mo
55.6249 165.659 li
56.5009 165.659 li
56.5009 158.596 li
55.9239 158.596 li
55.6149 159.682 55.4149 159.831 54.0609 160.001 cv
54.0609 160.628 li
55.6249 160.628 li
f
99.1199 108.683 mo
100.007 108.683 li
100.127 108.683 100.246 108.693 100.366 108.693 cv
101.701 108.693 li
101.701 108.045 li
95.6429 108.045 li
95.6429 108.693 li
96.9779 108.693 li
97.0969 108.693 97.2179 108.683 97.3369 108.683 cv
98.2329 108.683 li
98.2329 114.9 li
99.1199 114.9 li
99.1199 108.683 li
f
104.461 111.905 mo
104.461 111.717 104.447 111.71 104.252 111.71 cv
103.806 112.149 103.171 112.156 102.885 112.156 cv
102.885 112.407 li
103.052 112.407 103.513 112.407 103.897 112.212 cv
103.897 115.768 li
103.897 115.999 103.897 116.09 103.198 116.09 cv
102.934 116.09 li
102.934 116.341 li
103.06 116.334 103.917 116.312 104.175 116.312 cv
104.392 116.312 105.27 116.334 105.423 116.341 cv
105.423 116.09 li
105.158 116.09 li
104.461 116.09 104.461 115.999 104.461 115.768 cv
104.461 111.905 li
f
88.5769 130.513 mo
88.5369 130.004 88.4279 129.676 88.2279 129.387 cv
87.8699 128.899 87.2419 128.61 86.5149 128.61 cv
85.1099 128.61 84.1929 129.726 84.1929 131.459 cv
84.1929 133.143 85.0909 134.208 86.5049 134.208 cv
87.7499 134.208 88.5369 133.461 88.6369 132.187 cv
87.7999 132.187 li
87.6609 133.023 87.2319 133.442 86.5249 133.442 cv
85.6079 133.442 85.0599 132.695 85.0599 131.459 cv
85.0599 130.154 85.5989 129.377 86.5049 129.377 cv
87.2019 129.377 87.6409 129.785 87.7399 130.513 cv
88.5769 130.513 li
f
91.0569 132.944 mo
90.0208 132.944 li
90.0208 133.98 li
91.0569 133.98 li
cp
91.0569 128.759 mo
91.0569 128.759 mo
90.0208 128.759 li
90.0208 129.795 li
91.0569 129.795 li
cp
f
96.1779 130.851 mo
98.5689 130.851 li
99.3959 130.851 99.7649 131.25 99.7649 132.147 cv
99.7539 132.794 li
99.7539 133.243 99.8339 133.681 99.9639 133.98 cv
101.09 133.98 li
101.09 133.75 li
100.741 133.511 100.671 133.252 100.652 132.287 cv
100.641 131.09 100.452 130.732 99.6649 130.393 cv
100.482 129.995 100.811 129.487 100.811 128.66 cv
100.811 127.405 100.024 126.717 98.5989 126.717 cv
95.2509 126.717 li
95.2509 133.98 li
96.1779 133.98 li
96.1779 130.851 li
cp
96.1779 130.035 mo
96.1779 127.534 li
98.4189 127.534 li
98.9379 127.534 99.2369 127.614 99.4659 127.813 cv
99.7149 128.022 99.8439 128.351 99.8439 128.789 cv
99.8439 129.646 99.4059 130.035 98.4189 130.035 cv
96.1779 130.035 li
f
105.391 128.759 mo
103.946 132.823 li
102.611 128.759 li
101.724 128.759 li
103.488 133.999 li
103.169 134.826 li
103.04 135.195 102.85 135.334 102.501 135.334 cv
102.382 135.334 102.243 135.315 102.063 135.275 cv
102.063 136.022 li
102.233 136.112 102.402 136.152 102.621 136.152 cv
102.89 136.152 103.179 136.062 103.398 135.902 cv
103.657 135.713 103.807 135.493 103.966 135.075 cv
106.288 128.759 li
105.391 128.759 li
f
111.885 130.463 mo
107.063 130.463 li
107.063 131.16 li
111.885 131.16 li
cp
111.885 132.176 mo
111.885 132.176 mo
107.063 132.176 li
107.063 132.873 li
111.885 132.873 li
cp
f
115.612 131.997 mo
115.612 131.528 li
115.612 131.09 115.721 130.921 116.399 130.293 cv
117.146 129.615 117.395 129.167 117.395 128.51 cv
117.395 127.344 116.568 126.597 115.273 126.597 cv
113.839 126.597 113.091 127.393 113.091 128.929 cv
113.938 128.929 li
113.938 128.47 113.988 128.191 114.108 127.952 cv
114.297 127.583 114.696 127.374 115.223 127.374 cv
115.991 127.374 116.499 127.832 116.499 128.51 cv
116.499 128.968 116.28 129.356 115.752 129.825 cv
115.164 130.352 115.164 130.352 114.995 130.582 cv
114.785 130.861 114.716 131.09 114.716 131.449 cv
114.716 131.997 li
115.612 131.997 li
cp
115.612 132.943 mo
115.612 132.943 mo
114.715 132.943 li
114.715 133.979 li
115.612 133.979 li
cp
f
88.4559 158.397 mo
87.6289 158.397 li
87.6289 161.097 li
87.2799 160.569 86.7229 160.291 86.0249 160.291 cv
84.6709 160.291 83.7839 161.376 83.7839 163.04 cv
83.7839 164.803 84.6499 165.889 86.0559 165.889 cv
86.7719 165.889 87.2709 165.62 87.7189 164.972 cv
87.7189 165.66 li
88.4559 165.66 li
88.4559 158.397 li
cp
86.1649 161.067 mo
87.0619 161.067 87.6289 161.864 87.6289 163.11 cv
87.6289 164.315 87.0519 165.112 86.1749 165.112 cv
85.2579 165.112 84.6499 164.305 84.6499 163.089 cv
84.6499 161.875 85.2579 161.067 86.1649 161.067 cv
f
91.1769 164.623 mo
90.1408 164.623 li
90.1408 165.659 li
91.1769 165.659 li
cp
91.1769 160.439 mo
91.1769 160.439 mo
90.1408 160.439 li
90.1408 161.475 li
91.1769 161.475 li
cp
f
96.5379 162.532 mo
98.9289 162.532 li
99.7559 162.532 100.124 162.93 100.124 163.827 cv
100.114 164.474 li
100.114 164.923 100.194 165.361 100.324 165.66 cv
101.449 165.66 li
101.449 165.431 li
101.101 165.192 101.031 164.933 101.011 163.967 cv
101.001 162.771 100.811 162.412 100.024 162.074 cv
100.842 161.676 101.171 161.167 101.171 160.341 cv
101.171 159.085 100.384 158.397 98.9589 158.397 cv
95.6109 158.397 li
95.6109 165.66 li
96.5379 165.66 li
96.5379 162.532 li
cp
96.5379 161.715 mo
96.5379 159.215 li
98.7789 159.215 li
99.2979 159.215 99.5969 159.294 99.8249 159.493 cv
100.074 159.703 100.204 160.031 100.204 160.469 cv
100.204 161.326 99.7659 161.715 98.7789 161.715 cv
96.5379 161.715 li
f
104.794 162.96 mo
106.548 160.439 li
105.611 160.439 li
104.356 162.332 li
103.101 160.439 li
102.154 160.439 li
103.897 162.999 li
102.055 165.659 li
103.001 165.659 li
104.326 163.657 li
105.631 165.659 li
106.598 165.659 li
104.794 162.96 li
f
112.245 162.143 mo
107.423 162.143 li
107.423 162.84 li
112.245 162.84 li
cp
112.245 163.857 mo
112.245 163.857 mo
107.423 163.857 li
107.423 164.555 li
112.245 164.555 li
cp
f
115.973 163.677 mo
115.973 163.209 li
115.973 162.771 116.082 162.601 116.76 161.974 cv
117.507 161.296 117.756 160.848 117.756 160.191 cv
117.756 159.025 116.929 158.278 115.634 158.278 cv
114.2 158.278 113.452 159.075 113.452 160.609 cv
114.299 160.609 li
114.299 160.151 114.349 159.871 114.468 159.632 cv
114.658 159.264 115.056 159.054 115.584 159.054 cv
116.352 159.054 116.86 159.513 116.86 160.191 cv
116.86 160.649 116.64 161.037 116.113 161.505 cv
115.525 162.034 115.525 162.034 115.355 162.262 cv
115.146 162.541 115.077 162.771 115.077 163.129 cv
115.077 163.677 li
115.973 163.677 li
cp
115.973 164.623 mo
115.973 164.623 mo
115.077 164.623 li
115.077 165.659 li
115.973 165.659 li
cp
f
89.7239 150.357 mo
90.3929 150.357 li
90.3929 148.181 li
90.7429 148.612 91.1319 148.803 91.6719 148.803 cv
92.7459 148.803 93.4529 147.934 93.4529 146.603 cv
93.4529 145.201 92.7699 144.324 91.6639 144.324 cv
91.0969 144.324 90.6409 144.579 90.3289 145.073 cv
90.3289 144.444 li
89.7149 144.444 li
89.7239 150.357 li
cp
91.5529 144.946 mo
92.2839 144.946 92.7599 145.591 92.7599 146.588 cv
92.7599 147.536 92.2759 148.181 91.5529 148.181 cv
90.8539 148.181 90.3929 147.544 90.3929 146.563 cv
90.3929 145.584 90.8539 144.946 91.5529 144.946 cv
f
95.8929 144.324 mo
94.7209 144.324 94.0119 145.161 94.0119 146.563 cv
94.0119 147.967 94.7129 148.803 95.9009 148.803 cv
97.0729 148.803 97.7899 147.967 97.7899 146.595 cv
97.7899 145.153 97.0969 144.324 95.8929 144.324 cv
cp
95.9009 144.938 mo
96.6509 144.938 97.0969 145.552 97.0969 146.588 cv
97.0969 147.568 96.6339 148.189 95.9009 148.189 cv
95.1599 148.189 94.7059 147.576 94.7059 146.563 cv
94.7059 145.559 95.1599 144.938 95.9009 144.938 cv
f
29.243 150.357 mo
29.9119 150.357 li
29.9119 148.181 li
30.2619 148.612 30.6509 148.803 31.1909 148.803 cv
32.2649 148.803 32.9729 147.934 32.9729 146.603 cv
32.9729 145.201 32.2889 144.324 31.1829 144.324 cv
30.6159 144.324 30.1599 144.579 29.8479 145.073 cv
29.8479 144.444 li
29.2349 144.444 li
29.243 150.357 li
cp
31.0719 144.946 mo
31.8029 144.946 32.2799 145.591 32.2799 146.588 cv
32.2799 147.536 31.7949 148.181 31.0719 148.181 cv
30.3729 148.181 29.9119 147.544 29.9119 146.563 cv
29.9119 145.584 30.3729 144.946 31.0719 144.946 cv
f
35.413 144.324 mo
34.2419 144.324 33.532 145.161 33.532 146.563 cv
33.532 147.967 34.2329 148.803 35.421 148.803 cv
36.593 148.803 37.3099 147.967 37.3099 146.595 cv
37.3099 145.153 36.6169 144.324 35.413 144.324 cv
cp
35.421 144.938 mo
36.17 144.938 36.6169 145.552 36.6169 146.588 cv
36.6169 147.568 36.154 148.189 35.421 148.189 cv
34.68 148.189 34.226 147.576 34.226 146.563 cv
34.226 145.559 34.68 144.938 35.421 144.938 cv
f
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKE+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706F
E45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC7542
58679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52D
A81BBE025DB4544A719A686DB3A0393D2301EEF964B14766F22C4A5827> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066
468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF
3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4
A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC64
86> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKE+Helvetica /Encoding get
dup 50 /two put
dup 84 /T put
dup 99 /c put
dup 102 /f put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
pop
%ADOEndSubsetFont
/UUNUKE+Helvetica*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 4{/.notdef}rp /seven /eight 
/.notdef /colon 6{/.notdef}rp /A 4{/.notdef}rp /F 3{/.notdef}rp /J 
9{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /.notdef /e 
/f /g /.notdef /i 2{/.notdef}rp /l /m /.notdef 
/o /p /.notdef /r /.notdef /t /.notdef /v 
137{/.notdef}rp]
UUNUKE+Helvetica nf
UUNUKE+Helvetica*1 [7.9701 0 0 -7.9701 0 0 ]msf
-69.534 202.371 mo
(Fig.2.)
[4.86807 1.76778 4.42978 4.42819 4.42978 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+NewCenturySchlbk-Roman AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKF+NewCenturySchlbk-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C368BC3322EAEF43482E98909A26D3AA10A10
E90987C0522E1644B9404E184D153290AC2AC956A74ED32A54CA7F9CEFDD308D
789DBE1C49F2> |-
/parenright <1C60D8A8C9B81F2C368BC3322EEAF87A88CDB5C1382A2D16526
FE6F4EB9A3B9D3AB26975DD8920E907F4179F5F27BE3812D592C6EC5EFD3DE0D
F14ACAED6C35D4E> |-
/comma <1C60D8A8C9B854D09AD70766E41E0E33C8605ACBE7471335FA3FDC23
D37C44240231B94D30864EA4E10E3BEFE050EC15643718AFCEFC20EEA8DFEB2C
2218E9141514E2D408237F9E8EE3AC1F2518DC632688A4C4C4E232FF> |-
/hyphen <1C60D8A8C9B81F2C3AE0F7E48C1BB6622FBE20A724C31732CFFFD87
CFB6C> |-
/zero <1C60D8A8C9B7EF32A0D5B6A4EE5D3EC4521733CE7FE3FECCEFE3116A3
2A269FD02460CDAD05B378D9ED480107EA9AA9E3AF55E9BC83D9D64C7A77B8A7
39D38AEA29C182C330F420B082DED3AF53D558A86DC511508E4DDAFA5F6869B1
4> |-
/one <1C60D8A8C9B7EF3257282EF3EEEB92F01EE7B32F7338EA85EE645F8ED2
72958B28EABD74B2AC9F7A902B819C67CA05CC3664FBD4E6731E3E5F6FC6AC07
5555D42B880A3008FE72> |-
/two <1C60D8A8C9B7EF325777E22F5A112FF9949165008E6D1CE12882CA1698
92E66560B37227CDE1B8A97433B87CF1818B9924130E2F1245896B43057FE6D5
A6AA7C15A93A3836C66C41223570CB74F98081A37380DB08849BFA3735FC2B6D
0DE79EB7D645C16952C1488781D8C5ECF90F60183CD0684A979BD0F53C45CAAC> |-
/three <1C60D8A8C9B7EF32A0D5B6AA76780E723361B9513A433CA7854C5C7B
38A77E90D7AECFF757BB400C5CE55AF44942E590841B157578E8A28EE0DD8FA8
ADF80532695B9B5896CF23ADBACD76BFAFD5C3D355EB94900A0542F6ACE690D8
8DE5B8C4C32BAE933305718881CAD0FECDB5ED12492AEA31D75F9DD5C71EEEAC
E0FB87D64A8473A54B50E60AEEE7C6645ACE53569E3AE24A0D841A60F5C40DBC
775DFBA121A645E56BF2C5FE326BA9EC38E0D0B8C44E9B4D1C851FE1FC29CDDA
133F80534B9498B1C3AECFB2D61532EEEA> |-
/four <1C60D8A8C9B7EF3257282EFC36A10F62A5529691098EEDCB503B64C13
D7F5AB6F8FC83B337FB49757C1C65F4A82BC67E2ED4C12D430DAD24444D06CAA
C86FB79B6B5F607B3E9FB0D38707E1FA0C00AF140F9E71E6E70C6A7934A632C4
2A62D52BC9F> |-
/six <1C60D8A8C9B7EF32A0D5B6A593D8C6CF7CB69AAC6636810135ED07DF21
65C95D036DE9AD3C2909CC839B4F74862A92A6C9BAE047A8544D0EE34E43C0FC
DD3EF4F918578582CE4C186BE3A7BB7D3B34B1C22F4C6E136EF282C45585186D
F321DC7162DFD51409D81C1909485919949BB0151A1EAB736D24F908110EC50B
618C8C6829200C432907BDF4004684B681A1E027BBB347183B865228350E3FEA
64535E0655574313A59B6A442BFE13B62E544A3A5C0EC89E50E61518BBEDF368
6DAE6AD0190BD8B2B0DFC6224DC0> |-
/seven <1C60D8A8C9B7EF324DF642F5A47FF209ED6F40C58D8E1F546698938E
D4744B14F5E5171841A20994F214AF4F04DF8CE24DC5EF605F780DF1B629D5A1
E79F50EDFD60D751D76A68FB72DEAD58E95B20CAD9AA9562C8D271295A4FEB3D
2A36C3711DA16C5D72660FDF5F3E9EF7173297A26F61A2D12CECAB54FCC1EDF2
E9BF5511195153F2C9428FA52046CA83972F0E873B149797B4A6BB86144301D8
60194C> |-
/colon <1C60D8A8C9B854D0F4C1662E794E27DCF8D7F7052A15AA707E73262E
045DB5768B2A7CA529CA2FDA76320BD9F473BBEE675FDBC6A2B28DC906FEA255
FA9A0A66CC687D2CE28C5905645BC83655C3E9B63B> |-
/semicolon <1C60D8A8C9B854D09AD707662CB279D7372DFF5480CC555FE5D5
D34759963E167BBC505EC12384FC9D64882D68280591AA3EE4A5554C20C85871
19935CD549DEF0F71963478ABB3722358B7D6CB2BCBA103E8894EFC6F0DA0519
CBFE069B7B542051A89F8B21F4E5988935FEB21FFB301524609B71E192F4CEBA
BD1ED2040208339BE9FF93CB902AA98527D4A3> |-
/question <1C60D8A8C9B77FE245524704395B9D79265C3BDFDF3DCE64D04B8
06A3E362603FD46D637A5A059CBD3DF61C36BC833C347E83EB86246F5139F856
51228294FF99EC7563FAC599177500B48C5FBD85AA656B5EF6760C8B4C0B1CA6
7763427F9DD86574913E538F48877848A8784C6162A3E02B1B1CF0D3295BBD34
0C58DE0A7A3F9092322565E3C1CC282833FFD6F0E8661> |-
/C <1C60D8A8C9B6079FE93EE79EE83623E2A83C8EAAC499D891EE7AF049AA70
CE0D29BC67EFCC5DE1489F46602F176E15B983EC5FCAB09F098BFB05E6C78AFA
6D261CC0E65391EC905294181386411DBB8581C06199C2F7E76016353300C21A
BDA2463C69C4A54BBBB66F79451DF1BF68232F620D39A615B5E4723A8E5B5052
386BB329> |-
/E <1C60D8A8C9B6079F1E6E28C317A04C128EFD7F73926618D86E88D89BD0C8
F31BDB47EE37954F57AF9C3DFB0651942FC35C92259D5C6525BFFA5214E6851E
401E83301FE8FC8D726FA07D6E6ACB5ADA7E563C6FEE2CF0FA222726F758BD47
CFAE40DD0C0B35A283DD48C231F1B1D6740F9B8365962F4759DE4F3D5AF78C5C
CFE6> |-
/F <1C60D8A8C9B64EDF880777C0340D43640F9854E725045637A58B787BAF3B
D63DC57F366E326EB9E3D0DA029A166F10D69E6760315AAE45432EEDF56F50C3
6BB8CB069008B29D4BC0951494F4943EF83F7135A87C2450D7BAD81F1785955C
C9457471D56CB866ED62CF21DC2C639242B73232F91A> |-
/J <1C60D8A8C9B7EF32A0D5B6AA8A16380ABD6292D1829A0E2394FD4C8D73D9
6F239155A57063319BAE6C066C8DFA5C427F7E556D73994E7E43719B7A01B782
F5403BCA59B1F5EB1082DC85E9C83122C39E51775FBF7AB4534410256112E4CD
BA7D429625387FD09EFED05905D85F03B5B09FF7009F98F123A97CB4CC4674BF> |-
/L <1C60D8A8C9B64EDF880777CE354E99ADEFF01E96B42EC472EDAD9587F4B9
A35415C0F1A956EEA12CA2A7C7104704D0682AF5CCE8FD2BDA0BB2A08059CA98
C91763E80BE3CD93E2642FAC52ADF216E4426305AC> |-
/M <1C60D8A8C9B5D6EF3EC3EE079A79DB0688F719229AD2C63192321073BEB2
BD8E2B4691BCF82DF8B4453E4717EE224FD3D7BFEC66C3D32327EFA570151C63
19AE21CA24346E8CEF3597385F06474A1C4A3891ADC4F58BFAB8A3E28B6CC6F6
BF42144E97CD549A574C025CBAC4BE46D23CA98F88B5547D60F7D96CE40BA9FD
4BED76AE11DEE5> |-
/N <1C60D8A8C9B6A283F4FB3B515690A5B84D34A421514D16D5320E43CD5144
9D92C99E8DFD1D41CDF9242914491AA21B1B53BD5DBF3A45901C91B6F791E391
50FC2861C0DADD6149886FCF570272DC624901927CDFFC9CB05BFDAB9B1CB718
8691D4BA13E00774A28408A639EABB87C8EEBFD647B87FDAA2F0D6FA707CA6F9
6E1F49CBE4411B9793F3> |-
/P <1C60D8A8C9B64EDF880777C017EBC6BC56BF2D764F26E77CBA25E71BD0B7
1F3AF3FF2F1825969255686A98F28A3375C919594692C2CAC16FA5EFF72408CC
DA7A2177D4FF34793E08FD9E40A24B0641C64A9037ECCD1644AC338C7E2DCD47
2F918F9E344764A2CF4720F5C0E1F90275D67F7B947A5A759DAE08B9B317A6BB
F06C07CD2E06ADED55098C8FD9624C028089B7E1> |-
/R <1C60D8A8C9B6079F1E6E28C317A04C128EFD7F73926618D86E2318D64B26
942A637A7D7115E18EF41908D872DCC719C62FA38C7D1F09083AA0A3ED356985
4B20C23F0C31150FAC77D1F4DFDF94873456BAFB6332AF5641B5034D5D090464
4B73302F59A243FE730861E47A8BDB5D41142BBBC1922C08E94D540763F835E1
60487C8098B7D5A08B9C28BB1BA401EBEC3518D3093D63061509806724A7700F
C8988E9E45EC0772239B2FF270699416D93481E3481D41C150D0914D38E1A6C6
8F36376F4865B2C0D5BAFA257586CC06B82993B77C9B> |-
/S <1C60D8A8C9B66B39DBD5A8045EA2921B5881BC49A185D833E43BE8AF41EC
921ABCF349AEC2253D0E4247E1AD49246DD8DB5A1BD136EA19F40F51BE885ACC
682E57A549DCBB695CB3D03919F64E27302CCBA6CF8C3CB317E923944E5B2545
DB61549C5CD92CA3FDB0FDDF4C9B996E6670449A766BFDA125D413E43B8975EC
B0108A6B67DD95EB887FBC876BE37B1480DDC65999ADD14F5A6D7BB8B907DE33
2CA85B4111367CFC691982C786C9F1491FEC1F20390DC4775FBD2595CC8DF925
C9772CD8645593653D6EBBC117588CD9C1AD8569253B09B8FB07C10D4316F167
46BAB8C24B5953> |-
/T <1C60D8A8C9B64EDF880777CE354E99AD6405CB636A205433893FEC5B675E
D6280288CBE0A0EB1B6A34DCE365F449C906A06021BAA530B5C674CA619018B1
EB5B0EA1DE51DFC4CE86F1086F82AC6E40CBD410D1A75B691210063788> |-
/V <1C60D8A8C9B6079F03666C378CB0CBE9B0A46453CD45DFD22E63096A0279
2D51035063B1B2D73166FAACE91BBB8D36FAF58ADFD28AAF37E0C595B66DE825
191344F7B04282EB3088F838443B1B8921C97C8B62F9E3426591C3D0CCEB7A36
EB6327CFA3E53401D44A9994400CD78DF04DBD> |-
/W <1C60D8A8C9B5FBBADCC7436682BA6C8BDF0BD11090238B6FFCC53A33C478
2EE773E677742D7FE32F8E2ADAA636EDE23DBCFE08A2F6A6BE39EEB23F39A97F
04BD277506AE59F465B845D3BEBF381395C0BD250125BCC01C916F578A497829
C3E0C3ED6808757941EE6AD8D95CCA43F2F581742B41338D72B14C5D603FBF5D
C1E4FB51E7C0B6A58816C1145CF9AB0C1E81406708257ECD5F3796752F7F86D0
C94A165120180B7C> |-
/b <1C60D8A8C9B7EF32A0D5B6A5D4358DA0EA6E4C63C75017C8D59D57F45A29
FAAE8D1728E386C95ACEF769792C460DFE4713AA41EE4A05C5DF29CCFEB7A527
4540B7266542EC6EE2552F758C32AF6B2D513611FD7FD954130388D442C927F7
99F927F4DAB18C16AC652C10406F8351FC7CB02FAB6D65524D6087A813FEB253
84211DE0E78508B91ABCAE3B4654> |-
/c <1C60D8A8C9B77FE245623FC01BE06AACFFB1E284500877FEB3448950247E
7D4BA890428A60A62DD745AA227720105C7A52055EE1A089FAD839026AD342F6
9390F076E82C13108F275B1A1C0CD2AE30D926016EC9CBCFF0625B2E020A6781
799E5385> |-
/f <1C60D8A8C9B81F2C46DB626C6B39508EDC32BB51ABDDC92AC585C189B321
74741CAC439C3BF5CB52EA1FC3F219FC0BE86914EF91768C09CCDE2A9EFA7E5D
C0ADD67ECB6C7AFDC6840004A3985B0DECE70936460548151A67093065293E07
733A0202AFA65127E703CAEE8AA3F16ED9A96E02D3C05527> |-
/k <1C60D8A8C9B7CA64569795489A6C84DD00DFAF4F6C7C3876E6C24D36A4CA
D8FB578D2A2FD2A20B2372137E7416FFA4E88C06D7DE98F6B13600F189797122
2569DF9A1BF5143F430108398A3BC92AFEF2D22180B5648F7B89AE19E46CC6E4
13095C2422709F776F97E35A4F1841D4CEEE4B73AE0E8B68BE2F1FE148C177DE
AFDEA10B8823B41ABFDB03073448FAA62BC01ADBF4AA166B44275C526E9CBC8F
9B3B871C8568AFE96AFFC8AA81943D6D96ECC8BB6749A4D6E9A321A9CB25176D
7DE045> |-
/v <1C60D8A8C9B78256B3EB580CE0438AF48636D44F69B05BBF18210A54606A
920D15C7D0A024CDC26812F36C950196E592097F6D4FC6DB4026B984F287B6E2
A2F39F2FC8D560F0C027C04B6753B783DD46B4DF88BA612C22ECF7FF7DA0F2B4
7ADF88A2E4EBBAE7D9C6> |-
/w <1C60D8A8C9B6FF8694C16FEA2F906376E8A29B657BAA7670EDA6A00FC8E8
8879DBDE3DA3140AFE2A38A2520F068B547349A35DEB837E58FEAC08E03DF7F7
45FF2E97849EF2198B7381C510688AF911054CD9DEC0CB9E99142D2CB6E0CD19
951ECE2C3BA69B3AE2B160BBE64E8A38C7EBCDA0BBE3CD22AA6E7592DCE763FA
56B7CD287CD7937B9525716E7F6B31A7516BB0F3F3B3DEF6FEFFD85A928AEA85
4272DC> |-
/x <1C60D8A8C9B78256AE267AA480272D96EF0F618D93EBA4CE699CB347C350
AF86825DF9AE51CF3CAE7406460C4FE489A042F6FEA8A52CCBFE03E6715B45D8
9016B12733BA5B408493011CD3800DF4CEA09B61215200D1239B27C842C7B604
44BDFEB51E9D288EA3B3FA42B0117F6519A5F013F019612C6858F7E3DB4EC16C
47FFC712B40C813716995B732BFCE35876AC7A58BCDB331DAAFDDDD1E7C4BEB1
F4CCE5946232C4DC896C9280BC81B3CF6DBD4CD5AF790D28DF482FCFDAF8D2F9
56A9792BDA2897998800839EF167680C6112026E77504702D024C3B4A399038D
2DE5AA49E72DC4> |-
/y <1C60D8A8C9B78256DE28B4B90C3C4B68D876D1D68230B7ACC30903138497
745BD36F21550328A271B815823F02C099A2A0494996944F6497CD089D8F3E66
113A32EB41BC3166AFCFE530C8919AE14A14E54A77113C3136B3EF9DC6AD5438
00FAD55E7C0FBC171900FB91118DEC634460FAAF99FCF59EA5D1750230EE7FAB
A08541D27C377920AE6AF670D7F0D78F13D0D5F74B9343092E9C5E0D19F9B42D
A0F908293754367F413D7096527DA155460E1BD63DBD91105DBD50CCE06F> |-
/fi <1C60D8A8C9B7D8BE6A6C4307816DC29BFF73138C0D0DFBB3772F7D480E8
8DE17A69DD2ADC2AD406D0F188408ED9F80F4141E4B801B235ECA8AAB76E9F82
44A34E2BC8CA7F377F3B515637A7566B3E86805D32FABCA900BE071E7BD4BFDB
EA6B51D39D51F0EE9A7B511EE19742BAF6C7064E7FC272E50F9C9A8B0BBC7070
DF7E07098A6CDBF5CCEEC1CA1A2DC96B569C72656A6326C80AE845E4915ACD2B
28BB524BAE2AA5EC662C8E49061DBB44FAD62CC3146AD869FEDE24AEEEFFC1A3
157025047E819E47D0BBB50237C819547C5F805F24133ECCFB07BE589> |-
/fl <1C60D8A8C9B7D8BE6A6C4307816DC29BFF73138C0D0DFBB3772F7D486A6
7AE2285B2842DE2A2957BE3DD7C5992489F1B6D59A40E1DA3697D7669F90F2E0
88C521FE709B07A616DE3E182DEB5D39B24184CF45BDCEED9CABC4CAED5C4987
9ACF93E9442DA4031B96814068DFC71CF11EA2D98DC6AE586667C8E414119C25
336B2CD8520236590B7FD7F75BD953B213319F7B1AAC5E3340E356E7B4405AE0
5D0958093706A1EED088B8E1A48C9A30B914BE8B337616A6DEA9F2F7A4E58C4F
7C7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKF+NewCenturySchlbk-Roman /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 59 /semicolon put
dup 63 /question put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 98 /b put
dup 99 /c put
dup 102 /f put
dup 107 /k put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 174 /fi put
dup 175 /fl put
pop
%ADOEndSubsetFont
/UUNUKF+NewCenturySchlbk-Roman*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /three /four /.notdef /six /seven 
2{/.notdef}rp /colon /semicolon 3{/.notdef}rp /question /.notdef /A /.notdef 
/C /.notdef /E /F 3{/.notdef}rp /J /.notdef /L 
/M /N /.notdef /P /.notdef /R /S /T 
/.notdef /V /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y 52{/.notdef}rp /fi /fl 
80{/.notdef}rp]
UUNUKF+NewCenturySchlbk-Roman nf
UUNUKF+NewCenturySchlbk-Roman*1 [7.9701 0 0 -7.9701 0 0 ]msf
-40.1132 202.371 mo
(Control-\257owsemanticsforthemessagepassingpatternofFigure1.)
[5.75362 3.98425 4.86887 3.09964 3.53793 3.98425 2.5098 2.6532 4.86887 3.98425 8.41563 3.68933 
3.98425 7.08467 4.43057 4.8689 3.09961 2.50983 3.5379 5.92258 2.65479 3.98425 5.75122 3.09964 
4.86887 6.20154 7.08389 3.98425 3.68933 3.68933 4.4306 4.27917 6.20154 4.5741 4.43057 3.68936 
3.68933 2.50983 4.86887 6.5076 4.5741 4.43057 3.09964 3.09964 3.98425 3.53793 7.10132 3.98425 
4.8689 5.23798 2.51141 4.27917 4.86887 3.53793 6.17923 4.43057 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-127.62 222.963 mo
(location)
[3.13725 4.98031 4.4224 5.5382 3.87453 3.13725 4.9803 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+NewCenturySchlbk-Italic Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /HAAAAA+NewCenturySchlbk-Italic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1991 Adobe Systems Incorporated.  All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle -16 def
/BaseFontName (NewCenturySchlbk-Italic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-166 -250 994 958} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 722 737 451 466 690 705] def
/OtherBlues [273 282 -205 -205] def
/StdHW [45] def
/StdVW [80] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/comma <1C60D8A8C9B854D088EA7C1B1562E7CC29425BA228AC8B8605D6B575
52E00F6BA749AB56E014BA00DB5AF2BC75512C4009F50E2808604E0D6F9AD8> |-
/hyphen <1C60D8A8C9B81F2C3AE5E5676AA4F053B3E5A5CA6A58DF989F425AE
8B864C365> |-
/period <1C60D8A8C9B854D07F2CCA421D4256278866EC2F23B0BE726E1307E
C2F312D629E7BE85896D912B961D1D5> |-
/C <1C60D8A8C9B6079FE93EE79EE83623E9F3CBC10D36E29A1003DB18C723CD
BCCE00C6A3347C54C784C36E4CECDC4A48F40932CB0DC7B8FC22ED668EBA9475
1D5220626A01BA144A28709A8364E69B0AFBC27F1BE2CEC6377B97CDC7DB4BCE
4ACE57109A259009894D683344> |-
/D <1C60D8A8C9B6FF86896095612955EB0DDFFDD4E4FC559709D8C32BF960B8
FA57ADCB9CB75ABDA366B9C276C948BD99323BE93BDF27CEF26B018873151DF6
B5ADFD4F422B3B91D6ABB6915BF584C44C876FBACFE610F22416EEC6500A8F85
85E22A8E16233750653A4D1B396983845BE240694BD81F4C13FD80B49B9EE1F3
B1> |-
/F <1C60D8A8C9B64EDF880777C0340D43640F9854E82C80CA47EDAAFD7F9612
10A5DF157926851D475E82F7CA9135D38DD2A0EF1C5CE7AD862302CD87F8AF4B
347C250E811C10F706BF67A2071F62D591E4AF39715F2D7CDC5672BF01E7EAC1
5F99F77604C705CE3B71DBE7AF4AE1EBAF08B537204E1A27272EC80D0E7590FD
7040E759F4DB5D1F90589233A29C09E83EAE5C56> |-
/S <1C60D8A8C9B64EDF7FC53CE5D0A0E75B293273EFAB0EADF3DA6A67231914
655727F98E1DC2A1E16FEE78A0973677E87DD81D11FCDD99E8A4DC82D1C5960B
9F2C2D3AC31B5B47B4DAB1AA9F80CA02D3CE6BEF8A2663764882F15156CB38F6
85593C5B64B40A50609F540D30CA8A304D140FD87D6DEE00ABD5BE876AAF3579
7629DDEBFCFECE21824F595E9E1CF19521522221C2448DCBB4B1BB3CBE26865E
087003B81FC4EE89F5AB46B5DC93AA23B1F4AB580202C331E851B05601EAA26A
BA8DE1D1B00BC633CBA68618548C3E90F4777FE4BEEA947BD2> |-
/a <1C60D8A8C9B7FD84115EE72F89F36FCFFF092BE54FC8B131BA3B6098DA98
587DBB9C1DEF9AA07C8336AD8B0EBDFE0311AEE34B780FC19AE16FD78EB1CC0A
F35213D61BAFE40960391AB3B92D959BCF51E87C09104960BA4A65657A8EB0D1
33DD7DFE6BE19A4433BB5121CED4E5C58E41C616FBF01DBCD60D1D4869F3E320
F3918CDEA3426BAD551E7754A913B53811529C22F8EAE7BEB134CA85AA944F62
568CB328D6EB496DB493900DA4AA3E19B5E5F9B65996506472D7F713434CCA03
6C5593B30D0B5C9A4D1EA280219E434388F4> |-
/c <1C60D8A8C9B77FE2451D9B3161B82AA8B84D987D9DE79C6FA35D9BBE72FC
119E205AC23F7E49471FE932A5CD8CD764B4AD48C450B0C4E36421591175872A
913E63DDCB0CD008A28AED218E807843A9D9D87F14840689E23F94C2B471C190
76386BA16D9AF0CE1A64> |-
/e <1C60D8A8C9B77FE2451D9B3161B82AA00BF8E4C405FFAC543A9AECD0EEF0
FCB834B0A4C2F6AAB7901C2F398E0205ED1928E2C562F348A61921216E2137A7
10FB0FD45BBF806987B4866CD410E4098F3948735ED2833EAE3857F6C76FDC8C
A942E2E244EF2ED172FF7F6A9317348B> |-
/i <1C60D8A8C9B81F2CB10DD09E7C5B141CA3242ABB87EA18A544F6C7035692
48F0E81E63E816A3A1B1ADF51D785AE4AC4AE1FE390071843F363B485923C9A9
4E624BD3CC6668F639655A74DAAE6091995928BEC8E288A2D58EB99134833A61
6374D2EEEDEED98405893E16ECF8611C71E2D1F5AD64E516A32B85E5143455E8
93CB003DE2D004632A4900A16B454D6A9921> |-
/l <1C60D8A8C9B81F2CB10DD09F54FDD3399BA3DF47C73D79B618E91A75D2C2
0BC64EFD872E208A442F5B4E8246AF45AFF40408071BFF51464DBFA4EE1986DE
774DA1A2B5A7CE9C603356DD9876751CEE8313B0706BDBAABE9B18CAE3FC44CF> |-
/m <1C60D8A8C9B59F856C25D66665D15FA0DDC87F7EFA2E62873EC5AB326B55
BDF823B8EED721979BD228C8859F53DE04BADC3725F813DCEAC8AAE190B07C42
90EE89E6A6F6341F17098A7AFC521E396856A2256E6A3A6BE18E085A697F9D93
2CBC2623CF7B23B97D8E53B641F0A260F7D1B92D40E07D93304AC6F2D3C75606
EA1CAD8418EC2FC9AE9C86AAA67FC4328DADB156C0192E02CE19E13BFBE6DB52
D2F552F0BC1CEC25D998B41A566788D63ADF289462296B36951C42975EB9D3E2
84F4B375838D10133E04B6D320CCD001CCB3BD569FF61615A8C50D6D59473874
B8514DD89C4E6456F7E7CC55615AF7BD6A1F5E5B80> |-
/n <1C60D8A8C9B7D8BE9D4226A7A351E871D9AF32218D4C6289E3F057DA6AA2
E9ECB556F5F6F170620D2892E97A54EE316C7971F7CDFF1AB82F53F71E2BB36E
ACA78D7541590BD56A7A59D2F6E01E9340E7704578E9FBD92D1024C512532D10
92D7941C04435DEAD3EEAB1B169D5E6A0F66BB0E78FF44E46827B4A3E1F3AEE0
3BA54013B96A7A717CB259BA05C741843DCB55CD4E12819036C908737F81585A
30BCAB6B5FB9F2627AD6919BD85B79791208B2> |-
/o <1C60D8A8C9B7A73D32E4548B10C91BF34C05577A306E55DE2CC40286F7BC
9B68D4538D50BE4C0123C2C5B32FC7A3E3A70E9996890FED9AF8CBC30ED3691A
A4C1DD5CF868EEDD130F6E2F17DEC0D63E820E62E732B31E57714B4CAD> |-
/r <1C60D8A8C9B77FE299176F631BAAD80B0BBAA01FA0F7562D0B66722F4DD0
0F5D8E9E4A8AEFC0930B9E6CCFA1E34DB53DFEB3EF6F7B2EDB2A5D25B5B6598B
21BA3FCD9F3B4A21EA9EFF2A40E20168DAEC73D32DE221C81A74D1E1322F2D7E
5FB45DC0241464D18EBB4B96CEEC215D4B810EBD3C0DBE> |-
/s <1C60D8A8C9B77FE2450B16570ACF29F237C9EEC7FED79FB3C847E3206007
A1F7927521B635FEACE54DB01E98F846B081A9ACF0ABC97F0A5D8D0251EF303F
B2FC32AE6CE8358A4F90438EA4B0C3218011D8CCA6C992542ABE4995BC254DBC
88CA2D3ED871DF4D5BC3E5C13631C33ABC813C38A9586C23872A40A0B65F8B14
6DBF044858494313F35E21BF18BAE7961F66F1F896B77A2957A5C23C4B2160E2
8E67E3EBF0E3BA8466077B7453B03A93ADFD6EB73B> |-
/t <1C60D8A8C9B80A3F090E5EC73E512A67C93955E8D5AD5F8E224088E46958
027EFE199C067BFF3923D3164AC85CC86927DCA51ED00E221DD2E518A1E13E4C
E91E41F626BCFA531A37E321A944015015CA1BBE05C5F73A0391D79895ED2818
0D> |-
/w <1C60D8A8C9B6FF867E445CDBAB25956E66D72AA666A7E7F19F7D08A1844E
1F476D3B5FF035BB0F65832DD200683B83F0625F9FE297609B0E8FB89C25B8EE
F628706B8A49AE80C8B7C9C3F5F3AC74A3C49220F6577AD3E26144C8BECBF409
8FFAE85EBF013AC7787BE622A1966AB214133ADEF3528495AC3D91ADD3E62487
1504A2BF88CDEA39E97EA2F814839112AA993E44543E8C082B240D7C3E9245D0
CF76442D5173918CE10A710E53BAB8E5C5BC10616A8CA0F58EF8A19A4B313606
1D9C141FA1CBFB> |-
/x <1C60D8A8C9B7A73D328D2FDBFD1DEAD6DB940811358A18A04979E733584F
44E745AAD3C1DABAAE7D93A5D564B3952AE105343F38D5D0F5588D6EEC354D6E
EB04C9E2A3BFF814821052FAAE5AEFF4FFCF9096D79FB2B659959E5A575E0559
025B64D2567F4E0BF688BC7DB3D0E7E5EBB43A43A012344B060BB08B2B8B9379
BCD15EAAE3789D2647B311E67D81CB8A82C1FED2D0849BB89C4FA8953B96D1DF
A9D0C48DEB405F3E2ECFCA61E49C02EC7E3ED12E7188E266C81B570E52E20327
08463BFD11D4768FEF763C185046AB92E152F53BB48B22> |-
/y <1C60D8A8C9B7A73DB58D81521E52BA3DDC381A15EA418F0FECD9B91D69AD
CD118737AE9ED356FADC9D060491D0F71D546BC8B6892487D74D8FEF3442A671
AE7D12C9A2897EF4CA0B975FCDB48141FA9D9AA9AF43F3DFC39E9D7FDC5286DB
35F30C173F217E181B03B3AF6283310F8F8A025AE541BEB640593793CC12203D
36DF889FB09FCAC6E8B70CDC97136EC0B2F9DBFEA0D03CEED7BD18437B7D> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKG+NewCenturySchlbk-Italic /HAAAAA+NewCenturySchlbk-Italic findfont ct_VMDictPut
/UUNUKG+NewCenturySchlbk-Italic*1 
[44{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp /C /D /.notdef 
/F 12{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t 2{/.notdef}rp /w /x /y 
134{/.notdef}rp]
UUNUKG+NewCenturySchlbk-Italic nf
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-87.7228 222.963 mo
(x)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-78.9567 222.963 mo
(into)sh
-57.4225 222.963 mo
(register)sh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-18.3771 222.963 mo
(r)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-14.292 224.457 mo
(2)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-9.91803 222.963 mo
(.Memorylocations,forexample)
[6.22762 9.40471 4.97929 8.85484 4.97931 4.42139 8.81992 3.13626 4.97931 4.42142 5.5372 3.87354 
3.13626 4.97931 6.08508 4.36459 6.23657 3.32147 4.97931 7.8844 4.97931 5.34793 5.5372 8.85486 
5.71655 3.13626 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
143.002 222.963 mo
(x)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
151.768 222.963 mo
(and)
[5.53522 6.0831 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
173.215 222.963 mo
(y)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.148 222.963 mo
(,aresharedbythe)
[6.23657 5.53622 4.42041 8.45126 4.60968 6.08408 5.53622 4.42041 4.9783 9.18958 5.53619 8.81097 
3.87253 6.08408 0 ]xsh
-127.619 233.916 mo
(twothreads,whereastheregistersareprivatetothethreadholdingthem,here)
[3.87354 7.74891 7.74891 3.87951 6.08508 4.4214 4.97931 5.53722 5.71658 4.36459 5.55315 7.74892 
6.08508 4.97931 4.4214 4.97929 5.53722 7.40718 3.87352 6.08508 7.7489 4.4214 4.97931 5.34793 
3.13626 4.61066 3.87354 4.97931 4.42139 7.38925 5.5372 4.42142 7.76682 5.71661 4.42139 3.13626 
5.34793 5.5372 3.87354 7.75787 3.87952 7.74893 3.87952 6.08505 7.74893 3.8735 6.08508 4.42142 
4.97931 5.5372 8.49615 6.08508 4.97931 3.13626 5.71658 3.13623 6.08508 8.13647 3.87952 6.08508 
4.97934 8.85483 5.53522 6.08511 4.97931 4.42142 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
240.411 233.916 mo
(T)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
246.492 235.41 mo
(1)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
250.875 233.916 mo
(.)sh
-117.656 244.878 mo
(ThesnippetinFigure1isattheheartofamessagepassing\()
[6.64314 6.08508 7.86647 4.61067 6.08508 3.13625 5.7166 5.71658 4.97931 6.76767 3.14124 8.97324 
6.54352 3.13625 5.34795 6.08508 4.42139 7.87346 8.42436 3.13626 7.49683 5.5372 6.75871 3.87354 
6.08507 7.86649 6.08408 4.97931 5.5372 4.42142 6.77661 4.97931 6.20068 8.42435 8.85587 4.97928 
4.61069 4.61066 5.5372 5.34793 7.87546 5.71658 5.5372 4.61066 4.61069 3.13623 6.08508 8.23511 
0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
165.143 244.878 mo
(mp)
[8.29776 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.976 244.878 mo
(\)pattern,where)
[6.20065 5.71658 5.5372 3.87354 3.87354 4.97931 4.42142 6.08508 5.66074 7.74893 6.08508 4.97928 
4.42142 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
256.439 244.878 mo
(T)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
262.521 246.372 mo
(0)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-127.62 255.84 mo
(would)sh
-97.6436 255.84 mo
(writesomedataintomemorylocation)
[7.74892 4.42339 3.13824 3.87553 7.28067 4.61266 4.98131 8.85681 7.28067 5.71858 5.5392 3.87553 
7.84853 3.13824 6.08707 3.87553 7.27171 8.85681 4.98132 8.85681 4.98129 4.4234 7.66824 3.13824 
4.98129 4.4234 5.53918 3.87555 3.13824 4.98129 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
76.3841 255.84 mo
(x)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
81.6852 255.84 mo
(,thenseta\257agin)
[5.0849 3.87952 6.08508 4.97931 8.38843 4.61664 4.97931 6.17392 7.83856 6.08408 5.5372 7.65033 
3.13623 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
165.143 255.84 mo
(y)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
170.075 255.84 mo
(.)sh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
175.151 255.84 mo
(T)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
181.233 257.334 mo
(1)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
187.911 255.84 mo
(wouldthencheck)
[7.74792 4.9783 6.08408 3.13525 8.01895 3.87952 6.08408 4.97833 8.3974 4.34668 6.08408 4.9783 
4.34668 0 ]xsh
-127.619 266.793 mo
(ifithasthe\257ag,thenreadthedatain)
[3.13725 6.08409 3.13725 6.64214 6.08607 5.53821 7.38924 3.8795 6.08607 7.74892 6.08607 5.53821 
5.0939 5.55315 3.87453 6.08607 4.9803 8.86465 4.42239 4.9803 5.53821 8.49615 3.87453 6.08609 
7.7489 5.71558 5.53821 3.87454 8.31577 3.14124 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
51.0328 266.793 mo
(x)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
56.3339 266.793 mo
(.)sh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-117.656 282.732 mo
(Control-FlowSemantics)
[7.192 4.98031 6.08607 3.50589 4.42239 4.9803 3.31648 3.31648 6.64413 3.31647 4.9803 10.7915 
6.64214 4.42241 8.85583 5.71758 6.08607 3.50589 3.31647 4.42241 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-6.7393 282.732 mo
(.Theinstructionsemantics,inourcase,translatesinstruc-)
[5.82314 6.64413 6.08607 8.00993 3.13724 6.08609 4.61166 3.87451 4.42242 6.08606 4.42239 3.87454 
3.13724 4.98032 9.12567 4.61163 4.98032 8.85583 5.53818 6.08609 3.87454 3.13724 4.42239 4.36459 
5.80521 3.13724 9.1167 4.98032 6.08606 7.461 4.42239 5.53824 4.61163 4.797 5.80524 3.87454 
4.42239 5.53821 6.08612 4.61163 3.13727 5.53821 3.87454 4.98032 7.65027 3.13724 6.08609 4.61166 
3.87454 4.42242 6.08606 4.42242 0 ]xsh
-127.62 293.694 mo
(tionsintoevents,whichrepresent,forexample,memoryorregisteraccesses\(i.e.,reads)
[3.87354 3.13625 4.97931 6.08508 6.90306 3.14124 6.08507 3.87354 7.27171 4.97931 5.34795 4.97931 
6.08508 3.87354 4.36459 5.07594 7.74892 6.08507 3.13625 4.34668 8.38844 4.4214 4.97931 5.71658 
4.4214 4.97929 4.61067 4.97931 6.08507 3.87354 5.08493 3.31546 4.97928 6.71381 4.97931 5.34796 
5.5372 8.85483 5.71661 3.13623 4.797 5.0849 8.85486 4.97931 8.8548 4.97931 4.42142 7.65927 
4.97931 6.72278 4.42139 4.97931 5.34796 3.13623 4.61066 3.87354 4.97931 6.71381 5.53723 4.42139 
4.42139 4.97931 4.61072 4.61066 4.97931 6.92102 3.32147 3.13623 2.76764 4.797 2.77161 5.05798 
4.42139 4.97931 5.53723 5.71661 0 ]xsh
-127.62 304.656 mo
(andwritesfromandtomemoryorregisters\),branchingdecisions)
[5.53721 6.08508 8.49615 7.74891 4.4214 3.13625 3.87354 4.97931 7.38924 3.32047 4.4214 4.97931 
11.6284 5.53722 6.08508 8.49615 3.8795 7.7489 8.85583 4.97931 8.85483 4.97931 4.4214 8.13649 
4.97931 7.19098 4.42142 4.97931 5.34793 3.13626 4.61069 3.8735 4.97931 4.42142 4.61066 3.31549 
5.54416 5.5372 4.42139 5.53723 6.08508 4.34668 6.08411 3.13623 6.08508 8.14545 5.71655 4.97931 
4.42145 3.13623 4.61066 3.13623 4.97931 6.08508 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
172.848 304.656 mo
(,)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.392 304.656 mo
(orfences.)
[4.9783 7.19998 3.31448 4.9783 6.08411 4.42041 4.9783 4.36459 0 ]xsh
-117.657 315.609 mo
(ConsiderFigure2:wegiveapossiblecontrol-\257owsemanticstotheprogramin)
[7.19101 4.97931 6.08508 4.61066 3.13625 5.7166 4.97931 9.28813 6.5435 3.14124 5.34795 6.0851 
4.42139 9.84506 5.5372 7.63235 7.7489 9.84604 5.34793 3.13626 5.34795 9.83707 10.395 5.71661 
4.97928 4.61069 4.61066 3.13623 5.53723 3.13623 9.8371 4.42139 4.97931 6.08508 3.87354 4.42139 
4.97931 3.13623 3.31549 6.08508 4.97931 12.6266 4.61066 4.97931 8.85483 5.53723 6.08505 3.87354 
3.13626 4.42139 9.47742 3.87952 9.83707 3.87952 6.08508 9.83707 5.71661 4.42142 4.97931 5.34796 
4.42145 5.5372 13.7345 3.13629 0 ]xsh
-127.62 326.571 mo
(Figure1.Todoso,weproceedasfollows:eachstoreinstruction\(e.g.,)
[6.54351 3.14123 5.34895 6.08607 4.42239 8.85576 5.53821 6.64206 6.09322 8.84677 5.71759 8.85576 
4.61165 4.797 6.6331 7.7489 8.84679 5.71559 4.42241 4.98029 4.42241 4.9803 4.9803 9.61197 
5.53819 8.48712 3.31647 4.98035 3.13724 3.13724 4.98035 7.74988 4.61169 6.63312 4.98029 5.53821 
4.34668 9.96252 4.61169 3.87451 4.98035 4.42239 8.84677 3.13727 6.08612 4.61163 3.87457 4.42236 
6.08612 4.42242 3.87451 3.13727 4.98029 9.96252 3.31647 4.797 2.76862 5.09393 2.76862 0 
]xsh
%ADOBeginSubsetFont: IAAAAA+CMTT10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IAAAAA+CMTT10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMTT10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 114 /r put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-4 -235 731 800} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 611 622 431 440] def
/OtherBlues [-229 -222] def
/BlueScale 0.0479599 def
/StdHW [61] def
/StdVW [69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/one <1C60D8A8C9B78E05996B35731BD1E8649ABE00B4A62CA06EFFF6A69179
B83E2350F8D68EAD6865F6D8537E41F0E30FE946EE08B7943FE12AABC935EC50
D487D4B94DA6881ACD175F5D02F7926A03A6A7857F69CA1B3AEACC576ECE133B
94CCC57736> |-
/r <1C60D8A8C9B78E05996B35735C4B10F0A68C733837FFC46D15E711585D69
409D476B4E1B79D899A1EBE7F07D42FC0D7F3AF51B20EA4BE96332191606B9F9
30E6A59EE195CD4F0E430523A60FA98B36B2D8D170EE2CB19C9F94E68C957715
7726B0DF61D35FB969298349003E15248E2E23535954CBD18C62CEB28D8079F7> |-
/x <1C60D8A8C9B78E05996B3573566568995105A112EC758F266EB06CA3D030
D24193382A89A5EF5D11E36C2DB4A4D3E11F57036BAB7F8643E2D88760A64A76
20AA8F58DD7AAD84A999CEBD138256AF5276829F5EF2F7EBAE1D157FAE0734E6
C7087C366BC363834BDFEC21C84A88208EC7054A8B9EAC0C20BC1441822D6372
A252B0319D772C186FDD8B3CADAB9A0E90A21E7C08A8467C30BB500007> |-
/y <1C60D8A8C9B78E05E95DE290973D6E363A47F2CED9B1B42B6B0D762D57F5
2FBD58655FD8922D99AA453DD21045F754FFEA2D25D7125E3D7E2AAE2CFF8D51
302B9D7F6E12FC2D0713B7975A8C09CE6D90ECF6E2C336D53FAC96C12F0BB1FC
5944E208C4CD65ED837F7D0DBB7DB32B90CC8E56739588036489AC8F0D82C118
47A9A533C31B5732EE64C2CEC44DC4C3A52323257691B77E20476EC17EC2BE0E
0276> |-
/.notdef <1C60D8A8C9B78E051C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKH+CMTT10 /IAAAAA+CMTT10 findfont ct_VMDictPut
/UUNUKH+CMTT10*1 
[49{/.notdef}rp /one 64{/.notdef}rp /r 5{/.notdef}rp /x /y 134{/.notdef}rp]
UUNUKH+CMTT10 nf
UUNUKH+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
204.329 326.571 mo
(x)sh
%ADOBeginSubsetFont: JAAAAA+MTSY Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2024 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JAAAAA+MTSY def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1992, 1993 The TeXplorators Corporation and Y&Y, Inc. (508) 371-3286. All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (MTSY) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /equal put
dup 195 /arrowleft put
def
/FontBBox {0 -954 1043 796} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 465 484 501 506 657 676] def
/OtherBlues [-209 -186] def
/BlueScale 0.0479599 def
/StdHW [50] def
/StdVW [50] def
/StemSnapH [20 50] def
/StemSnapV [30 50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/equal <1C60D8A8C9B6C180329C486F337E2637810D8548FE31FA7E089C659A
5FA4521910F4A25ADF4E42AFDF85360EA65D> |-
/arrowleft <1C60D8A8C9B54D64091E48E4827721D215DDA0C1E8BAA03B38CD
86FE83939F6CA3AD022FD77D7D22ADD4F2B6CC8EDFAD95E0788BB960EFBD3E68
2D4D6FFE571F0C9C27C7> |-
/.notdef <1C60D8A8C9B81F2CC3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKI+MTSY /JAAAAA+MTSY findfont ct_VMDictPut
/UUNUKI+MTSY*1 
[68{/.notdef}rp /equal 126{/.notdef}rp /arrowleft 60{/.notdef}rp]
UUNUKI+MTSY nf
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
213.852 326.571 mo
(\303)sh
UUNUKH+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
229.088 326.571 mo
(1)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
238.187 326.571 mo
(on)
[4.97733 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
253.118 326.571 mo
(T)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
259.2 328.065 mo
(0)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
263.583 326.571 mo
(\))sh
-127.618 337.533 mo
(correspondstoawriteeventspecifyingamemorylocationandavalue\(e.g.,Wx)
[4.4224 4.9803 4.4224 4.4224 4.98031 4.61166 5.71758 4.9803 6.08609 5.71759 8.21712 3.87952 
8.54094 9.11676 7.74991 4.42239 3.13725 3.87453 8.54991 4.9803 5.34894 4.98032 6.08606 7.46107 
4.61664 5.71758 4.98029 4.42242 3.13727 3.31647 5.34894 3.13727 6.08609 8.9285 9.10779 8.85587 
4.98032 8.85583 4.98029 4.42242 8.93747 3.13727 4.98032 4.42239 5.53824 3.87451 3.13727 4.98032 
9.66562 5.53522 6.08609 9.29715 9.10779 5.34897 5.53821 3.13727 6.08606 8.5589 3.31647 4.797 
2.76859 5.09393 2.76862 6.34515 9.77234 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
247.504 337.533 mo
(D)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
255.271 337.533 mo
(1\).)
[5.53821 3.31647 0 ]xsh
-127.618 348.486 mo
(Eac)sh
-110.54 348.486 mo
(hloadinstruction\(e.g.,)
[8.22604 3.13824 4.98129 5.53922 7.83862 3.13823 6.08708 4.61266 3.87553 4.42339 6.08708 4.4234 
3.87552 3.13824 4.98129 8.21709 3.31746 4.797 2.76959 5.09392 2.76961 0 ]xsh
UUNUKH+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
-4.31732 348.486 mo
(r1)
[5.22931 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
8.91301 348.486 mo
(\303)sh
UUNUKH+CMTT10*1 [9.9626 0 0 -9.9626 0 0 ]msf
22.6295 348.486 mo
(y)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
29.9829 348.486 mo
(on)
[4.97733 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
43.1774 348.486 mo
(T)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
49.257 349.98 mo
(1)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
53.631 348.486 mo
(\)correspondstoareadeventspecifyingamem-)
[5.44449 4.42139 4.97931 4.42142 4.42142 4.97931 4.61066 5.71658 4.97931 6.08508 5.71658 6.76758 
3.87354 7.10135 7.65924 4.42142 4.97928 5.5372 7.85657 4.97931 5.34796 4.97928 6.08508 6.01251 
4.61664 5.71658 4.97931 4.42139 3.13626 3.31546 5.34796 3.13626 6.08508 7.47894 7.65921 8.85486 
4.97931 8.85483 0 ]xsh
-127.62 359.448 mo
(orylocationandaundeterminedvalue\(e.g.,Ry)
[4.9803 4.4224 8.09065 3.13725 4.98032 4.42239 5.53821 3.87453 3.13725 4.9803 8.82878 5.53522 
6.08607 8.46028 8.27097 6.08606 6.08609 5.71758 4.9803 3.87454 4.98029 4.42241 8.85582 3.13725 
6.08607 4.9803 8.47823 5.34897 5.53818 3.13727 6.08609 7.72198 3.31653 4.797 2.76859 5.0939 
2.76862 5.49936 7.19202 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
89.4077 359.448 mo
(D)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
97.1745 359.448 mo
(?\).Notethatthememorylocationsof)
[4.42142 3.31546 5.5173 8.11853 4.97931 3.87354 7.71304 3.87952 6.08508 5.5372 6.61526 3.87949 
6.08508 7.71307 8.85483 4.97928 8.85486 4.97931 4.42139 8.09961 3.13626 4.97931 4.42142 5.53717 
3.87354 3.13626 4.97931 6.08505 7.35339 4.97931 0 ]xsh
-127.621 370.41 mo
(theeventsaredeterminedbytheprogramtext,aswellasthevaluesofthewrites.For)
[3.87354 6.08508 7.60545 4.97931 5.34795 4.97931 6.08508 3.87354 7.24478 5.5372 4.42142 7.61441 
5.71658 4.97931 3.87354 4.97931 4.42142 8.85483 3.13623 6.08508 4.97931 8.36963 5.5372 7.97409 
3.87354 6.08508 7.60544 5.71661 4.42139 4.97931 5.34793 4.42142 5.5372 11.5109 3.87354 4.97931 
5.34793 3.87354 5.39075 5.53522 7.24478 7.7489 4.97931 3.13626 5.76041 5.53519 7.24478 3.87952 
6.08508 7.60544 5.34796 5.5372 3.13623 6.08508 4.97931 7.25375 4.97733 5.93961 3.87952 6.08511 
7.60547 7.7489 4.42142 3.13629 3.87354 4.97934 4.36459 5.39972 6.0932 4.97931 0 ]xsh
-127.621 381.363 mo
(reads,thevalueswillbedeterminedinthenextstage.)
[4.4224 4.9803 5.53821 5.71759 4.36459 5.55315 3.87453 6.08607 7.74892 5.34894 5.53821 3.13725 
6.08607 4.9803 7.39821 7.7489 3.13724 3.13725 5.90385 5.53821 7.75787 5.71759 4.9803 3.87453 
4.98032 4.42239 8.85583 3.13724 6.08606 4.98032 8.50513 3.13724 8.85568 3.87454 6.08609 7.7489 
6.08411 4.98032 5.34894 6.65112 4.61166 3.87454 5.53821 5.34897 4.797 0 ]xsh
-117.658 392.324 mo
(Additionally)sh
-61.8881 392.324 mo
(,wealsohaveimplicitwriteeventsWx)
[6.08415 7.74892 8.28889 5.53522 3.13824 4.61264 8.28889 6.08408 5.43559 5.34596 8.30681 3.14124 
8.85684 5.71857 3.13824 3.13824 4.4234 3.13824 7.18213 7.75089 4.4234 3.13824 3.87552 8.28891 
4.98129 5.34995 4.98129 6.08707 3.87555 7.93814 9.77335 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
121.519 392.324 mo
(D)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
129.286 392.324 mo
(0andWy)
[8.85574 5.53522 6.08411 9.02716 9.2254 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
173.359 392.324 mo
(D)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
181.126 392.324 mo
(0representingthe)
[8.86472 4.42142 4.97931 5.71658 4.42139 4.97931 4.61069 4.97931 6.08505 3.87357 3.13623 6.08508 
8.67645 3.87354 6.08508 0 ]xsh
-127.621 403.286 mo
(initialstateof)
[3.13924 6.08807 3.13924 3.87653 3.13924 5.5402 5.90387 4.61365 3.87653 5.54019 3.87653 7.73994 
4.9823 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-59.8052 403.286 mo
(x)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-51.7235 403.286 mo
(and)
[5.53522 6.08308 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-30.9694 403.286 mo
(y)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-23.2654 403.286 mo
(thatwedonotdepicthere.)
[3.87254 6.08408 5.53622 6.65109 7.74792 7.7489 5.71561 7.75787 6.08408 4.97833 6.65109 5.71561 
4.9783 5.71558 3.13525 4.42041 6.66006 6.08408 4.9783 4.42041 4.797 0 ]xsh
-117.658 414.239 mo
(Theinstructionsemanticsalsode\256nesrelationsovertheseevents,representing,for)
[6.64413 6.08607 7.77582 3.13725 6.08607 4.61166 3.87453 4.42241 6.08606 4.42241 3.87453 3.13724 
4.98032 8.8736 4.61166 4.98032 8.85583 5.53819 6.08607 3.87454 3.13724 4.42239 7.40717 5.53522 
3.13727 4.61166 7.76685 5.71756 4.98032 6.08606 6.08609 4.98032 7.42511 4.42242 4.98029 3.13727 
5.53821 3.87454 3.13727 4.98032 6.08606 7.4072 4.98029 5.34897 4.98032 7.22687 3.87454 6.08609 
4.98032 4.61166 7.76685 4.98032 5.34897 4.98029 6.08609 3.87454 4.36459 5.57108 4.42242 4.98032 
5.71759 4.42239 4.98032 4.61166 4.98032 6.08609 3.87454 3.13724 6.08609 5.0939 5.58905 3.32144 
4.98032 0 ]xsh
-127.621 425.201 mo
(example,theprogramorderwithinathread,oraddress,data,orcontroldependencies)
[4.97831 5.34695 5.53622 8.85384 5.71559 3.13525 4.79698 5.44456 3.87254 6.08408 7.63235 5.71559 
4.42041 4.97832 5.34694 4.42039 5.53622 11.5378 4.97832 4.42039 5.71561 4.9783 7.10135 7.74789 
3.13525 3.87253 6.08408 3.13525 8.73914 8.19025 3.87952 6.08408 4.42041 4.97833 5.53622 5.71558 
5.44458 4.97729 7.0834 5.53522 5.71561 5.71561 4.42041 4.9783 4.60968 4.36459 5.43558 5.71561 
5.53619 3.87256 5.53622 5.43558 4.97833 7.0834 4.42041 4.9783 6.08411 3.87253 4.42041 4.9783 
5.81421 5.71558 4.9783 5.71558 4.9783 6.08408 5.71558 4.9783 6.08408 4.42038 3.13525 4.9783 
0 ]xsh
-127.621 436.163 mo
(fromonememoryaccesstotheother,viacomputationsoverregistervalues.)
[3.31548 4.42141 4.97931 11.6284 4.97931 6.08508 7.75787 8.85582 4.97931 8.85484 4.97931 4.4214 
8.13647 5.53722 4.4214 4.4214 4.97931 4.61066 7.39821 3.87952 7.7489 3.87949 6.08508 7.7489 
4.97931 3.87354 6.08508 4.97931 3.42017 5.55316 5.34793 3.13626 8.30679 4.42142 4.97931 8.85483 
5.71658 6.08508 3.87354 5.5372 3.87354 3.13623 4.97931 6.08508 7.40717 4.97931 5.34793 4.97931 
7.19998 4.42139 4.97931 5.34796 3.13623 4.61066 3.87354 4.97931 7.19998 5.34793 5.53723 3.13626 
6.08511 4.97931 4.36462 0 ]xsh
-117.658 447.116 mo
(Thus,inFigure3,wealsogivetheprogramorderrelation,written)
[6.64314 6.08508 6.08508 4.36459 6.31827 3.14124 9.6208 6.5435 3.13626 5.34796 6.08507 4.4214 
8.53098 5.53522 6.30933 7.7489 8.52301 5.53522 3.13625 4.61067 8.52301 5.34595 3.13626 5.34793 
8.52301 3.87952 6.08508 8.51404 5.71658 4.42139 4.97931 5.34796 4.42139 5.53723 12.4204 4.97931 
4.42139 5.71658 4.97931 7.98303 4.42142 4.97931 3.13623 5.53723 3.87354 3.13623 4.97931 6.08508 
6.31827 7.7489 4.42142 3.13623 3.87354 3.87354 4.97931 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
200.476 447.116 mo
(po)
[5.53522 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
211.555 447.116 mo
(,whichlifts)
[6.30933 7.7489 6.09006 3.14124 4.34668 9.62976 3.14124 3.14124 3.32047 3.87851 0 ]xsh
-127.621 458.078 mo
(theorderinwhichinstructionshavebeenwrittentothelevelofevents.Forexam-)
[3.87354 6.08508 8.96435 4.97931 4.4214 5.71658 4.97931 8.43333 3.13626 10.0711 7.74892 6.08508 
3.13625 4.34668 10.0891 3.14124 6.08507 4.61067 3.87352 4.42142 6.08508 4.42139 3.87354 3.13626 
4.97928 6.08508 8.60367 6.08408 5.43561 5.34595 8.98227 5.53723 4.97931 4.97928 10.0891 7.7489 
4.42142 3.13623 3.87354 3.87354 4.97931 10.0801 3.87952 8.96436 3.87952 6.08505 8.96436 3.13623 
4.97931 5.34796 4.97931 7.13721 4.97931 7.31647 4.97931 5.34796 4.97931 6.08511 3.87354 4.36462 
6.76758 6.09317 4.97934 8.41541 4.97931 5.34796 5.53723 8.85486 0 ]xsh
-127.621 469.039 mo
(ple,thetwostoreson)
[5.71759 3.13725 4.79699 6.31828 3.87453 6.08607 8.52301 3.8795 7.74991 8.51404 4.61165 3.87454 
4.98029 4.42241 4.9803 8.16333 4.9803 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
-23.3819 469.039 mo
(T)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-17.298 470.535 mo
(0)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-9.37804 469.041 mo
(inFigure1havebeenwritteninprogramorder,thustheir)
[3.13625 9.62978 6.54352 3.14122 5.34796 6.08508 4.42139 8.53198 9.0809 6.08408 5.43561 5.34595 
8.53198 5.5372 4.97931 4.97928 9.64771 7.74893 4.42139 3.13626 3.87354 3.87354 4.97931 9.62976 
3.14124 9.62079 5.71661 4.42139 4.97931 5.34796 4.42139 5.53723 12.4294 4.97931 4.42142 5.71658 
4.97931 3.42017 6.32721 3.87952 6.08508 6.08508 8.16333 3.87354 6.08508 4.97931 3.13623 0 
]xsh
-127.619 479.994 mo
(correspondingeventsWx)
[4.4214 4.97931 4.4214 4.42141 4.97931 4.61066 5.7166 4.97931 6.08508 5.71658 3.13626 6.08508 
8.1544 4.97931 5.34795 4.97931 6.08508 3.87354 7.38922 9.77135 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
-12.1486 479.994 mo
(D)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-4.38179 479.994 mo
(1andWy)
[8.31578 5.53522 6.08408 8.49615 9.2254 0 ]xsh
UUNUKI+MTSY*1 [9.9626 0 0 -9.9626 0 0 ]msf
38.6208 479.994 mo
(D)sh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
46.3876 479.994 mo
(1arerelatedby)
[8.31577 5.53622 4.42041 7.75787 4.42041 4.9783 3.13525 5.53622 3.87253 4.97833 8.50513 5.53619 
0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
121.502 479.994 mo
(po)
[5.53622 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
135.353 479.994 mo
(inFigure2.)
[3.13626 8.85568 6.54349 3.14124 5.34796 6.08508 4.42139 7.75488 5.53723 0 ]xsh
-117.658 490.956 mo
(Wearenowatastagewherewehave,givenaprogramsuchastheoneinFigure1,)
[9.18056 7.8575 5.53622 4.42039 7.86647 6.08409 4.97832 10.6381 5.53522 6.7587 8.42438 4.60966 
3.87254 5.53619 5.34695 7.85751 7.74789 6.08408 4.97832 4.42039 7.87543 7.74792 7.86646 6.08411 
5.43558 5.34695 4.797 5.66074 5.34595 3.13525 5.34698 4.9783 8.98221 8.41541 5.71561 4.42041 
4.9783 5.34695 4.42044 5.53619 11.7629 4.60968 6.08408 4.34668 8.97324 5.53622 7.49683 3.87256 
6.08408 7.85751 4.97729 6.08408 7.87546 3.13522 8.96426 6.54352 3.14124 5.34695 6.08405 4.42041 
7.86148 5.53622 0 ]xsh
-127.62 501.918 mo
(severaleventgraphs,suchastheoneinFigure2.Eachgraphgivesasetofeventsrep-)
[4.60967 4.97831 5.34695 4.97832 4.42041 5.53621 5.64285 4.9783 5.34695 4.9783 6.08409 6.37215 
5.34695 4.42041 5.53622 5.71558 6.08409 4.36458 5.2742 4.61664 6.08408 4.34669 8.57672 5.53523 
7.11026 3.87952 6.08408 7.461 4.9783 6.08411 7.47891 3.14124 8.56775 6.54352 3.13525 5.34695 
6.08411 4.42041 7.47693 5.53522 5.25626 7.19101 5.53622 4.34668 8.58566 5.34695 4.42041 5.53622 
5.71561 8.59467 5.34595 3.13525 5.34695 4.97833 7.11026 8.01889 4.61664 4.9783 6.36316 4.9783 
5.80511 4.9783 5.34695 4.9783 6.08405 3.87253 7.11026 4.42041 4.9783 5.71558 0 ]xsh
-127.62 512.871 mo
(resentingaccessestomemoryandregisters;theprogramorderbetweentheseevents,)
[4.4214 4.97931 4.61066 4.97931 6.08508 3.87354 3.13625 6.08508 8.27098 5.5372 4.42142 4.4214 
4.97931 4.61067 4.61066 4.97931 7.54166 3.87952 7.89337 8.85583 4.97929 8.85484 4.97929 4.4214 
8.27994 5.5372 6.08508 8.63962 4.42139 4.97931 5.34796 3.13623 4.61069 3.8735 4.97931 4.42142 
4.61066 5.69662 3.87952 6.08508 7.89334 5.71658 4.42142 4.97931 5.34793 4.42142 5.5372 11.7988 
4.97931 4.42139 5.71661 4.97928 7.35339 5.53723 4.97931 3.8735 7.74893 4.97931 4.97934 9.01807 
3.87354 6.08511 4.97931 4.61069 7.90234 4.97934 5.34796 4.97931 6.08511 3.87354 4.36462 0 
]xsh
-127.62 523.832 mo
(includingbranchingdecisions;andthedependencies.)
[3.13625 6.08508 4.34669 3.14124 6.08508 5.71658 3.13626 6.08507 8.12752 5.53722 4.4214 5.53722 
6.08507 4.34669 6.08409 3.13625 6.08508 8.14543 5.7166 4.97929 4.42142 3.13623 4.61067 3.13625 
4.97931 6.08508 4.61066 5.54419 5.5372 6.08508 8.49615 3.87952 6.08508 7.75787 5.71658 4.97931 
5.71658 4.97931 6.08508 5.71658 4.97931 6.08505 4.42142 3.13626 4.97928 4.36459 0 ]xsh
UUNUKG+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-117.658 539.772 mo
(Data-FlowSemantics.)
[7.74991 5.71758 3.50589 5.71759 3.31647 6.64413 3.31648 4.9803 9.79224 6.64214 4.42241 8.85582 
5.71759 6.08607 3.50589 3.31648 4.42239 3.92426 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-15.2012 539.772 mo
(Thepurposeofintroducingdata\257owistode\256newhichcommu-)
[6.64314 6.08507 7.02863 5.71658 6.08508 4.4214 5.7166 4.97931 4.61066 7.0376 4.97931 5.36377 
3.13626 6.08508 3.87354 4.42139 4.97931 5.71658 6.08508 4.42142 3.13623 6.08508 7.40723 5.71658 
5.5372 3.87354 5.5372 6.08508 4.97931 9.80121 3.13623 6.651 3.87354 7.01965 5.71658 4.97931 
6.08505 6.08508 7.02863 7.7489 6.08508 3.13623 4.34671 8.13638 4.42139 4.97931 8.85483 8.85483 
6.08508 0 ]xsh
-127.621 550.733 mo
(nications,orinterferences,mighthappenbetweenthedifferentthreadsofourprogram.)
[6.08508 3.13625 4.42141 5.53721 3.87354 3.13625 4.97931 6.08508 4.36458 4.80597 4.97731 6.46175 
3.14124 6.08508 3.87354 4.97931 4.4214 3.31548 4.97931 4.42139 4.97931 6.08508 4.4214 4.97929 
4.36459 4.83286 8.85583 3.13625 5.34795 6.08508 5.91287 6.08508 5.5372 5.71658 5.71658 4.97931 
8.13638 5.5372 4.97931 3.87354 7.7489 4.97931 4.97931 8.13638 3.8735 6.08508 7.01965 5.7146 
3.13623 3.31549 3.31549 4.97931 4.42139 4.97931 6.08508 5.91284 3.87952 6.08508 4.42145 4.97931 
5.53717 5.71661 6.66895 4.97931 5.3548 4.97931 6.08508 6.46179 5.71661 4.42139 4.97937 5.34796 
4.42139 5.53723 8.85486 0 ]xsh
-127.621 561.686 mo
(Todoso,weneedtode\256networelationsovermemoryevents:theread-fromrelation)
[6.0932 8.22612 5.71659 8.23508 4.61067 4.79698 6.02139 7.74892 8.2261 6.08409 4.97931 4.97931 
8.97337 3.87354 8.2261 5.71658 4.97931 6.08508 6.08508 8.24405 3.87354 7.7489 8.22612 4.4214 
4.97931 3.13623 5.53723 3.87354 3.13623 4.97931 6.08508 7.8754 4.97931 5.34793 4.97931 7.67719 
8.85483 4.97931 8.85483 4.97931 4.42139 8.6127 4.97928 5.34796 4.97931 6.08508 3.87354 4.61066 
6.02142 3.87354 6.08508 8.22607 4.42145 4.97931 5.53723 5.71655 3.31549 3.31555 4.42139 4.97931 
12.1236 4.42139 4.97937 3.13623 5.53723 3.87354 3.13629 4.97931 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
-127.621 572.648 mo
(rf)
[3.32046 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-121.537 572.648 mo
(,andthecoherenceorder)
[5.54418 5.53522 6.08408 8.49615 3.87254 6.08408 7.74892 4.42041 4.97832 6.08408 4.97832 4.42039 
4.97832 6.08409 4.42041 7.78476 4.97832 4.42039 5.71561 4.9783 0 ]xsh
UUNUKE+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
-2.72701 572.648 mo
(co)
[4.97832 0 ]xsh
UUNUKF+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
7.79449 572.648 mo
(.)sh
UUNUKF+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-103.302 600.549 mo
(ACMTransactionsonProgrammingLanguagesandSystems,Vol.36,No.2,Article7,Publicationdate:June2014.)
[5.03439 5.03438 8.53246 4.65088 3.09567 3.87672 4.26024 3.22816 3.87672 3.09567 2.71216 2.19608 
3.48621 4.26024 5.17523 3.48621 6.21011 4.65088 3.09567 3.48621 3.74425 3.09567 3.87674 6.19905 
6.19907 2.19606 4.26025 5.68854 4.65089 3.87675 4.26022 3.74426 4.26025 3.87674 3.74426 3.48621 
5.17523 3.87674 4.26025 5.94031 4.39212 3.74426 3.22815 2.71219 3.48621 6.19907 3.06009 3.87881 
4.50928 3.4834 2.19611 3.88788 3.87674 3.87674 3.87881 5.68295 3.35721 3.87045 3.87955 3.87955 
5.03156 3.0957 2.71216 2.19608 3.05106 2.19604 5.4361 3.87674 3.87045 4.65088 4.26025 3.87674 
2.19608 2.19608 3.09567 3.87674 2.71216 2.19608 3.48621 6.21011 4.00232 3.87674 2.71216 3.48621 
3.88788 3.70868 4.26025 4.26022 5.427 3.87674 3.87674 3.87674 3.87674 0 ]xsh
1 setflat
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/UUNUKG+NewCenturySchlbk-Italic*1 uf
/UUNUKG+NewCenturySchlbk-Italic uf
/HAAAAA+NewCenturySchlbk-Italic uf
/UUNUKF+NewCenturySchlbk-Roman*1 uf
/UUNUKF+NewCenturySchlbk-Roman uf
/GAAAAA+NewCenturySchlbk-Roman uf
/UUNUKE+Helvetica*1 uf
/UUNUKE+Helvetica uf
/FAAAAA+Helvetica uf
/UUNUKH+CMTT10*1 uf
/UUNUKH+CMTT10 uf
/IAAAAA+CMTT10 uf
/UUNUKI+MTSY*1 uf
/UUNUKI+MTSY uf
/JAAAAA+MTSY uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
