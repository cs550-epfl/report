%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9n3skk8_jcc9f3_16s.tmp.pdf
%%Creator: Adobe Acrobat 24.1.0
%%For: yy010
%%CreationDate: 2024/12/27, 14:38:33
%%BoundingBox: -1 0 227 184
%%HiResBoundingBox: 0 0 226.7999 183.6000
%%CropBox: 0 0 226.7999 183.6000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1183 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2024-12-27T14:35:07+01:00"
   xmp:CreateDate="2024-12-27T14:35:07+01:00"
   xmp:MetadataDate="2024-12-27T14:35:07+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:47b091a1-f95e-4e96-9353-e7e2efc7e4af"
   xmpMM:InstanceID="uuid:22c9191d-0030-4088-ab30-fc3d92a0870c"
   pdf:Producer="Acrobat Distiller 10.0.0 (Windows); modified using iText 4.2.0 by 1T3XT">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Herding Cats</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">ACM Trans. Program. Lang. Syst. 2014.36:1-74</rdf:li>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -183.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-05 0 mo
-1.52588e-05 183.6 li
226.8 183.6 li
226.8 0 li
cp
clp
.2 setflat
.252 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
-129.996 -90.93 mo
-129.996 -114.843 li
false sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
.2 setflat
-163.944 -80.895 mo
-140.031 -80.895 li
@
1 setflat
.2 setflat
366.012 -80.895 mo
389.925 -80.895 li
@
1 setflat
.2 setflat
355.752 -90.336 mo
355.752 -114.249 li
@
1 setflat
.2 setflat
-164.196 638.853 mo
-140.283 638.853 li
@
1 setflat
.2 setflat
-129.798 674.25 mo
-129.798 650.337 li
@
1 setflat
.2 setflat
355.752 673.647 mo
355.752 649.734 li
@
1 setflat
.2 setflat
366.039 638.853 mo
389.952 638.853 li
@
1 setflat
.2 setflat
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /FAAAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 55 /seven put
dup 57 /nine put
dup 58 /colon put
dup 67 /C put
dup 72 /H put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/BlueScale 0.0437916 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/seven <1C60D8A8C9B7EF327C10274AB025EB21CC3BB5514D7A792BCFB0F254
664FBEE7353071728231DCE5A09FB578C9A63F4547F469AB016F484730> |-
/nine <1C60D8A8C9B7EF32A4731A9DB70B9490730918F3CC8A6CEFA5DBCDDDD
5B8FF631E5F2E3BEA7592C5DB8D17DFB2B2E4B0DA0B1CDB7CBCE67C1382E1BCA
B1CA0DC367CB2D59D0DA1A7C85131B5D767099977B59D2EE9CD09CE6C2F22826
E56502A470206F3EAA46E7E3E86C6D4D4258A80AAFAE933FB6A3325CB283E> |-
/colon <1C60D8A8C9B854D088E8E1AEAD30C92AB0D98EADF1DE7A77B7CB74CD
7251B14F346AB2E7541FDEE4> |-
/C <1C60D8A8C9B6079FED21EC1DA43783C3C67A5FBA5FB885DEE16CDCDCAF1B
7E5C168D0377F501B09EEE06FA7720C35D9E5B5FBCE148C17092F43DAB7E2D94
E9FE9DCFFADEA91F9C52F49E3053420DCED72662293A521E028C39AF83F75FC5
4A> |-
/H <1C60D8A8C9B6079F3517E07A2A32EE8D09F795FB6E9F11AE46C75AA31D50
B194B413469264EA3867DFEC1283FAD051B3C6B29B8DCA4E1CF3E914FCD7B445> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCD055133316849E00736C24057076
3FFBEAA146CA9297CF7D3847B7CF1BE84FB2A37E5E555C53A806DE551FF53E55
D61D00981406A03EADD7AE8D33EF7217E17615CDCA7C18A3E3E1E13B179B4308
BD250D1E864A8A86D9BF7E50C7EC9522C99BD55A4F1A52E8A636FC1CA9AC7BFB
9D973089D39AA376C816268115093BC648CEB265DF83> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC44F3A27E4CCC92606F912C02778569997A6186F8A1
606F089477CA3B9FEB77CDA1F7183DD095278503BED44AEA29368E1D5A667236
914EC902A72DC76F98F26E5874C65C> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA56325
4EC441C4BC3817B6ABCAA45C3FADDF2A0C1FDBAFB2BC83F47DAFA77A786BA902
BA43197292E50CF57803A333B50FFCC316B4278D48D0702F544078D86E929B14
A38322C9A0C5BF9B9E5C> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A8460FEBA256258B5C852281
3839FED92DE3C47FB08E82DAD239D7D316E4DB98949C40B450B767A1D87B0ABE
0011CCD021B6229F454B1FF5E328C5CF8EC8EFFD81D3D2892F60438084072E44
AFC3709CC245EE12E4AC5F88F724A26A331F44C1FA0DE44324AECA> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKO+Helvetica /FAAAAA+Helvetica findfont ct_VMDictPut
/UUNUKO+Helvetica*1 
[55{/.notdef}rp /seven /.notdef /nine /colon 8{/.notdef}rp /C 4{/.notdef}rp 
/H 24{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g 
/.notdef /i 4{/.notdef}rp /n 3{/.notdef}rp /r /s /t 
139{/.notdef}rp]
UUNUKO+Helvetica nf
UUNUKO+Helvetica*1 [8.9664 0 0 -8.9664 0 0 ]msf
-84.348 -16.6801 mo
(Herding)sh
-50.4632 -16.6801 mo
(Cats)sh
297.71 -16.6801 mo
(7:9)
[4.98621 2.49356 0 ]xsh
57.243 11.42 mo
57.243 10.459 56.464 9.67999 55.503 9.67999 cv
54.542 9.67999 53.763 10.459 53.763 11.42 cv
53.763 12.381 54.542 13.16 55.503 13.16 cv
56.464 13.16 57.243 12.381 57.243 11.42 cv
false sop
.00772107 1 1 .00366217 cmyk
ef
.45 lw
true sadj
57.243 11.42 mo
57.243 10.459 56.464 9.67999 55.503 9.67999 cv
54.542 9.67999 53.763 10.459 53.763 11.42 cv
53.763 12.381 54.542 13.16 55.503 13.16 cv
56.464 13.16 57.243 12.381 57.243 11.42 cv
cp
@
57.243 43.159 mo
57.243 42.198 56.464 41.419 55.503 41.419 cv
54.542 41.419 53.763 42.198 53.763 43.159 cv
53.763 44.1201 54.542 44.899 55.503 44.899 cv
56.464 44.899 57.243 44.1201 57.243 43.159 cv
ef
57.243 43.159 mo
57.243 42.198 56.464 41.419 55.503 41.419 cv
54.542 41.419 53.763 42.198 53.763 43.159 cv
53.763 44.1201 54.542 44.899 55.503 44.899 cv
56.464 44.899 57.243 44.1201 57.243 43.159 cv
cp
@
2 lj
57.063 43.88 mo
57.123 43.88 li
58.735 44.645 60.278 45.183 61.863 45.98 cv
61.923 45.98 li
@
19.203 28.159 mo
19.203 43.939 li
.72195 .689113 .649531 .889921 cmyk
@
20.463 44.06 mo
19.203 47.66 li
17.943 44.06 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
20.463 44.06 mo
19.203 47.66 li
17.943 44.06 li
20.463 44.06 li
cp
.72195 .689113 .649531 .889921 cmyk
@
2 lj
79.683 28.159 mo
79.683 43.939 li
@
80.943 44.06 mo
79.683 47.66 li
78.423 44.06 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
80.943 44.06 mo
79.683 47.66 li
78.423 44.06 li
80.943 44.06 li
cp
.72195 .689113 .649531 .889921 cmyk
@
2 lj
57.063 12.139 mo
57.123 12.139 li
58.721 12.82 60.297 13.493 61.863 14.239 cv
61.923 14.239 li
.00772107 1 1 .00366217 cmyk
@
62.823 13.279 mo
65.643 15.859 li
61.863 15.559 li
ef
0 lj
62.823 13.279 mo
65.643 15.859 li
61.863 15.559 li
62.823 13.279 li
cp
@
62.823 45.02 mo
65.643 47.6 li
61.863 47.36 li
ef
62.823 45.02 mo
65.643 47.6 li
61.863 47.36 li
62.823 45.02 li
cp
@
14.53 72.509 mo
14.53 77.74 li
15.367 77.74 li
15.367 74.462 li
15.367 73.704 15.912 73.097 16.587 73.097 cv
17.201 73.097 17.549 73.476 17.549 74.143 cv
17.549 77.74 li
18.385 77.74 li
18.385 74.462 li
18.385 73.704 18.933 73.097 19.611 73.097 cv
20.219 73.097 20.577 73.486 20.577 74.143 cv
20.577 77.74 li
21.414 77.74 li
21.414 73.824 li
21.414 72.888 20.876 72.369 19.9 72.369 cv
19.202 72.369 18.784 72.579 18.296 73.167 cv
17.988 72.609 17.57 72.369 16.894 72.369 cv
16.196 72.369 15.736 72.629 15.287 73.256 cv
15.287 72.509 li
14.53 72.509 li
.72195 .689113 .649531 .889921 cmyk
f
22.651 79.911 mo
23.488 79.911 li
23.488 77.191 li
23.924 77.7291 24.411 77.9691 25.087 77.9691 cv
26.429 77.9691 27.314 76.8831 27.314 75.2191 cv
27.314 73.4661 26.459 72.369 25.077 72.369 cv
24.367 72.369 23.798 72.688 23.408 73.306 cv
23.408 72.5181 li
22.641 72.5181 li
22.651 79.911 li
cp
24.938 73.1461 mo
25.851 73.1461 26.447 73.9531 26.447 75.199 cv
26.447 76.3851 25.841 77.191 24.938 77.191 cv
24.064 77.191 23.488 76.394 23.488 75.1691 cv
23.488 73.9431 24.064 73.1461 24.938 73.1461 cv
f
32.734 70.477 mo
31.738 71.782 31.11 73.595 31.11 75.16 cv
31.11 76.734 31.738 78.546 32.734 79.852 cv
33.282 79.852 li
32.405 78.427 31.917 76.753 31.917 75.16 cv
31.917 73.576 32.405 71.892 33.282 70.477 cv
32.734 70.477 li
f
38.675 70.477 mo
37.848 70.477 li
37.848 73.177 li
37.499 72.649 36.941 72.37 36.244 72.37 cv
34.889 72.37 34.002 73.455 34.002 75.12 cv
34.002 76.883 34.869 77.969 36.274 77.969 cv
36.991 77.969 37.489 77.7 37.938 77.052 cv
37.938 77.74 li
38.675 77.74 li
38.675 70.477 li
cp
36.383 73.147 mo
37.28 73.147 37.848 73.944 37.848 75.189 cv
37.848 76.395 37.27 77.192 36.393 77.192 cv
35.477 77.192 34.869 76.385 34.869 75.169 cv
34.869 73.954 35.477 73.147 36.383 73.147 cv
f
44.593 77.251 mo
44.503 77.272 44.463 77.272 44.413 77.272 cv
44.125 77.272 43.965 77.122 43.965 76.862 cv
43.965 73.794 li
43.965 72.867 43.288 72.369 42.003 72.369 cv
41.245 72.369 40.618 72.589 40.269 72.978 cv
40.03 73.246 39.93 73.545 39.91 74.063 cv
40.747 74.063 li
40.817 73.426 41.196 73.137 41.973 73.137 cv
42.72 73.137 43.138 73.416 43.138 73.914 cv
43.138 74.133 li
43.138 74.482 42.929 74.631 42.272 74.711 cv
41.096 74.86 40.917 74.9 40.598 75.029 cv
39.99 75.278 39.681 75.747 39.681 76.424 cv
39.681 77.371 40.339 77.969 41.395 77.969 cv
42.052 77.969 42.58 77.739 43.168 77.201 cv
43.228 77.73 43.487 77.969 44.025 77.969 cv
44.195 77.969 44.324 77.948 44.593 77.879 cv
44.593 77.251 li
cp
43.138 76.096 mo
43.138 76.374 43.059 76.544 42.809 76.774 cv
42.471 77.082 42.062 77.241 41.574 77.241 cv
40.926 77.241 40.548 76.933 40.548 76.404 cv
40.548 75.857 40.917 75.577 41.803 75.448 cv
42.68 75.328 42.859 75.289 43.138 75.159 cv
43.138 76.096 li
f
47.313 72.519 mo
46.457 72.519 li
46.457 71.084 li
45.629 71.084 li
45.629 72.519 li
44.922 72.519 li
44.922 73.197 li
45.629 73.197 li
45.629 77.142 li
45.629 77.67 45.988 77.969 46.636 77.969 cv
46.835 77.969 47.034 77.949 47.313 77.899 cv
47.313 77.202 li
47.204 77.232 47.074 77.242 46.915 77.242 cv
46.556 77.242 46.457 77.142 46.457 76.774 cv
46.457 73.197 li
47.313 73.197 li
47.313 72.519 li
f
52.873 77.251 mo
52.783 77.272 52.744 77.272 52.694 77.272 cv
52.405 77.272 52.246 77.122 52.246 76.862 cv
52.246 73.794 li
52.246 72.867 51.568 72.369 50.283 72.369 cv
49.526 72.369 48.898 72.589 48.549 72.978 cv
48.31 73.246 48.21 73.545 48.19 74.063 cv
49.027 74.063 li
49.097 73.426 49.476 73.137 50.253 73.137 cv
51 73.137 51.418 73.416 51.418 73.914 cv
51.418 74.133 li
51.418 74.482 51.209 74.631 50.552 74.711 cv
49.376 74.86 49.197 74.9 48.878 75.029 cv
48.271 75.278 47.961 75.747 47.961 76.424 cv
47.961 77.371 48.619 77.969 49.675 77.969 cv
50.333 77.969 50.861 77.739 51.448 77.201 cv
51.508 77.73 51.767 77.969 52.305 77.969 cv
52.475 77.969 52.604 77.948 52.873 77.879 cv
52.873 77.251 li
cp
51.418 76.096 mo
51.418 76.374 51.339 76.544 51.09 76.774 cv
50.751 77.082 50.343 77.241 49.855 77.241 cv
49.207 77.241 48.828 76.933 48.828 76.404 cv
48.828 75.857 49.197 75.577 50.084 75.448 cv
50.96 75.328 51.14 75.289 51.418 75.159 cv
51.418 76.096 li
f
55.258 72.706 mo
54.391 72.706 li
54.391 71.89 li
54.391 71.541 54.591 71.361 54.969 71.361 cv
55.039 71.361 55.069 71.361 55.258 71.371 cv
55.258 70.675 li
55.069 70.642 54.959 70.634 54.79 70.634 cv
54.023 70.634 53.564 71.072 53.564 71.819 cv
53.564 72.706 li
52.867 72.706 li
52.867 73.384 li
53.564 73.384 li
53.564 77.927 li
54.391 77.927 li
54.391 73.384 li
55.258 73.384 li
55.258 72.706 li
cp
56.982 70.6541 mo
56.155 70.6541 li
56.155 77.927 li
56.982 77.927 li
cp
f
60.448 72.369 mo
58.984 72.369 58.097 73.4161 58.097 75.1691 cv
58.097 76.923 58.973 77.9691 60.458 77.9691 cv
61.923 77.9691 62.819 76.923 62.819 75.209 cv
62.819 73.405 61.952 72.369 60.448 72.369 cv
cp
60.458 73.137 mo
61.394 73.137 61.952 73.9031 61.952 75.199 cv
61.952 76.4241 61.375 77.201 60.458 77.201 cv
59.531 77.201 58.964 76.434 58.964 75.1691 cv
58.964 73.9141 59.531 73.137 60.458 73.137 cv
f
68.657 77.739 mo
70.191 72.5181 li
69.255 72.5181 li
68.2179 76.584 li
67.1919 72.5181 li
66.1759 72.5181 li
65.18 76.584 li
64.114 72.5181 li
63.197 72.5181 li
64.712 77.739 li
65.648 77.739 li
66.655 73.644 li
67.7099 77.739 li
68.657 77.739 li
f
75.678 72.708 mo
75.678 77.739 li
76.5549 77.739 li
76.5549 70.676 li
75.9769 70.676 li
75.668 71.762 75.4689 71.911 74.1139 72.0811 cv
74.1139 72.708 li
75.678 72.708 li
f
79.544 79.852 mo
80.5399 78.546 81.168 76.734 81.168 75.169 cv
81.168 73.595 80.5399 71.782 79.544 70.477 cv
78.996 70.477 li
79.8729 71.902 80.3609 73.576 80.3609 75.169 cv
80.3609 76.753 79.8729 78.437 78.996 79.852 cv
79.544 79.852 li
f
17.419 2.04303 mo
18.3049 2.04303 li
18.425 2.04303 18.545 2.05304 18.664 2.05304 cv
19.9989 2.05304 li
19.9989 1.40509 li
13.942 1.40509 li
13.942 2.05304 li
15.2769 2.05304 li
15.397 2.05304 15.5159 2.04303 15.6349 2.04303 cv
16.532 2.04303 li
16.532 8.26007 li
17.419 8.26007 li
17.419 2.04303 li
f
24.021 7.47498 mo
24.021 6.70801 23.93 6.15698 23.609 5.66803 cv
23.393 5.34802 22.961 5.06903 22.403 5.06903 cv
20.785 5.06903 20.785 6.97302 20.785 7.47498 cv
20.785 7.97699 20.785 9.83899 22.403 9.83899 cv
24.021 9.83899 24.021 7.97699 24.021 7.47498 cv
cp
22.403 9.64398 mo
22.082 9.64398 21.657 9.45502 21.517 8.88403 cv
21.42 8.47198 21.42 7.90002 21.42 7.38403 cv
21.42 6.875 21.42 6.34503 21.524 5.961 cv
21.671 5.41101 22.117 5.26398 22.403 5.26398 cv
22.78 5.26398 23.142 5.495 23.267 5.89899 cv
23.379 6.27502 23.386 6.77698 23.386 7.38403 cv
23.386 7.90002 23.386 8.41602 23.295 8.85602 cv
23.156 9.48999 22.682 9.64398 22.403 9.64398 cv
f
6.07297 26.851 mo
5.98396 26.871 5.94395 26.871 5.89397 26.871 cv
5.60497 26.871 5.44595 26.722 5.44595 26.462 cv
5.44595 23.394 li
5.44595 22.468 4.76796 21.9691 3.48296 21.9691 cv
2.72597 21.9691 2.09796 22.188 1.74896 22.577 cv
1.50996 22.8461 1.40996 23.145 1.39096 23.663 cv
2.22696 23.663 li
2.29697 23.025 2.67596 22.736 3.45296 22.736 cv
4.19997 22.736 4.61797 23.0161 4.61797 23.514 cv
4.61797 23.733 li
4.61797 24.082 4.40897 24.231 3.75195 24.311 cv
2.57596 24.46 2.39696 24.5001 2.07796 24.629 cv
1.46996 24.8781 1.16096 25.347 1.16096 26.024 cv
1.16096 26.9711 1.81895 27.5681 2.87495 27.5681 cv
3.53197 27.5681 4.06096 27.3391 4.64796 26.801 cv
4.70796 27.329 4.96696 27.5681 5.50496 27.5681 cv
5.67496 27.5681 5.80396 27.548 6.07297 27.4791 cv
6.07297 26.851 li
cp
4.61797 25.6951 mo
4.61797 25.975 4.53896 26.144 4.28996 26.373 cv
3.95096 26.6821 3.54295 26.8411 3.05396 26.8411 cv
2.40697 26.8411 2.02795 26.532 2.02795 26.004 cv
2.02795 25.457 2.39696 25.1771 3.28296 25.048 cv
4.15996 24.928 4.33997 24.889 4.61797 24.759 cv
4.61797 25.6951 li
f
8.39497 26.303 mo
7.35896 26.303 li
7.35896 27.339 li
8.39497 27.339 li
cp
8.39497 22.119 mo
7.35896 22.119 li
7.35896 23.155 li
8.39497 23.155 li
cp
f
19.195 27.339 mo
21.0379 20.076 li
20.002 20.076 li
18.6669 25.974 li
17.013 20.076 li
16.017 20.076 li
14.403 25.974 li
13.0379 20.076 li
12.002 20.076 li
13.865 27.339 li
14.881 27.339 li
16.505 21.371 li
18.179 27.339 li
19.195 27.339 li
f
24.052 24.64 mo
25.805 22.119 li
24.869 22.119 li
23.613 24.012 li
22.358 22.119 li
21.412 22.119 li
23.155 24.679 li
21.312 27.34 li
22.259 27.34 li
23.584 25.337 li
24.889 27.34 li
25.855 27.34 li
24.052 24.64 li
f
31.503 23.822 mo
26.681 23.822 li
26.681 24.5201 li
31.503 24.5201 li
cp
31.503 25.5361 mo
26.681 25.5361 li
26.681 26.233 li
31.503 26.233 li
cp
f
34.523 22.308 mo
34.523 27.339 li
35.4 27.339 li
35.4 20.276 li
34.822 20.276 li
34.513 21.362 34.3139 21.511 32.959 21.681 cv
32.959 22.308 li
34.523 22.308 li
f
1.40097 51.877 mo
1.40097 59.14 li
2.14796 59.14 li
2.14796 58.472 li
2.54697 59.08 3.07396 59.369 3.80196 59.369 cv
5.17596 59.369 6.07297 58.243 6.07297 56.509 cv
6.07297 54.816 5.21596 53.77 3.84096 53.77 cv
3.12396 53.77 2.61597 54.0391 2.22797 54.627 cv
2.22797 51.877 li
1.40097 51.877 li
cp
3.68196 54.5471 mo
4.60896 54.5471 5.20697 55.3541 5.20697 56.5991 cv
5.20697 57.785 4.58896 58.592 3.68196 58.592 cv
2.80496 58.592 2.22797 57.795 2.22797 56.5701 cv
2.22797 55.3441 2.80496 54.5471 3.68196 54.5471 cv
f
8.51497 58.104 mo
7.47896 58.104 li
7.47896 59.14 li
8.51497 59.14 li
cp
8.51497 53.919 mo
7.47896 53.919 li
7.47896 54.955 li
8.51497 54.955 li
cp
f
19.315 59.14 mo
21.158 51.8771 li
20.122 51.8771 li
18.787 57.775 li
17.133 51.8771 li
16.137 51.8771 li
14.522 57.775 li
13.158 51.8771 li
12.122 51.8771 li
13.985 59.14 li
15.001 59.14 li
16.625 53.1721 li
18.298 59.14 li
19.315 59.14 li
f
24.888 53.919 mo
23.444 57.983 li
22.109 53.919 li
21.222 53.919 li
22.985 59.1591 li
22.666 59.986 li
22.537 60.3541 22.348 60.494 21.999 60.494 cv
21.88 60.494 21.74 60.475 21.561 60.4351 cv
21.561 61.182 li
21.73 61.2711 21.899 61.312 22.118 61.312 cv
22.388 61.312 22.677 61.222 22.896 61.062 cv
23.155 60.873 23.304 60.653 23.464 60.235 cv
25.785 53.919 li
24.888 53.919 li
f
31.383 55.622 mo
26.561 55.622 li
26.561 56.3201 li
31.383 56.3201 li
cp
31.383 57.3361 mo
26.561 57.3361 li
26.561 58.033 li
31.383 58.033 li
cp
f
34.403 54.109 mo
34.403 59.14 li
35.279 59.14 li
35.279 52.076 li
34.702 52.076 li
34.393 53.162 34.193 53.312 32.839 53.481 cv
32.839 54.109 li
34.403 54.109 li
f
77.899 2.04303 mo
78.786 2.04303 li
78.905 2.04303 79.024 2.05304 79.144 2.05304 cv
80.479 2.05304 li
80.479 1.40509 li
74.422 1.40509 li
74.422 2.05304 li
75.7569 2.05304 li
75.877 2.05304 75.996 2.04303 76.1149 2.04303 cv
77.0119 2.04303 li
77.0119 8.26007 li
77.899 8.26007 li
77.899 2.04303 li
f
83.239 5.26398 mo
83.239 5.07599 83.225 5.06903 83.03 5.06903 cv
82.583 5.508 81.949 5.51501 81.6629 5.51501 cv
81.6629 5.76599 li
81.8299 5.76599 82.2909 5.76599 82.674 5.57098 cv
82.674 9.12701 li
82.674 9.35803 82.674 9.44904 81.9769 9.44904 cv
81.712 9.44904 li
81.712 9.70001 li
81.837 9.69202 82.695 9.67102 82.953 9.67102 cv
83.169 9.67102 84.048 9.69202 84.2009 9.70001 cv
84.2009 9.44904 li
83.936 9.44904 li
83.239 9.44904 83.239 9.35803 83.239 9.12701 cv
83.239 5.26398 li
f
67.355 23.872 mo
67.316 23.364 67.2059 23.035 67.0059 22.747 cv
66.648 22.2581 66.0199 21.9691 65.293 21.9691 cv
63.888 21.9691 62.972 23.085 62.972 24.819 cv
62.972 26.502 63.868 27.5681 65.2829 27.5681 cv
66.5279 27.5681 67.316 26.821 67.415 25.546 cv
66.578 25.546 li
66.4379 26.3831 66.01 26.801 65.303 26.801 cv
64.386 26.801 63.838 26.054 63.838 24.819 cv
63.838 23.514 64.377 22.736 65.2829 22.736 cv
65.9809 22.736 66.419 23.145 66.518 23.872 cv
67.355 23.872 li
f
69.835 26.303 mo
68.799 26.303 li
68.799 27.339 li
69.835 27.339 li
cp
69.835 22.118 mo
68.799 22.118 li
68.799 23.154 li
69.835 23.154 li
cp
f
74.956 24.211 mo
77.347 24.211 li
78.174 24.211 78.542 24.609 78.542 25.506 cv
78.533 26.1541 li
78.533 26.6021 78.612 27.041 78.742 27.3391 cv
79.868 27.3391 li
79.868 27.11 li
79.519 26.871 79.449 26.612 79.429 25.6461 cv
79.419 24.45 79.23 24.091 78.443 23.7531 cv
79.26 23.354 79.589 22.846 79.589 22.019 cv
79.589 20.764 78.802 20.077 77.377 20.077 cv
74.029 20.077 li
74.029 27.3391 li
74.956 27.3391 li
74.956 24.211 li
cp
74.956 23.394 mo
74.956 20.894 li
77.198 20.894 li
77.716 20.894 78.015 20.973 78.244 21.1721 cv
78.493 21.382 78.622 21.71 78.622 22.149 cv
78.622 23.005 78.184 23.394 77.198 23.394 cv
74.956 23.394 li
f
84.168 22.119 mo
82.724 26.184 li
81.3889 22.119 li
80.5019 22.119 li
82.2649 27.36 li
81.9459 28.186 li
81.8169 28.5551 81.6279 28.6951 81.2789 28.6951 cv
81.159 28.6951 81.0199 28.675 80.84 28.6351 cv
80.84 29.382 li
81.0099 29.472 81.1789 29.512 81.3979 29.512 cv
81.6669 29.512 81.9569 29.4221 82.1749 29.2631 cv
82.435 29.0731 82.5839 28.8541 82.7429 28.4351 cv
85.0649 22.119 li
84.168 22.119 li
f
90.663 23.822 mo
85.841 23.822 li
85.841 24.5201 li
90.663 24.5201 li
cp
90.663 25.5361 mo
85.841 25.5361 li
85.841 26.233 li
90.663 26.233 li
cp
f
93.843 20.276 mo
93.185 20.276 92.588 20.565 92.2189 21.053 cv
91.761 21.671 91.532 22.617 91.532 23.9221 cv
91.532 26.303 92.329 27.569 93.843 27.569 cv
95.337 27.569 96.155 26.303 96.155 23.9821 cv
96.155 22.6071 95.935 21.691 95.467 21.053 cv
95.0979 20.5551 94.511 20.276 93.843 20.276 cv
cp
93.843 21.053 mo
94.789 21.053 95.2579 22.009 95.2579 23.903 cv
95.2579 25.905 94.7999 26.841 93.823 26.841 cv
92.897 26.841 92.429 25.8651 92.429 23.932 cv
92.429 21.999 92.897 21.053 93.843 21.053 cv
f
67.234 51.877 mo
66.4069 51.877 li
66.4069 54.577 li
66.0589 54.0491 65.501 53.77 64.8029 53.77 cv
63.448 53.77 62.562 54.856 62.562 56.52 cv
62.562 58.283 63.4279 59.369 64.833 59.369 cv
65.5499 59.369 66.0489 59.1 66.4969 58.4531 cv
66.4969 59.14 li
67.234 59.14 li
67.234 51.877 li
cp
64.943 54.5471 mo
65.84 54.5471 66.4069 55.3441 66.4069 56.5891 cv
66.4069 57.795 65.8289 58.592 64.953 58.592 cv
64.0359 58.592 63.4279 57.785 63.4279 56.5701 cv
63.4279 55.3541 64.0359 54.5471 64.943 54.5471 cv
f
69.955 58.104 mo
68.919 58.104 li
68.919 59.14 li
69.955 59.14 li
cp
69.955 53.919 mo
68.919 53.919 li
68.919 54.955 li
69.955 54.955 li
cp
f
75.316 56.011 mo
77.707 56.011 li
78.534 56.011 78.902 56.409 78.902 57.306 cv
78.892 57.954 li
78.892 58.403 78.9719 58.841 79.1019 59.14 cv
80.228 59.14 li
80.228 58.91 li
79.879 58.671 79.8089 58.412 79.789 57.446 cv
79.7789 56.25 79.59 55.892 78.803 55.553 cv
79.6199 55.154 79.948 54.647 79.948 53.82 cv
79.948 52.564 79.1609 51.877 77.737 51.877 cv
74.389 51.877 li
74.389 59.14 li
75.316 59.14 li
75.316 56.011 li
cp
75.316 55.195 mo
75.316 52.694 li
77.557 52.694 li
78.0749 52.694 78.375 52.773 78.604 52.972 cv
78.853 53.182 78.9819 53.51 78.9819 53.948 cv
78.9819 54.806 78.544 55.195 77.557 55.195 cv
75.316 55.195 li
f
83.572 56.44 mo
85.325 53.919 li
84.389 53.919 li
83.134 55.812 li
81.878 53.919 li
80.932 53.919 li
82.675 56.48 li
80.832 59.14 li
81.7789 59.14 li
83.104 57.137 li
84.409 59.14 li
85.375 59.14 li
83.572 56.44 li
f
91.023 55.622 mo
86.2009 55.622 li
86.2009 56.3201 li
91.023 56.3201 li
cp
91.023 57.3361 mo
86.2009 57.3361 li
86.2009 58.033 li
91.023 58.033 li
cp
f
94.203 52.076 mo
93.5449 52.076 92.948 52.365 92.5789 52.853 cv
92.121 53.471 91.892 54.417 91.892 55.722 cv
91.892 58.104 92.6879 59.368 94.203 59.368 cv
95.6969 59.368 96.5139 58.104 96.5139 55.783 cv
96.5139 54.408 96.2949 53.49 95.827 52.853 cv
95.4579 52.355 94.871 52.076 94.203 52.076 cv
cp
94.203 52.853 mo
95.1489 52.853 95.6169 53.809 95.6169 55.703 cv
95.6169 57.705 95.159 58.641 94.1829 58.641 cv
93.2559 58.641 92.7879 57.665 92.7879 55.733 cv
92.7879 53.8 93.2559 52.853 94.203 52.853 cv
f
68.501 43.716 mo
69.1709 43.716 li
69.1709 41.54 li
69.5199 41.971 69.909 42.162 70.449 42.162 cv
71.5239 42.162 72.2309 41.293 72.2309 39.962 cv
72.2309 38.5601 71.547 37.683 70.4419 37.683 cv
69.8739 37.683 69.419 37.938 69.1069 38.432 cv
69.1069 37.8021 li
68.4929 37.8021 li
68.501 43.716 li
cp
70.3309 38.304 mo
71.061 38.304 71.5379 38.95 71.5379 39.946 cv
71.5379 40.895 71.0529 41.54 70.3309 41.54 cv
69.6309 41.54 69.1709 40.903 69.1709 39.923 cv
69.1709 38.942 69.6309 38.304 70.3309 38.304 cv
f
74.671 37.683 mo
73.5 37.683 72.79 38.52 72.79 39.923 cv
72.79 41.326 73.492 42.162 74.679 42.162 cv
75.851 42.162 76.5679 41.326 76.5679 39.954 cv
76.5679 38.512 75.875 37.683 74.671 37.683 cv
cp
74.679 38.297 mo
75.428 38.297 75.875 38.911 75.875 39.947 cv
75.875 40.927 75.412 41.549 74.679 41.549 cv
73.938 41.549 73.484 40.935 73.484 39.923 cv
73.484 38.918 73.938 38.297 74.679 38.297 cv
f
56.861 21.123 mo
56.861 25.299 li
57.53 25.299 li
57.53 23.131 li
57.53 22.534 57.682 22.143 58.001 21.912 cv
58.2079 21.761 58.407 21.713 58.869 21.705 cv
58.869 21.027 li
58.7579 21.011 58.702 21.003 58.614 21.003 cv
58.181 21.003 57.852 21.258 57.4669 21.88 cv
57.4669 21.123 li
56.861 21.123 li
.00772107 1 1 .00366217 cmyk
f
60.999 21.123 mo
60.306 21.123 li
60.306 20.47 li
60.306 20.19 60.465 20.047 60.768 20.047 cv
60.824 20.047 60.848 20.047 60.999 20.055 cv
60.999 19.505 li
60.848 19.473 60.7599 19.465 60.625 19.465 cv
60.011 19.465 59.644 19.816 59.644 20.414 cv
59.644 21.123 li
59.086 21.123 li
59.086 21.665 li
59.644 21.665 li
59.644 25.299 li
60.306 25.299 li
60.306 21.665 li
60.999 21.665 li
60.999 21.123 li
f
56.861 52.803 mo
56.861 56.979 li
57.53 56.979 li
57.53 54.811 li
57.53 54.214 57.682 53.823 58.001 53.592 cv
58.2079 53.441 58.407 53.393 58.869 53.385 cv
58.869 52.707 li
58.7579 52.691 58.702 52.683 58.614 52.683 cv
58.181 52.683 57.852 52.938 57.4669 53.56 cv
57.4669 52.803 li
56.861 52.803 li
f
60.999 52.803 mo
60.306 52.803 li
60.306 52.149 li
60.306 51.87 60.465 51.727 60.768 51.727 cv
60.824 51.727 60.848 51.727 60.999 51.735 cv
60.999 51.185 li
60.848 51.153 60.7599 51.145 60.625 51.145 cv
60.011 51.145 59.644 51.496 59.644 52.094 cv
59.644 52.803 li
59.086 52.803 li
59.086 53.345 li
59.644 53.345 li
59.644 56.979 li
60.306 56.979 li
60.306 53.345 li
60.999 53.345 li
60.999 52.803 li
f
8.02097 43.717 mo
8.68996 43.717 li
8.68996 41.541 li
9.03996 41.971 9.42896 42.163 9.96896 42.163 cv
11.043 42.163 11.751 41.294 11.751 39.963 cv
11.751 38.56 11.067 37.684 9.96095 37.684 cv
9.39395 37.684 8.93796 37.939 8.62596 38.433 cv
8.62596 37.803 li
8.01295 37.803 li
8.02097 43.717 li
cp
9.84996 38.305 mo
10.581 38.305 11.058 38.951 11.058 39.947 cv
11.058 40.896 10.573 41.541 9.84996 41.541 cv
9.15096 41.541 8.68996 40.904 8.68996 39.923 cv
8.68996 38.943 9.15096 38.305 9.84996 38.305 cv
.72195 .689113 .649531 .889921 cmyk
f
14.191 37.684 mo
13.019 37.684 12.31 38.5211 12.31 39.923 cv
12.31 41.326 13.011 42.163 14.199 42.163 cv
15.371 42.163 16.088 41.326 16.088 39.9551 cv
16.088 38.5131 15.395 37.684 14.191 37.684 cv
cp
14.199 38.298 mo
14.948 38.298 15.395 38.912 15.395 39.947 cv
15.395 40.928 14.932 41.5491 14.199 41.5491 cv
13.458 41.5491 13.004 40.936 13.004 39.923 cv
13.004 38.9191 13.458 38.298 14.199 38.298 cv
f
186.243 43.159 mo
186.243 42.198 185.464 41.419 184.503 41.419 cv
183.542 41.419 182.763 42.198 182.763 43.159 cv
182.763 44.1201 183.542 44.899 184.503 44.899 cv
185.464 44.899 186.243 44.1201 186.243 43.159 cv
.00772107 1 1 .00366217 cmyk
ef
186.243 43.159 mo
186.243 42.198 185.464 41.419 184.503 41.419 cv
183.542 41.419 182.763 42.198 182.763 43.159 cv
182.763 44.1201 183.542 44.899 184.503 44.899 cv
185.464 44.899 186.243 44.1201 186.243 43.159 cv
cp
@
2 lj
186.062 43.88 mo
186.123 43.88 li
187.734 44.645 189.278 45.183 190.863 45.98 cv
190.923 45.98 li
@
148.203 28.159 mo
148.203 43.939 li
.72195 .689113 .649531 .889921 cmyk
@
149.463 44.06 mo
148.203 47.66 li
146.943 44.06 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
149.463 44.06 mo
148.203 47.66 li
146.943 44.06 li
149.463 44.06 li
cp
.72195 .689113 .649531 .889921 cmyk
@
2 lj
159.843 47.659 mo
159.903 47.599 li
171.052 41.772 182.224 35.925 193.323 30.019 cv
193.383 30.019 li
.00772107 1 1 .00366217 cmyk
@
193.263 28.699 mo
197.043 28.099 li
194.463 30.919 li
ef
0 lj
193.263 28.699 mo
197.043 28.099 li
194.463 30.919 li
193.263 28.699 li
cp
@
2 lj
208.682 28.159 mo
208.682 43.939 li
.72195 .689113 .649531 .889921 cmyk
@
209.943 44.06 mo
208.682 47.66 li
207.423 44.06 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
209.943 44.06 mo
208.682 47.66 li
207.423 44.06 li
209.943 44.06 li
cp
.72195 .689113 .649531 .889921 cmyk
@
191.823 45.02 mo
194.642 47.6 li
190.863 47.36 li
.00772107 1 1 .00366217 cmyk
ef
191.823 45.02 mo
194.642 47.6 li
190.863 47.36 li
191.823 45.02 li
cp
@
143.53 72.509 mo
143.53 77.74 li
144.367 77.74 li
144.367 74.462 li
144.367 73.704 144.913 73.097 145.587 73.097 cv
146.202 73.097 146.549 73.476 146.549 74.143 cv
146.549 77.74 li
147.386 77.74 li
147.386 74.462 li
147.386 73.704 147.933 73.097 148.611 73.097 cv
149.219 73.097 149.577 73.486 149.577 74.143 cv
149.577 77.74 li
150.414 77.74 li
150.414 73.824 li
150.414 72.888 149.876 72.369 148.9 72.369 cv
148.203 72.369 147.784 72.579 147.296 73.167 cv
146.988 72.609 146.57 72.369 145.894 72.369 cv
145.195 72.369 144.736 72.629 144.287 73.256 cv
144.287 72.509 li
143.53 72.509 li
.72195 .689113 .649531 .889921 cmyk
f
151.651 79.911 mo
152.487 79.911 li
152.487 77.191 li
152.925 77.7291 153.411 77.9691 154.086 77.9691 cv
155.429 77.9691 156.313 76.8831 156.313 75.2191 cv
156.313 73.4661 155.458 72.369 154.076 72.369 cv
153.367 72.369 152.798 72.688 152.408 73.306 cv
152.408 72.5181 li
151.64 72.5181 li
151.651 79.911 li
cp
153.937 73.1461 mo
154.85 73.1461 155.446 73.9531 155.446 75.199 cv
155.446 76.3851 154.841 77.191 153.937 77.191 cv
153.063 77.191 152.487 76.394 152.487 75.1691 cv
152.487 73.9431 153.063 73.1461 153.937 73.1461 cv
f
161.854 70.477 mo
160.858 71.782 160.23 73.595 160.23 75.16 cv
160.23 76.734 160.858 78.546 161.854 79.852 cv
162.402 79.852 li
161.525 78.427 161.037 76.753 161.037 75.16 cv
161.037 73.576 161.525 71.892 162.402 70.477 cv
161.854 70.477 li
f
167.795 70.477 mo
166.968 70.477 li
166.968 73.177 li
166.619 72.649 166.061 72.37 165.363 72.37 cv
164.009 72.37 163.122 73.455 163.122 75.12 cv
163.122 76.883 163.989 77.969 165.393 77.969 cv
166.11 77.969 166.609 77.7 167.057 77.052 cv
167.057 77.74 li
167.795 77.74 li
167.795 70.477 li
cp
165.503 73.147 mo
166.399 73.147 166.968 73.944 166.968 75.189 cv
166.968 76.395 166.39 77.192 165.513 77.192 cv
164.597 77.192 163.989 76.385 163.989 75.169 cv
163.989 73.954 164.597 73.147 165.503 73.147 cv
f
173.713 77.251 mo
173.623 77.272 173.583 77.272 173.534 77.272 cv
173.245 77.272 173.085 77.122 173.085 76.862 cv
173.085 73.794 li
173.085 72.867 172.408 72.369 171.123 72.369 cv
170.365 72.369 169.738 72.589 169.39 72.978 cv
169.15 73.246 169.051 73.545 169.03 74.063 cv
169.867 74.063 li
169.937 73.426 170.315 73.137 171.093 73.137 cv
171.84 73.137 172.259 73.416 172.259 73.914 cv
172.259 74.133 li
172.259 74.482 172.049 74.631 171.391 74.711 cv
170.216 74.86 170.037 74.9 169.718 75.029 cv
169.11 75.278 168.802 75.747 168.802 76.424 cv
168.802 77.371 169.459 77.969 170.515 77.969 cv
171.173 77.969 171.7 77.739 172.288 77.201 cv
172.349 77.73 172.607 77.969 173.145 77.969 cv
173.314 77.969 173.444 77.948 173.713 77.879 cv
173.713 77.251 li
cp
172.259 76.096 mo
172.259 76.374 172.179 76.544 171.93 76.774 cv
171.591 77.082 171.182 77.241 170.694 77.241 cv
170.047 77.241 169.668 76.933 169.668 76.404 cv
169.668 75.857 170.037 75.577 170.924 75.448 cv
171.8 75.328 171.979 75.289 172.259 75.159 cv
172.259 76.096 li
f
176.433 72.519 mo
175.577 72.519 li
175.577 71.084 li
174.75 71.084 li
174.75 72.519 li
174.042 72.519 li
174.042 73.197 li
174.75 73.197 li
174.75 77.142 li
174.75 77.67 175.108 77.969 175.756 77.969 cv
175.955 77.969 176.154 77.949 176.433 77.899 cv
176.433 77.202 li
176.324 77.232 176.194 77.242 176.035 77.242 cv
175.677 77.242 175.577 77.142 175.577 76.774 cv
175.577 73.197 li
176.433 73.197 li
176.433 72.519 li
f
181.993 77.251 mo
181.903 77.272 181.863 77.272 181.813 77.272 cv
181.524 77.272 181.365 77.122 181.365 76.862 cv
181.365 73.794 li
181.365 72.867 180.687 72.369 179.402 72.369 cv
178.645 72.369 178.017 72.589 177.669 72.978 cv
177.43 73.246 177.33 73.545 177.31 74.063 cv
178.147 74.063 li
178.217 73.426 178.596 73.137 179.373 73.137 cv
180.12 73.137 180.538 73.416 180.538 73.914 cv
180.538 74.133 li
180.538 74.482 180.329 74.631 179.672 74.711 cv
178.496 74.86 178.316 74.9 177.998 75.029 cv
177.39 75.278 177.081 75.747 177.081 76.424 cv
177.081 77.371 177.739 77.969 178.795 77.969 cv
179.452 77.969 179.98 77.739 180.568 77.201 cv
180.628 77.73 180.887 77.969 181.425 77.969 cv
181.595 77.969 181.724 77.948 181.993 77.879 cv
181.993 77.251 li
cp
180.538 76.096 mo
180.538 76.374 180.459 76.544 180.21 76.774 cv
179.871 77.082 179.463 77.241 178.974 77.241 cv
178.327 77.241 177.948 76.933 177.948 76.404 cv
177.948 75.857 178.316 75.577 179.203 75.448 cv
180.08 75.328 180.26 75.289 180.538 75.159 cv
180.538 76.096 li
f
184.378 72.675 mo
183.512 72.675 li
183.512 71.859 li
183.512 71.51 183.711 71.33 184.089 71.33 cv
184.159 71.33 184.188 71.33 184.378 71.34 cv
184.378 70.644 li
184.188 70.611 184.079 70.603 183.91 70.603 cv
183.142 70.603 182.684 71.041 182.684 71.788 cv
182.684 72.675 li
181.987 72.675 li
181.987 73.353 li
182.684 73.353 li
182.684 77.896 li
183.512 77.896 li
183.512 73.353 li
184.378 73.353 li
184.378 72.675 li
cp
186.101 70.623 mo
185.274 70.623 li
185.274 77.895 li
186.101 77.895 li
cp
f
189.567 72.369 mo
188.103 72.369 187.217 73.4161 187.217 75.1691 cv
187.217 76.923 188.093 77.9691 189.577 77.9691 cv
191.042 77.9691 191.938 76.923 191.938 75.209 cv
191.938 73.405 191.072 72.369 189.567 72.369 cv
cp
189.577 73.137 mo
190.514 73.137 191.072 73.9031 191.072 75.199 cv
191.072 76.4241 190.494 77.201 189.577 77.201 cv
188.651 77.201 188.083 76.434 188.083 75.1691 cv
188.083 73.9141 188.651 73.137 189.577 73.137 cv
f
197.777 77.739 mo
199.311 72.5181 li
198.375 72.5181 li
197.339 76.584 li
196.312 72.5181 li
195.296 72.5181 li
194.3 76.584 li
193.234 72.5181 li
192.317 72.5181 li
193.832 77.739 li
194.768 77.739 li
195.774 73.644 li
196.83 77.739 li
197.777 77.739 li
f
204.299 74.502 mo
204.409 74.502 li
204.777 74.491 li
205.744 74.491 206.242 74.9301 206.242 75.7761 cv
206.242 76.663 205.694 77.191 204.777 77.191 cv
203.821 77.191 203.352 76.7131 203.293 75.6871 cv
202.416 75.6871 li
202.456 76.2551 202.556 76.624 202.725 76.942 cv
203.084 77.6201 203.781 77.9691 204.748 77.9691 cv
206.202 77.9691 207.139 77.1021 207.139 75.767 cv
207.139 74.8701 206.79 74.3721 205.943 74.0831 cv
206.6 73.824 206.93 73.326 206.93 72.618 cv
206.93 71.403 206.122 70.676 204.777 70.676 cv
203.352 70.676 202.596 71.4531 202.565 72.957 cv
203.442 72.957 li
203.452 72.5291 203.492 72.29 203.601 72.0701 cv
203.801 71.6821 204.239 71.4431 204.787 71.4431 cv
205.564 71.4431 206.033 71.9011 206.033 72.6481 cv
206.033 73.1461 205.853 73.4451 205.465 73.6041 cv
205.225 73.704 204.917 73.744 204.299 73.754 cv
204.299 74.502 li
f
208.544 79.852 mo
209.54 78.546 210.168 76.734 210.168 75.169 cv
210.168 73.595 209.54 71.782 208.544 70.477 cv
207.996 70.477 li
208.873 71.902 209.361 73.576 209.361 75.169 cv
209.361 76.753 208.873 78.437 207.996 79.852 cv
208.544 79.852 li
f
146.419 2.04303 mo
147.306 2.04303 li
147.425 2.04303 147.545 2.05304 147.664 2.05304 cv
148.999 2.05304 li
148.999 1.40509 li
142.941 1.40509 li
142.941 2.05304 li
144.276 2.05304 li
144.396 2.05304 144.515 2.04303 144.636 2.04303 cv
145.532 2.04303 li
145.532 8.26007 li
146.419 8.26007 li
146.419 2.04303 li
f
153.021 7.47498 mo
153.021 6.70801 152.931 6.15698 152.61 5.66803 cv
152.393 5.34802 151.961 5.06903 151.403 5.06903 cv
149.785 5.06903 149.785 6.97302 149.785 7.47498 cv
149.785 7.97699 149.785 9.83899 151.403 9.83899 cv
153.021 9.83899 153.021 7.97699 153.021 7.47498 cv
cp
151.403 9.64398 mo
151.083 9.64398 150.657 9.45502 150.517 8.88403 cv
150.42 8.47198 150.42 7.90002 150.42 7.38403 cv
150.42 6.875 150.42 6.34503 150.524 5.961 cv
150.671 5.41101 151.117 5.26398 151.403 5.26398 cv
151.78 5.26398 152.142 5.495 152.268 5.89899 cv
152.38 6.27502 152.387 6.77698 152.387 7.38403 cv
152.387 7.90002 152.387 8.41602 152.296 8.85602 cv
152.156 9.48999 151.682 9.64398 151.403 9.64398 cv
f
135.193 26.851 mo
135.103 26.871 135.063 26.871 135.014 26.871 cv
134.724 26.871 134.565 26.722 134.565 26.462 cv
134.565 23.394 li
134.565 22.468 133.888 21.9691 132.602 21.9691 cv
131.846 21.9691 131.218 22.188 130.869 22.577 cv
130.63 22.8461 130.53 23.145 130.511 23.663 cv
131.348 23.663 li
131.417 23.025 131.796 22.736 132.573 22.736 cv
133.32 22.736 133.738 23.0161 133.738 23.514 cv
133.738 23.733 li
133.738 24.082 133.529 24.231 132.872 24.311 cv
131.696 24.46 131.516 24.5001 131.198 24.629 cv
130.591 24.8781 130.281 25.347 130.281 26.024 cv
130.281 26.9711 130.939 27.5681 131.995 27.5681 cv
132.652 27.5681 133.181 27.3391 133.768 26.801 cv
133.828 27.329 134.087 27.5681 134.625 27.5681 cv
134.795 27.5681 134.924 27.548 135.193 27.4791 cv
135.193 26.851 li
cp
133.738 25.6951 mo
133.738 25.975 133.659 26.144 133.41 26.373 cv
133.071 26.6821 132.663 26.8411 132.175 26.8411 cv
131.527 26.8411 131.148 26.532 131.148 26.004 cv
131.148 25.457 131.516 25.1771 132.403 25.048 cv
133.28 24.928 133.46 24.889 133.738 24.759 cv
133.738 25.6951 li
f
137.515 26.303 mo
136.479 26.303 li
136.479 27.339 li
137.515 27.339 li
cp
137.515 22.119 mo
136.479 22.119 li
136.479 23.155 li
137.515 23.155 li
cp
f
148.315 27.339 mo
150.158 20.076 li
149.122 20.076 li
147.787 25.974 li
146.134 20.076 li
145.137 20.076 li
143.523 25.974 li
142.158 20.076 li
141.122 20.076 li
142.985 27.339 li
144.001 27.339 li
145.625 21.371 li
147.299 27.339 li
148.315 27.339 li
f
153.172 24.64 mo
154.926 22.119 li
153.989 22.119 li
152.733 24.012 li
151.478 22.119 li
150.532 22.119 li
152.275 24.679 li
150.432 27.34 li
151.379 27.34 li
152.704 25.337 li
154.009 27.34 li
154.975 27.34 li
153.172 24.64 li
f
160.623 23.822 mo
155.801 23.822 li
155.801 24.5201 li
160.623 24.5201 li
cp
160.623 25.5361 mo
155.801 25.5361 li
155.801 26.233 li
160.623 26.233 li
cp
f
163.643 22.308 mo
163.643 27.339 li
164.52 27.339 li
164.52 20.276 li
163.942 20.276 li
163.634 21.362 163.434 21.511 162.079 21.681 cv
162.079 22.308 li
163.643 22.308 li
f
130.521 51.877 mo
130.521 59.14 li
131.268 59.14 li
131.268 58.472 li
131.667 59.08 132.194 59.369 132.922 59.369 cv
134.297 59.369 135.193 58.243 135.193 56.509 cv
135.193 54.816 134.337 53.77 132.962 53.77 cv
132.244 53.77 131.736 54.0391 131.348 54.627 cv
131.348 51.877 li
130.521 51.877 li
cp
132.803 54.5471 mo
133.729 54.5471 134.327 55.3541 134.327 56.5991 cv
134.327 57.785 133.709 58.592 132.803 58.592 cv
131.926 58.592 131.348 57.795 131.348 56.5701 cv
131.348 55.3441 131.926 54.5471 132.803 54.5471 cv
f
137.635 58.104 mo
136.599 58.104 li
136.599 59.14 li
137.635 59.14 li
cp
137.635 53.919 mo
136.599 53.919 li
136.599 54.955 li
137.635 54.955 li
cp
f
148.435 59.14 mo
150.278 51.8771 li
149.242 51.8771 li
147.907 57.775 li
146.253 51.8771 li
145.257 51.8771 li
143.643 57.775 li
142.278 51.8771 li
141.242 51.8771 li
143.105 59.14 li
144.121 59.14 li
145.745 53.1721 li
147.419 59.14 li
148.435 59.14 li
f
154.009 53.919 mo
152.563 57.983 li
151.228 53.919 li
150.342 53.919 li
152.105 59.1591 li
151.787 59.986 li
151.657 60.3541 151.468 60.494 151.119 60.494 cv
151 60.494 150.86 60.475 150.681 60.4351 cv
150.681 61.182 li
150.85 61.2711 151.019 61.312 151.238 61.312 cv
151.508 61.312 151.797 61.222 152.015 61.062 cv
152.274 60.873 152.424 60.653 152.584 60.235 cv
154.905 53.919 li
154.009 53.919 li
f
160.503 55.622 mo
155.681 55.622 li
155.681 56.3201 li
160.503 56.3201 li
cp
160.503 57.3361 mo
155.681 57.3361 li
155.681 58.033 li
160.503 58.033 li
cp
f
163.523 54.109 mo
163.523 59.14 li
164.399 59.14 li
164.399 52.076 li
163.822 52.076 li
163.513 53.162 163.313 53.312 161.959 53.481 cv
161.959 54.109 li
163.523 54.109 li
f
196.355 23.872 mo
196.315 23.364 196.206 23.036 196.007 22.747 cv
195.648 22.2581 195.02 21.9691 194.293 21.9691 cv
192.889 21.9691 191.972 23.085 191.972 24.819 cv
191.972 26.502 192.868 27.5681 194.283 27.5681 cv
195.528 27.5681 196.315 26.821 196.415 25.546 cv
195.578 25.546 li
195.439 26.3831 195.011 26.801 194.304 26.801 cv
193.387 26.801 192.839 26.054 192.839 24.819 cv
192.839 23.514 193.377 22.736 194.283 22.736 cv
194.98 22.736 195.419 23.145 195.518 23.872 cv
196.355 23.872 li
f
198.835 26.303 mo
197.799 26.303 li
197.799 27.339 li
198.835 27.339 li
cp
198.835 22.119 mo
197.799 22.119 li
197.799 23.155 li
198.835 23.155 li
cp
f
204.076 24.211 mo
206.468 24.211 li
207.294 24.211 207.663 24.609 207.663 25.506 cv
207.653 26.1541 li
207.653 26.6021 207.732 27.041 207.862 27.3391 cv
208.988 27.3391 li
208.988 27.11 li
208.64 26.871 208.569 26.612 208.55 25.6461 cv
208.54 24.45 208.35 24.091 207.563 23.7531 cv
208.38 23.354 208.709 22.846 208.709 22.019 cv
208.709 20.764 207.922 20.077 206.497 20.077 cv
203.149 20.077 li
203.149 27.3391 li
204.076 27.3391 li
204.076 24.211 li
cp
204.076 23.394 mo
204.076 20.894 li
206.318 20.894 li
206.836 20.894 207.135 20.973 207.364 21.1721 cv
207.613 21.382 207.742 21.71 207.742 22.149 cv
207.742 23.005 207.305 23.394 206.318 23.394 cv
204.076 23.394 li
f
213.289 22.119 mo
211.845 26.183 li
210.509 22.119 li
209.623 22.119 li
211.386 27.3591 li
211.067 28.186 li
210.937 28.5541 210.748 28.694 210.399 28.694 cv
210.28 28.694 210.14 28.6741 209.961 28.634 cv
209.961 29.382 li
210.131 29.4711 210.3 29.511 210.519 29.511 cv
210.788 29.511 211.077 29.421 211.296 29.262 cv
211.556 29.0731 211.705 28.853 211.864 28.4351 cv
214.185 22.119 li
213.289 22.119 li
f
219.783 23.822 mo
214.962 23.822 li
214.962 24.5201 li
219.783 24.5201 li
cp
219.783 25.5361 mo
214.962 25.5361 li
214.962 26.233 li
219.783 26.233 li
cp
f
222.804 22.308 mo
222.804 27.339 li
223.681 27.339 li
223.681 20.276 li
223.102 20.276 li
222.794 21.362 222.595 21.511 221.239 21.681 cv
221.239 22.308 li
222.804 22.308 li
f
206.898 2.04303 mo
207.785 2.04303 li
207.905 2.04303 208.024 2.05304 208.144 2.05304 cv
209.479 2.05304 li
209.479 1.40509 li
203.422 1.40509 li
203.422 2.05304 li
204.757 2.05304 li
204.876 2.05304 204.996 2.04303 205.115 2.04303 cv
206.012 2.04303 li
206.012 8.26007 li
206.898 8.26007 li
206.898 2.04303 li
f
212.239 5.26398 mo
212.239 5.07599 212.225 5.06903 212.03 5.06903 cv
211.584 5.508 210.949 5.51501 210.663 5.51501 cv
210.663 5.76599 li
210.83 5.76599 211.291 5.76599 211.675 5.57098 cv
211.675 9.12701 li
211.675 9.35803 211.675 9.44904 210.976 9.44904 cv
210.712 9.44904 li
210.712 9.70001 li
210.838 9.69202 211.695 9.67102 211.953 9.67102 cv
212.17 9.67102 213.048 9.69202 213.201 9.70001 cv
213.201 9.44904 li
212.936 9.44904 li
212.239 9.44904 212.239 9.35803 212.239 9.12701 cv
212.239 5.26398 li
f
196.354 51.877 mo
195.527 51.877 li
195.527 54.577 li
195.179 54.0491 194.621 53.77 193.924 53.77 cv
192.568 53.77 191.682 54.856 191.682 56.52 cv
191.682 58.283 192.549 59.369 193.953 59.369 cv
194.671 59.369 195.169 59.1 195.617 58.4531 cv
195.617 59.14 li
196.354 59.14 li
196.354 51.877 li
cp
194.063 54.5471 mo
194.96 54.5471 195.527 55.3441 195.527 56.5891 cv
195.527 57.795 194.949 58.592 194.073 58.592 cv
193.156 58.592 192.549 57.785 192.549 56.5701 cv
192.549 55.3541 193.156 54.5471 194.063 54.5471 cv
f
199.075 58.104 mo
198.039 58.104 li
198.039 59.14 li
199.075 59.14 li
cp
199.075 53.919 mo
198.039 53.919 li
198.039 54.955 li
199.075 54.955 li
cp
f
204.315 56.011 mo
206.707 56.011 li
207.534 56.011 207.902 56.409 207.902 57.306 cv
207.892 57.954 li
207.892 58.403 207.972 58.841 208.101 59.14 cv
209.227 59.14 li
209.227 58.91 li
208.879 58.671 208.808 58.412 208.789 57.446 cv
208.779 56.25 208.59 55.892 207.803 55.553 cv
208.62 55.154 208.948 54.647 208.948 53.82 cv
208.948 52.564 208.161 51.877 206.736 51.877 cv
203.39 51.877 li
203.39 59.14 li
204.315 59.14 li
204.315 56.011 li
cp
204.315 55.195 mo
204.315 52.694 li
206.557 52.694 li
207.075 52.694 207.374 52.773 207.603 52.972 cv
207.852 53.182 207.982 53.51 207.982 53.948 cv
207.982 54.806 207.544 55.195 206.557 55.195 cv
204.315 55.195 li
f
212.572 56.44 mo
214.325 53.919 li
213.389 53.919 li
212.134 55.812 li
210.878 53.919 li
209.932 53.919 li
211.675 56.48 li
209.832 59.14 li
210.778 59.14 li
212.103 57.137 li
213.409 59.14 li
214.375 59.14 li
212.572 56.44 li
f
220.022 55.622 mo
215.201 55.622 li
215.201 56.3201 li
220.022 56.3201 li
cp
220.022 57.3361 mo
215.201 57.3361 li
215.201 58.033 li
220.022 58.033 li
cp
f
223.202 52.076 mo
222.545 52.076 221.947 52.365 221.578 52.853 cv
221.12 53.471 220.891 54.417 220.891 55.722 cv
220.891 58.104 221.688 59.368 223.202 59.368 cv
224.697 59.368 225.514 58.104 225.514 55.783 cv
225.514 54.408 225.295 53.49 224.826 52.853 cv
224.458 52.355 223.87 52.076 223.202 52.076 cv
cp
223.202 52.853 mo
224.149 52.853 224.617 53.809 224.617 55.703 cv
224.617 57.705 224.159 58.641 223.182 58.641 cv
222.256 58.641 221.788 57.665 221.788 55.733 cv
221.788 53.8 222.256 52.853 223.202 52.853 cv
f
185.98 52.803 mo
185.98 56.979 li
186.65 56.979 li
186.65 54.811 li
186.65 54.214 186.802 53.823 187.12 53.592 cv
187.328 53.44 187.527 53.392 187.989 53.385 cv
187.989 52.707 li
187.878 52.691 187.822 52.683 187.734 52.683 cv
187.301 52.683 186.972 52.938 186.587 53.56 cv
186.587 52.803 li
185.98 52.803 li
.00772107 1 1 .00366217 cmyk
f
190.119 52.803 mo
189.426 52.803 li
189.426 52.149 li
189.426 51.87 189.585 51.727 189.888 51.727 cv
189.944 51.727 189.968 51.727 190.119 51.735 cv
190.119 51.185 li
189.968 51.153 189.88 51.145 189.744 51.145 cv
189.131 51.145 188.765 51.496 188.765 52.094 cv
188.765 52.803 li
188.206 52.803 li
188.206 53.345 li
188.765 53.345 li
188.765 56.979 li
189.426 56.979 li
189.426 53.345 li
190.119 53.345 li
190.119 52.803 li
f
180.221 45.003 mo
180.221 49.179 li
180.89 49.179 li
180.89 47.012 li
180.89 46.414 181.042 46.024 181.36 45.792 cv
181.568 45.641 181.767 45.593 182.229 45.585 cv
182.229 44.907 li
182.118 44.892 182.062 44.883 181.974 44.883 cv
181.541 44.883 181.212 45.139 180.827 45.76 cv
180.827 45.003 li
180.221 45.003 li
f
184.359 45.003 mo
183.666 45.003 li
183.666 44.35 li
183.666 44.07 183.825 43.927 184.128 43.927 cv
184.184 43.927 184.208 43.927 184.359 43.935 cv
184.359 43.385 li
184.208 43.353 184.12 43.345 183.984 43.345 cv
183.371 43.345 183.005 43.696 183.005 44.294 cv
183.005 45.003 li
182.446 45.003 li
182.446 45.545 li
183.005 45.545 li
183.005 49.179 li
183.666 49.179 li
183.666 45.545 li
184.359 45.545 li
184.359 45.003 li
f
197.501 43.717 mo
198.171 43.717 li
198.171 41.541 li
198.52 41.971 198.909 42.163 199.449 42.163 cv
200.523 42.163 201.231 41.294 201.231 39.963 cv
201.231 38.56 200.547 37.684 199.441 37.684 cv
198.874 37.684 198.419 37.939 198.107 38.433 cv
198.107 37.803 li
197.493 37.803 li
197.501 43.717 li
cp
199.33 38.305 mo
200.061 38.305 200.538 38.951 200.538 39.947 cv
200.538 40.896 200.054 41.541 199.33 41.541 cv
198.632 41.541 198.171 40.904 198.171 39.923 cv
198.171 38.943 198.632 38.305 199.33 38.305 cv
.72195 .689113 .649531 .889921 cmyk
f
203.671 37.684 mo
202.499 37.684 201.79 38.5211 201.79 39.923 cv
201.79 41.326 202.491 42.163 203.679 42.163 cv
204.85 42.163 205.567 41.326 205.567 39.9551 cv
205.567 38.5131 204.874 37.684 203.671 37.684 cv
cp
203.679 38.298 mo
204.428 38.298 204.874 38.912 204.874 39.947 cv
204.874 40.928 204.412 41.5491 203.679 41.5491 cv
202.937 41.5491 202.483 40.936 202.483 39.923 cv
202.483 38.9191 202.937 38.298 203.679 38.298 cv
f
137.021 43.717 mo
137.69 43.717 li
137.69 41.541 li
138.04 41.971 138.43 42.163 138.97 42.163 cv
140.043 42.163 140.751 41.294 140.751 39.963 cv
140.751 38.56 140.067 37.684 138.962 37.684 cv
138.394 37.684 137.938 37.939 137.627 38.433 cv
137.627 37.803 li
137.014 37.803 li
137.021 43.717 li
cp
138.85 38.305 mo
139.581 38.305 140.057 38.951 140.057 39.947 cv
140.057 40.896 139.573 41.541 138.85 41.541 cv
138.151 41.541 137.69 40.904 137.69 39.923 cv
137.69 38.943 138.151 38.305 138.85 38.305 cv
f
143.19 37.684 mo
142.019 37.684 141.309 38.5211 141.309 39.923 cv
141.309 41.326 142.011 42.163 143.198 42.163 cv
144.37 42.163 145.088 41.326 145.088 39.9551 cv
145.088 38.5131 144.394 37.684 143.19 37.684 cv
cp
143.198 38.298 mo
143.948 38.298 144.394 38.912 144.394 39.947 cv
144.394 40.928 143.932 41.5491 143.198 41.5491 cv
142.457 41.5491 142.003 40.936 142.003 39.923 cv
142.003 38.9191 142.457 38.298 143.198 38.298 cv
f
57.243 113.18 mo
57.243 112.219 56.464 111.44 55.503 111.44 cv
54.542 111.44 53.763 112.219 53.763 113.18 cv
53.763 114.141 54.542 114.919 55.503 114.919 cv
56.464 114.919 57.243 114.141 57.243 113.18 cv
.00772107 1 1 .00366217 cmyk
ef
57.243 113.18 mo
57.243 112.219 56.464 111.44 55.503 111.44 cv
54.542 111.44 53.763 112.219 53.763 113.18 cv
53.763 114.141 54.542 114.919 55.503 114.919 cv
56.464 114.919 57.243 114.141 57.243 113.18 cv
cp
@
2 lj
57.063 113.9 mo
57.123 113.9 li
58.722 114.579 60.296 115.254 61.863 115.999 cv
61.923 115.999 li
@
19.203 129.919 mo
19.203 145.699 li
.72195 .689113 .649531 .889921 cmyk
@
20.463 145.82 mo
19.203 149.419 li
17.943 145.82 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
20.463 145.82 mo
19.203 149.419 li
17.943 145.82 li
20.463 145.82 li
cp
.72195 .689113 .649531 .889921 cmyk
@
2 lj
30.843 129.919 mo
30.903 129.98 li
42.082 135.711 53.229 141.618 64.323 147.499 cv
64.383 147.499 li
.00772107 1 1 .00366217 cmyk
@
65.463 146.659 mo
68.043 149.419 li
64.263 148.879 li
ef
0 lj
65.463 146.659 mo
68.043 149.419 li
64.263 148.879 li
65.463 146.659 li
cp
@
2 lj
79.683 129.919 mo
79.683 145.699 li
.72195 .689113 .649531 .889921 cmyk
@
80.943 145.82 mo
79.683 149.419 li
78.423 145.82 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
80.943 145.82 mo
79.683 149.419 li
78.423 145.82 li
80.943 145.82 li
cp
.72195 .689113 .649531 .889921 cmyk
@
62.823 115.039 mo
65.643 117.619 li
61.863 117.32 li
.00772107 1 1 .00366217 cmyk
ef
62.823 115.039 mo
65.643 117.619 li
61.863 117.32 li
62.823 115.039 li
cp
@
14.53 174.269 mo
14.53 179.499 li
15.367 179.499 li
15.367 176.222 li
15.367 175.465 15.912 174.857 16.587 174.857 cv
17.201 174.857 17.549 175.236 17.549 175.904 cv
17.549 179.499 li
18.385 179.499 li
18.385 176.222 li
18.385 175.465 18.933 174.857 19.611 174.857 cv
20.219 174.857 20.577 175.245 20.577 175.904 cv
20.577 179.499 li
21.414 179.499 li
21.414 175.584 li
21.414 174.648 20.876 174.13 19.9 174.13 cv
19.202 174.13 18.784 174.339 18.296 174.927 cv
17.988 174.368 17.57 174.13 16.894 174.13 cv
16.196 174.13 15.736 174.389 15.287 175.017 cv
15.287 174.269 li
14.53 174.269 li
.72195 .689113 .649531 .889921 cmyk
f
22.651 181.671 mo
23.488 181.671 li
23.488 178.951 li
23.924 179.489 24.411 179.729 25.087 179.729 cv
26.429 179.729 27.314 178.643 27.314 176.979 cv
27.314 175.226 26.459 174.13 25.077 174.13 cv
24.367 174.13 23.798 174.448 23.408 175.067 cv
23.408 174.28 li
22.641 174.28 li
22.651 181.671 li
cp
24.938 174.906 mo
25.851 174.906 26.447 175.714 26.447 176.959 cv
26.447 178.145 25.841 178.951 24.938 178.951 cv
24.064 178.951 23.488 178.155 23.488 176.929 cv
23.488 175.703 24.064 174.906 24.938 174.906 cv
f
32.734 172.237 mo
31.738 173.542 31.11 175.355 31.11 176.919 cv
31.11 178.493 31.738 180.307 32.734 181.612 cv
33.282 181.612 li
32.405 180.187 31.917 178.513 31.917 176.919 cv
31.917 175.335 32.405 173.652 33.282 172.237 cv
32.734 172.237 li
f
38.675 172.237 mo
37.848 172.237 li
37.848 174.937 li
37.499 174.408 36.941 174.13 36.244 174.13 cv
34.889 174.13 34.002 175.216 34.002 176.879 cv
34.002 178.643 34.869 179.729 36.274 179.729 cv
36.991 179.729 37.489 179.46 37.938 178.812 cv
37.938 179.499 li
38.675 179.499 li
38.675 172.237 li
cp
36.383 174.906 mo
37.28 174.906 37.848 175.703 37.848 176.949 cv
37.848 178.155 37.27 178.951 36.393 178.951 cv
35.477 178.951 34.869 178.145 34.869 176.929 cv
34.869 175.714 35.477 174.906 36.383 174.906 cv
f
44.593 179.011 mo
44.503 179.031 44.463 179.031 44.413 179.031 cv
44.125 179.031 43.965 178.882 43.965 178.623 cv
43.965 175.554 li
43.965 174.628 43.288 174.13 42.003 174.13 cv
41.245 174.13 40.618 174.349 40.269 174.738 cv
40.03 175.006 39.93 175.305 39.91 175.823 cv
40.747 175.823 li
40.817 175.186 41.196 174.897 41.973 174.897 cv
42.72 174.897 43.138 175.176 43.138 175.674 cv
43.138 175.893 li
43.138 176.241 42.929 176.391 42.272 176.471 cv
41.096 176.62 40.917 176.66 40.598 176.789 cv
39.99 177.039 39.681 177.507 39.681 178.185 cv
39.681 179.131 40.339 179.729 41.395 179.729 cv
42.052 179.729 42.58 179.499 43.168 178.961 cv
43.228 179.489 43.487 179.729 44.025 179.729 cv
44.195 179.729 44.324 179.709 44.593 179.639 cv
44.593 179.011 li
cp
43.138 177.856 mo
43.138 178.135 43.059 178.304 42.809 178.533 cv
42.471 178.842 42.062 179.001 41.574 179.001 cv
40.926 179.001 40.548 178.693 40.548 178.164 cv
40.548 177.616 40.917 177.338 41.803 177.208 cv
42.68 177.089 42.859 177.049 43.138 176.919 cv
43.138 177.856 li
f
47.313 174.28 mo
46.457 174.28 li
46.457 172.845 li
45.629 172.845 li
45.629 174.28 li
44.922 174.28 li
44.922 174.956 li
45.629 174.956 li
45.629 178.902 li
45.629 179.43 45.988 179.729 46.636 179.729 cv
46.835 179.729 47.034 179.709 47.313 179.659 cv
47.313 178.961 li
47.204 178.991 47.074 179.001 46.915 179.001 cv
46.556 179.001 46.457 178.902 46.457 178.533 cv
46.457 174.956 li
47.313 174.956 li
47.313 174.28 li
f
52.873 179.011 mo
52.783 179.031 52.744 179.031 52.694 179.031 cv
52.405 179.031 52.246 178.882 52.246 178.623 cv
52.246 175.554 li
52.246 174.628 51.568 174.13 50.283 174.13 cv
49.526 174.13 48.898 174.349 48.549 174.738 cv
48.31 175.006 48.21 175.305 48.19 175.823 cv
49.027 175.823 li
49.097 175.186 49.476 174.897 50.253 174.897 cv
51 174.897 51.418 175.176 51.418 175.674 cv
51.418 175.893 li
51.418 176.241 51.209 176.391 50.552 176.471 cv
49.376 176.62 49.197 176.66 48.878 176.789 cv
48.271 177.039 47.961 177.507 47.961 178.185 cv
47.961 179.131 48.619 179.729 49.675 179.729 cv
50.333 179.729 50.861 179.499 51.448 178.961 cv
51.508 179.489 51.767 179.729 52.305 179.729 cv
52.475 179.729 52.604 179.709 52.873 179.639 cv
52.873 179.011 li
cp
51.418 177.856 mo
51.418 178.135 51.339 178.304 51.09 178.533 cv
50.751 178.842 50.343 179.001 49.855 179.001 cv
49.207 179.001 48.828 178.693 48.828 178.164 cv
48.828 177.616 49.197 177.338 50.084 177.208 cv
50.96 177.089 51.14 177.049 51.418 176.919 cv
51.418 177.856 li
f
55.591 174.406 mo
54.724 174.406 li
54.724 173.589 li
54.724 173.24 54.923 173.061 55.302 173.061 cv
55.372 173.061 55.402 173.061 55.591 173.072 cv
55.591 172.374 li
55.402 172.342 55.292 172.334 55.123 172.334 cv
54.356 172.334 53.897 172.773 53.897 173.52 cv
53.897 174.406 li
53.2 174.406 li
53.2 175.083 li
53.897 175.083 li
53.897 179.626 li
54.724 179.626 li
54.724 175.083 li
55.591 175.083 li
55.591 174.406 li
cp
57.315 172.354 mo
56.488 172.354 li
56.488 179.626 li
57.315 179.626 li
cp
f
60.781 174.13 mo
59.317 174.13 58.4299 175.176 58.4299 176.929 cv
58.4299 178.683 59.306 179.729 60.791 179.729 cv
62.256 179.729 63.1519 178.683 63.1519 176.969 cv
63.1519 175.166 62.285 174.13 60.781 174.13 cv
cp
60.791 174.897 mo
61.727 174.897 62.285 175.664 62.285 176.959 cv
62.285 178.185 61.7079 178.961 60.791 178.961 cv
59.865 178.961 59.297 178.195 59.297 176.929 cv
59.297 175.674 59.865 174.897 60.791 174.897 cv
f
68.99 179.499 mo
70.524 174.28 li
69.588 174.28 li
68.5509 178.344 li
67.5249 174.28 li
66.509 174.28 li
65.513 178.344 li
64.447 174.28 li
63.53 174.28 li
65.045 179.499 li
65.981 179.499 li
66.988 175.405 li
68.043 179.499 li
68.99 179.499 li
f
78.472 178.633 mo
74.756 178.633 li
74.846 178.055 75.164 177.687 76.031 177.178 cv
77.027 176.64 li
78.014 176.103 78.522 175.375 78.522 174.508 cv
78.522 173.92 78.2829 173.372 77.864 172.994 cv
77.446 172.615 76.928 172.436 76.26 172.436 cv
75.364 172.436 74.696 172.755 74.308 173.353 cv
74.0589 173.732 73.949 174.169 73.9289 174.887 cv
74.806 174.887 li
74.8349 174.408 74.8949 174.119 75.015 173.891 cv
75.2439 173.462 75.703 173.203 76.23 173.203 cv
77.027 173.203 77.625 173.771 77.625 174.529 cv
77.625 175.086 77.2959 175.565 76.669 175.923 cv
75.752 176.441 li
74.278 177.278 73.85 177.946 73.769 179.499 cv
78.472 179.499 li
78.472 178.633 li
f
79.877 181.612 mo
80.8729 180.307 81.501 178.493 81.501 176.929 cv
81.501 175.355 80.8729 173.542 79.877 172.237 cv
79.329 172.237 li
80.2059 173.661 80.694 175.335 80.694 176.929 cv
80.694 178.513 80.2059 180.197 79.329 181.612 cv
79.877 181.612 li
f
17.419 103.803 mo
18.3049 103.803 li
18.425 103.803 18.545 103.813 18.664 103.813 cv
19.9989 103.813 li
19.9989 103.165 li
13.942 103.165 li
13.942 103.813 li
15.2769 103.813 li
15.397 103.813 15.5159 103.803 15.6349 103.803 cv
16.532 103.803 li
16.532 110.02 li
17.419 110.02 li
17.419 103.803 li
f
24.021 109.235 mo
24.021 108.468 23.93 107.917 23.609 107.429 cv
23.393 107.108 22.961 106.829 22.403 106.829 cv
20.785 106.829 20.785 108.733 20.785 109.235 cv
20.785 109.738 20.785 111.599 22.403 111.599 cv
24.021 111.599 24.021 109.738 24.021 109.235 cv
cp
22.403 111.404 mo
22.082 111.404 21.657 111.216 21.517 110.644 cv
21.42 110.233 21.42 109.66 21.42 109.145 cv
21.42 108.635 21.42 108.106 21.524 107.722 cv
21.671 107.171 22.117 107.025 22.403 107.025 cv
22.78 107.025 23.142 107.254 23.267 107.659 cv
23.379 108.035 23.386 108.537 23.386 109.145 cv
23.386 109.66 23.386 110.177 23.295 110.615 cv
23.156 111.25 22.682 111.404 22.403 111.404 cv
f
6.07297 128.612 mo
5.98396 128.631 5.94395 128.631 5.89397 128.631 cv
5.60497 128.631 5.44595 128.482 5.44595 128.223 cv
5.44595 125.155 li
5.44595 124.228 4.76796 123.73 3.48296 123.73 cv
2.72597 123.73 2.09796 123.948 1.74896 124.337 cv
1.50996 124.607 1.40996 124.905 1.39096 125.423 cv
2.22696 125.423 li
2.29697 124.785 2.67596 124.496 3.45296 124.496 cv
4.19997 124.496 4.61797 124.776 4.61797 125.274 cv
4.61797 125.493 li
4.61797 125.842 4.40897 125.991 3.75195 126.071 cv
2.57596 126.22 2.39696 126.26 2.07796 126.39 cv
1.46996 126.639 1.16096 127.107 1.16096 127.784 cv
1.16096 128.731 1.81895 129.328 2.87495 129.328 cv
3.53197 129.328 4.06096 129.1 4.64796 128.562 cv
4.70796 129.09 4.96696 129.328 5.50496 129.328 cv
5.67496 129.328 5.80396 129.309 6.07297 129.239 cv
6.07297 128.612 li
cp
4.61797 127.455 mo
4.61797 127.735 4.53896 127.905 4.28996 128.133 cv
3.95096 128.442 3.54295 128.602 3.05396 128.602 cv
2.40697 128.602 2.02795 128.292 2.02795 127.765 cv
2.02795 127.217 2.39696 126.938 3.28296 126.808 cv
4.15996 126.689 4.33997 126.649 4.61797 126.519 cv
4.61797 127.455 li
f
8.39497 128.064 mo
7.35896 128.064 li
7.35896 129.1 li
8.39497 129.1 li
cp
8.39497 123.879 mo
7.35896 123.879 li
7.35896 124.915 li
8.39497 124.915 li
cp
f
19.195 129.1 mo
21.0379 121.837 li
20.002 121.837 li
18.6669 127.735 li
17.013 121.837 li
16.017 121.837 li
14.403 127.735 li
13.0379 121.837 li
12.002 121.837 li
13.865 129.1 li
14.881 129.1 li
16.505 123.132 li
18.179 129.1 li
19.195 129.1 li
f
24.052 126.4 mo
25.805 123.879 li
24.869 123.879 li
23.613 125.772 li
22.358 123.879 li
21.412 123.879 li
23.155 126.44 li
21.312 129.1 li
22.259 129.1 li
23.584 127.097 li
24.889 129.1 li
25.855 129.1 li
24.052 126.4 li
f
31.503 125.582 mo
26.681 125.582 li
26.681 126.28 li
31.503 126.28 li
cp
31.503 127.296 mo
26.681 127.296 li
26.681 127.993 li
31.503 127.993 li
cp
f
34.523 124.069 mo
34.523 129.1 li
35.4 129.1 li
35.4 122.036 li
34.822 122.036 li
34.513 123.122 34.3139 123.272 32.959 123.441 cv
32.959 124.069 li
34.523 124.069 li
f
1.40097 153.637 mo
1.40097 160.9 li
2.14796 160.9 li
2.14796 160.232 li
2.54697 160.84 3.07396 161.129 3.80196 161.129 cv
5.17596 161.129 6.07297 160.003 6.07297 158.27 cv
6.07297 156.575 5.21596 155.53 3.84096 155.53 cv
3.12396 155.53 2.61597 155.799 2.22797 156.387 cv
2.22797 153.637 li
1.40097 153.637 li
cp
3.68196 156.307 mo
4.60896 156.307 5.20697 157.113 5.20697 158.359 cv
5.20697 159.544 4.58896 160.352 3.68196 160.352 cv
2.80496 160.352 2.22797 159.555 2.22797 158.329 cv
2.22797 157.104 2.80496 156.307 3.68196 156.307 cv
f
8.51497 159.863 mo
7.47896 159.863 li
7.47896 160.9 li
8.51497 160.9 li
cp
8.51497 155.679 mo
7.47896 155.679 li
7.47896 156.715 li
8.51497 156.715 li
cp
f
19.315 160.9 mo
21.158 153.637 li
20.122 153.637 li
18.787 159.534 li
17.133 153.637 li
16.137 153.637 li
14.522 159.534 li
13.158 153.637 li
12.122 153.637 li
13.985 160.9 li
15.001 160.9 li
16.625 154.932 li
18.298 160.9 li
19.315 160.9 li
f
24.888 155.679 mo
23.444 159.744 li
22.109 155.679 li
21.222 155.679 li
22.985 160.919 li
22.666 161.746 li
22.537 162.115 22.348 162.254 21.999 162.254 cv
21.88 162.254 21.74 162.235 21.561 162.195 cv
21.561 162.942 li
21.73 163.031 21.899 163.072 22.118 163.072 cv
22.388 163.072 22.677 162.982 22.896 162.822 cv
23.155 162.633 23.304 162.414 23.464 161.995 cv
25.785 155.679 li
24.888 155.679 li
f
31.383 157.383 mo
26.561 157.383 li
26.561 158.08 li
31.383 158.08 li
cp
31.383 159.096 mo
26.561 159.096 li
26.561 159.793 li
31.383 159.793 li
cp
f
34.403 155.868 mo
34.403 160.9 li
35.279 160.9 li
35.279 153.836 li
34.702 153.836 li
34.393 154.922 34.193 155.072 32.839 155.24 cv
32.839 155.868 li
34.403 155.868 li
f
67.234 153.637 mo
66.4069 153.637 li
66.4069 156.336 li
66.0589 155.809 65.501 155.53 64.8029 155.53 cv
63.448 155.53 62.562 156.615 62.562 158.28 cv
62.562 160.043 63.4279 161.129 64.833 161.129 cv
65.5499 161.129 66.0489 160.86 66.4969 160.212 cv
66.4969 160.9 li
67.234 160.9 li
67.234 153.637 li
cp
64.943 156.307 mo
65.84 156.307 66.4069 157.104 66.4069 158.349 cv
66.4069 159.555 65.8289 160.352 64.953 160.352 cv
64.0359 160.352 63.4279 159.544 63.4279 158.329 cv
63.4279 157.113 64.0359 156.307 64.943 156.307 cv
f
69.955 159.863 mo
68.919 159.863 li
68.919 160.9 li
69.955 160.9 li
cp
69.955 155.679 mo
68.919 155.679 li
68.919 156.715 li
69.955 156.715 li
cp
f
75.316 157.772 mo
77.707 157.772 li
78.534 157.772 78.902 158.17 78.902 159.067 cv
78.892 159.714 li
78.892 160.162 78.9719 160.601 79.1019 160.9 cv
80.2269 160.9 li
80.2269 160.67 li
79.879 160.431 79.8089 160.172 79.789 159.206 cv
79.7789 158.01 79.59 157.652 78.803 157.313 cv
79.6199 156.914 79.948 156.406 79.948 155.579 cv
79.948 154.324 79.1609 153.637 77.737 153.637 cv
74.389 153.637 li
74.389 160.9 li
75.316 160.9 li
75.316 157.772 li
cp
75.316 156.954 mo
75.316 154.453 li
77.557 154.453 li
78.0749 154.453 78.3739 154.533 78.604 154.733 cv
78.853 154.942 78.9819 155.271 78.9819 155.709 cv
78.9819 156.566 78.544 156.954 77.557 156.954 cv
75.316 156.954 li
f
83.572 158.199 mo
85.325 155.679 li
84.389 155.679 li
83.134 157.572 li
81.878 155.679 li
80.932 155.679 li
82.675 158.239 li
80.832 160.9 li
81.7789 160.9 li
83.104 158.897 li
84.409 160.9 li
85.375 160.9 li
83.572 158.199 li
f
91.023 157.383 mo
86.2009 157.383 li
86.2009 158.08 li
91.023 158.08 li
cp
91.023 159.096 mo
86.2009 159.096 li
86.2009 159.793 li
91.023 159.793 li
cp
f
94.043 155.868 mo
94.043 160.9 li
94.9189 160.9 li
94.9189 153.836 li
94.3419 153.836 li
94.0329 154.922 93.8339 155.072 92.4789 155.24 cv
92.4789 155.868 li
94.043 155.868 li
f
77.899 103.803 mo
78.786 103.803 li
78.905 103.803 79.024 103.813 79.144 103.813 cv
80.479 103.813 li
80.479 103.165 li
74.422 103.165 li
74.422 103.813 li
75.7569 103.813 li
75.877 103.813 75.996 103.803 76.1149 103.803 cv
77.0119 103.803 li
77.0119 110.02 li
77.899 110.02 li
77.899 103.803 li
f
83.239 107.025 mo
83.239 106.836 83.225 106.829 83.03 106.829 cv
82.583 107.269 81.949 107.276 81.6629 107.276 cv
81.6629 107.527 li
81.8299 107.527 82.2909 107.527 82.674 107.331 cv
82.674 110.888 li
82.674 111.118 82.674 111.208 81.9769 111.208 cv
81.712 111.208 li
81.712 111.459 li
81.837 111.452 82.695 111.432 82.953 111.432 cv
83.169 111.432 84.048 111.452 84.2009 111.459 cv
84.2009 111.208 li
83.936 111.208 li
83.239 111.208 83.239 111.118 83.239 110.888 cv
83.239 107.025 li
f
67.355 125.632 mo
67.316 125.124 67.2059 124.795 67.0059 124.507 cv
66.648 124.019 66.0199 123.73 65.293 123.73 cv
63.888 123.73 62.972 124.846 62.972 126.579 cv
62.972 128.263 63.868 129.328 65.2829 129.328 cv
66.5279 129.328 67.316 128.581 67.415 127.306 cv
66.578 127.306 li
66.4379 128.143 66.01 128.562 65.303 128.562 cv
64.386 128.562 63.838 127.815 63.838 126.579 cv
63.838 125.274 64.377 124.496 65.2829 124.496 cv
65.9809 124.496 66.419 124.905 66.518 125.632 cv
67.355 125.632 li
f
69.835 128.064 mo
68.799 128.064 li
68.799 129.1 li
69.835 129.1 li
cp
69.835 123.879 mo
68.799 123.879 li
68.799 124.915 li
69.835 124.915 li
cp
f
74.956 125.971 mo
77.347 125.971 li
78.174 125.971 78.542 126.369 78.542 127.266 cv
78.533 127.914 li
78.533 128.363 78.612 128.801 78.742 129.1 cv
79.868 129.1 li
79.868 128.87 li
79.519 128.631 79.449 128.372 79.429 127.405 cv
79.419 126.21 79.23 125.852 78.443 125.513 cv
79.26 125.114 79.589 124.607 79.589 123.78 cv
79.589 122.524 78.802 121.837 77.377 121.837 cv
74.029 121.837 li
74.029 129.1 li
74.956 129.1 li
74.956 125.971 li
cp
74.956 125.155 mo
74.956 122.654 li
77.198 122.654 li
77.716 122.654 78.015 122.734 78.244 122.933 cv
78.493 123.142 78.622 123.471 78.622 123.909 cv
78.622 124.766 78.184 125.155 77.198 125.155 cv
74.956 125.155 li
f
84.168 123.879 mo
82.724 127.944 li
81.3889 123.879 li
80.5019 123.879 li
82.2649 129.119 li
81.9459 129.947 li
81.8169 130.315 81.6279 130.454 81.2789 130.454 cv
81.159 130.454 81.0199 130.435 80.84 130.395 cv
80.84 131.142 li
81.0099 131.232 81.1789 131.272 81.3979 131.272 cv
81.6669 131.272 81.9569 131.182 82.1749 131.023 cv
82.435 130.833 82.5839 130.613 82.7429 130.196 cv
85.0649 123.879 li
84.168 123.879 li
f
90.663 125.582 mo
85.841 125.582 li
85.841 126.28 li
90.663 126.28 li
cp
90.663 127.296 mo
85.841 127.296 li
85.841 127.993 li
90.663 127.993 li
cp
f
93.843 122.036 mo
93.185 122.036 92.588 122.324 92.2189 122.813 cv
91.761 123.431 91.532 124.377 91.532 125.682 cv
91.532 128.064 92.329 129.328 93.843 129.328 cv
95.337 129.328 96.155 128.064 96.155 125.742 cv
96.155 124.367 95.935 123.45 95.467 122.813 cv
95.0979 122.315 94.511 122.036 93.843 122.036 cv
cp
93.843 122.813 mo
94.789 122.813 95.2579 123.77 95.2579 125.662 cv
95.2579 127.665 94.7999 128.602 93.823 128.602 cv
92.897 128.602 92.429 127.625 92.429 125.693 cv
92.429 123.76 92.897 122.813 93.843 122.813 cv
f
56.861 122.883 mo
56.861 127.06 li
57.53 127.06 li
57.53 124.892 li
57.53 124.294 57.682 123.904 58.001 123.672 cv
58.2079 123.521 58.407 123.473 58.869 123.465 cv
58.869 122.787 li
58.7579 122.772 58.702 122.764 58.614 122.764 cv
58.181 122.764 57.852 123.019 57.4669 123.641 cv
57.4669 122.883 li
56.861 122.883 li
.00772107 1 1 .00366217 cmyk
f
60.999 122.883 mo
60.306 122.883 li
60.306 122.23 li
60.306 121.95 60.465 121.807 60.768 121.807 cv
60.824 121.807 60.848 121.807 60.999 121.816 cv
60.999 121.265 li
60.848 121.234 60.7599 121.226 60.625 121.226 cv
60.011 121.226 59.644 121.576 59.644 122.174 cv
59.644 122.883 li
59.086 122.883 li
59.086 123.425 li
59.644 123.425 li
59.644 127.06 li
60.306 127.06 li
60.306 123.425 li
60.999 123.425 li
60.999 122.883 li
f
44.021 146.883 mo
44.021 151.06 li
44.69 151.06 li
44.69 148.892 li
44.69 148.294 44.842 147.904 45.161 147.672 cv
45.368 147.521 45.567 147.473 46.029 147.465 cv
46.029 146.787 li
45.918 146.772 45.862 146.764 45.774 146.764 cv
45.341 146.764 45.012 147.019 44.627 147.641 cv
44.627 146.883 li
44.021 146.883 li
f
48.159 146.883 mo
47.466 146.883 li
47.466 146.23 li
47.466 145.95 47.625 145.807 47.928 145.807 cv
47.984 145.807 48.008 145.807 48.159 145.816 cv
48.159 145.265 li
48.008 145.234 47.92 145.226 47.785 145.226 cv
47.171 145.226 46.805 145.576 46.805 146.174 cv
46.805 146.883 li
46.246 146.883 li
46.246 147.425 li
46.805 147.425 li
46.805 151.06 li
47.466 151.06 li
47.466 147.425 li
48.159 147.425 li
48.159 146.883 li
f
68.501 145.477 mo
69.1709 145.477 li
69.1709 143.301 li
69.5199 143.732 69.909 143.923 70.449 143.923 cv
71.5229 143.923 72.2309 143.054 72.2309 141.723 cv
72.2309 140.321 71.547 139.444 70.4419 139.444 cv
69.8739 139.444 69.419 139.698 69.1069 140.193 cv
69.1069 139.564 li
68.4929 139.564 li
68.501 145.477 li
cp
70.3299 140.066 mo
71.061 140.066 71.5379 140.711 71.5379 141.707 cv
71.5379 142.655 71.0529 143.301 70.3299 143.301 cv
69.6309 143.301 69.1709 142.663 69.1709 141.683 cv
69.1709 140.703 69.6309 140.066 70.3299 140.066 cv
.72195 .689113 .649531 .889921 cmyk
f
74.671 139.444 mo
73.4989 139.444 72.79 140.28 72.79 141.683 cv
72.79 143.086 73.491 143.923 74.679 143.923 cv
75.851 143.923 76.5679 143.086 76.5679 141.715 cv
76.5679 140.273 75.875 139.444 74.671 139.444 cv
cp
74.679 140.058 mo
75.428 140.058 75.875 140.671 75.875 141.707 cv
75.875 142.688 75.412 143.309 74.679 143.309 cv
73.938 143.309 73.484 142.696 73.484 141.683 cv
73.484 140.679 73.938 140.058 74.679 140.058 cv
f
8.02097 145.477 mo
8.68996 145.477 li
8.68996 143.301 li
9.03996 143.732 9.42896 143.923 9.96996 143.923 cv
11.043 143.923 11.751 143.054 11.751 141.723 cv
11.751 140.321 11.067 139.444 9.96095 139.444 cv
9.39395 139.444 8.93796 139.698 8.62695 140.193 cv
8.62695 139.564 li
8.01295 139.564 li
8.02097 145.477 li
cp
9.85095 140.066 mo
10.581 140.066 11.058 140.711 11.058 141.707 cv
11.058 142.655 10.573 143.301 9.85095 143.301 cv
9.15096 143.301 8.68996 142.663 8.68996 141.683 cv
8.68996 140.703 9.15096 140.066 9.85095 140.066 cv
f
14.191 139.444 mo
13.019 139.444 12.31 140.28 12.31 141.683 cv
12.31 143.086 13.011 143.923 14.199 143.923 cv
15.3699 143.923 16.087 143.086 16.087 141.715 cv
16.087 140.273 15.394 139.444 14.191 139.444 cv
cp
14.199 140.058 mo
14.948 140.058 15.394 140.671 15.394 141.707 cv
15.394 142.688 14.932 143.309 14.199 143.309 cv
13.458 143.309 13.003 142.696 13.003 141.683 cv
13.003 140.679 13.458 140.058 14.199 140.058 cv
f
2 lj
208.682 129.919 mo
208.682 145.699 li
@
149.463 145.82 mo
148.203 149.419 li
146.943 145.82 li
1 /1 /CSD get_res sepcs
1 sep
ef
0 lj
149.463 145.82 mo
148.203 149.419 li
146.943 145.82 li
149.463 145.82 li
cp
.72195 .689113 .649531 .889921 cmyk
@
2 lj
148.203 129.919 mo
148.203 145.699 li
@
159.843 129.919 mo
159.903 129.98 li
171.082 135.712 182.229 141.618 193.323 147.499 cv
193.383 147.499 li
.00772107 1 1 .00366217 cmyk
@
194.463 146.659 mo
197.043 149.419 li
193.263 148.879 li
ef
0 lj
194.463 146.659 mo
197.043 149.419 li
193.263 148.879 li
194.463 146.659 li
cp
@
2 lj
159.843 149.419 mo
159.903 149.36 li
171.052 143.533 182.223 137.685 193.323 131.78 cv
193.383 131.78 li
@
193.263 130.459 mo
197.043 129.86 li
194.463 132.68 li
ef
0 lj
193.263 130.459 mo
197.043 129.86 li
194.463 132.68 li
193.263 130.459 li
cp
@
209.943 145.82 mo
208.682 149.419 li
207.423 145.82 li
1 /1 /CSD get_res sepcs
1 sep
ef
209.943 145.82 mo
208.682 149.419 li
207.423 145.82 li
209.943 145.82 li
cp
.72195 .689113 .649531 .889921 cmyk
@
143.53 174.269 mo
143.53 179.499 li
144.367 179.499 li
144.367 176.222 li
144.367 175.465 144.913 174.857 145.587 174.857 cv
146.202 174.857 146.549 175.236 146.549 175.904 cv
146.549 179.499 li
147.386 179.499 li
147.386 176.222 li
147.386 175.465 147.933 174.857 148.611 174.857 cv
149.219 174.857 149.577 175.245 149.577 175.904 cv
149.577 179.499 li
150.414 179.499 li
150.414 175.584 li
150.414 174.648 149.876 174.13 148.9 174.13 cv
148.203 174.13 147.784 174.339 147.296 174.927 cv
146.988 174.368 146.57 174.13 145.894 174.13 cv
145.195 174.13 144.736 174.389 144.287 175.017 cv
144.287 174.269 li
143.53 174.269 li
f
151.651 181.671 mo
152.487 181.671 li
152.487 178.951 li
152.925 179.489 153.411 179.729 154.086 179.729 cv
155.429 179.729 156.313 178.643 156.313 176.979 cv
156.313 175.226 155.458 174.13 154.076 174.13 cv
153.367 174.13 152.798 174.448 152.408 175.067 cv
152.408 174.28 li
151.64 174.28 li
151.651 181.671 li
cp
153.937 174.906 mo
154.85 174.906 155.446 175.714 155.446 176.959 cv
155.446 178.145 154.841 178.951 153.937 178.951 cv
153.063 178.951 152.487 178.155 152.487 176.929 cv
152.487 175.703 153.063 174.906 153.937 174.906 cv
f
161.854 172.237 mo
160.858 173.542 160.23 175.355 160.23 176.919 cv
160.23 178.493 160.858 180.307 161.854 181.612 cv
162.402 181.612 li
161.525 180.187 161.037 178.513 161.037 176.919 cv
161.037 175.335 161.525 173.652 162.402 172.237 cv
161.854 172.237 li
f
167.795 172.237 mo
166.968 172.237 li
166.968 174.937 li
166.619 174.408 166.061 174.13 165.363 174.13 cv
164.009 174.13 163.122 175.216 163.122 176.879 cv
163.122 178.643 163.989 179.729 165.393 179.729 cv
166.11 179.729 166.609 179.46 167.057 178.812 cv
167.057 179.499 li
167.795 179.499 li
167.795 172.237 li
cp
165.503 174.906 mo
166.399 174.906 166.968 175.703 166.968 176.949 cv
166.968 178.155 166.39 178.951 165.513 178.951 cv
164.597 178.951 163.989 178.145 163.989 176.929 cv
163.989 175.714 164.597 174.906 165.503 174.906 cv
f
173.713 179.011 mo
173.623 179.031 173.583 179.031 173.534 179.031 cv
173.245 179.031 173.085 178.882 173.085 178.623 cv
173.085 175.554 li
173.085 174.628 172.408 174.13 171.123 174.13 cv
170.365 174.13 169.738 174.349 169.39 174.738 cv
169.15 175.006 169.051 175.305 169.03 175.823 cv
169.867 175.823 li
169.937 175.186 170.315 174.897 171.093 174.897 cv
171.84 174.897 172.259 175.176 172.259 175.674 cv
172.259 175.893 li
172.259 176.241 172.049 176.391 171.391 176.471 cv
170.216 176.62 170.037 176.66 169.718 176.789 cv
169.11 177.039 168.802 177.507 168.802 178.185 cv
168.802 179.131 169.459 179.729 170.515 179.729 cv
171.173 179.729 171.7 179.499 172.288 178.961 cv
172.349 179.489 172.607 179.729 173.145 179.729 cv
173.314 179.729 173.444 179.709 173.713 179.639 cv
173.713 179.011 li
cp
172.259 177.856 mo
172.259 178.135 172.179 178.304 171.93 178.533 cv
171.591 178.842 171.182 179.001 170.694 179.001 cv
170.047 179.001 169.668 178.693 169.668 178.164 cv
169.668 177.616 170.037 177.338 170.924 177.208 cv
171.8 177.089 171.979 177.049 172.259 176.919 cv
172.259 177.856 li
f
176.433 174.28 mo
175.577 174.28 li
175.577 172.845 li
174.75 172.845 li
174.75 174.28 li
174.042 174.28 li
174.042 174.956 li
174.75 174.956 li
174.75 178.902 li
174.75 179.43 175.108 179.729 175.756 179.729 cv
175.955 179.729 176.154 179.709 176.433 179.659 cv
176.433 178.961 li
176.324 178.991 176.194 179.001 176.035 179.001 cv
175.677 179.001 175.577 178.902 175.577 178.533 cv
175.577 174.956 li
176.433 174.956 li
176.433 174.28 li
f
181.993 179.011 mo
181.903 179.031 181.863 179.031 181.813 179.031 cv
181.524 179.031 181.365 178.882 181.365 178.623 cv
181.365 175.554 li
181.365 174.628 180.687 174.13 179.402 174.13 cv
178.645 174.13 178.017 174.349 177.669 174.738 cv
177.43 175.006 177.33 175.305 177.31 175.823 cv
178.147 175.823 li
178.217 175.186 178.596 174.897 179.373 174.897 cv
180.12 174.897 180.538 175.176 180.538 175.674 cv
180.538 175.893 li
180.538 176.241 180.329 176.391 179.672 176.471 cv
178.496 176.62 178.316 176.66 177.998 176.789 cv
177.39 177.039 177.081 177.507 177.081 178.185 cv
177.081 179.131 177.739 179.729 178.795 179.729 cv
179.452 179.729 179.98 179.499 180.568 178.961 cv
180.628 179.489 180.887 179.729 181.425 179.729 cv
181.595 179.729 181.724 179.709 181.993 179.639 cv
181.993 179.011 li
cp
180.538 177.856 mo
180.538 178.135 180.459 178.304 180.21 178.533 cv
179.871 178.842 179.463 179.001 178.974 179.001 cv
178.327 179.001 177.948 178.693 177.948 178.164 cv
177.948 177.616 178.316 177.338 179.203 177.208 cv
180.08 177.089 180.26 177.049 180.538 176.919 cv
180.538 177.856 li
f
184.44 174.465 mo
183.574 174.465 li
183.574 173.648 li
183.574 173.299 183.773 173.119 184.151 173.119 cv
184.222 173.119 184.251 173.119 184.44 173.13 cv
184.44 172.433 li
184.251 172.401 184.141 172.393 183.973 172.393 cv
183.205 172.393 182.747 172.831 182.747 173.578 cv
182.747 174.465 li
182.05 174.465 li
182.05 175.142 li
182.747 175.142 li
182.747 179.685 li
183.574 179.685 li
183.574 175.142 li
184.44 175.142 li
184.44 174.465 li
cp
186.164 172.412 mo
185.337 172.412 li
185.337 179.685 li
186.164 179.685 li
cp
f
189.63 174.13 mo
188.166 174.13 187.279 175.176 187.279 176.929 cv
187.279 178.683 188.155 179.729 189.64 179.729 cv
191.104 179.729 192.001 178.683 192.001 176.969 cv
192.001 175.166 191.135 174.13 189.63 174.13 cv
cp
189.64 174.897 mo
190.576 174.897 191.135 175.664 191.135 176.959 cv
191.135 178.185 190.557 178.961 189.64 178.961 cv
188.714 178.961 188.145 178.195 188.145 176.929 cv
188.145 175.674 188.714 174.897 189.64 174.897 cv
f
197.84 179.499 mo
199.374 174.28 li
198.437 174.28 li
197.401 178.344 li
196.375 174.28 li
195.358 174.28 li
194.362 178.344 li
193.297 174.28 li
192.38 174.28 li
193.894 179.499 li
194.831 179.499 li
195.837 175.405 li
196.892 179.499 li
197.84 179.499 li
f
205.418 177.806 mo
205.418 179.499 li
206.295 179.499 li
206.295 177.806 li
207.341 177.806 li
207.341 177.019 li
206.295 177.019 li
206.295 172.436 li
205.647 172.436 li
202.439 176.879 li
202.439 177.806 li
205.418 177.806 li
cp
205.418 177.019 mo
203.206 177.019 li
205.418 173.931 li
205.418 177.019 li
f
208.606 181.612 mo
209.602 180.307 210.23 178.493 210.23 176.929 cv
210.23 175.355 209.602 173.542 208.606 172.237 cv
208.058 172.237 li
208.935 173.661 209.424 175.335 209.424 176.929 cv
209.424 178.513 208.935 180.197 208.058 181.612 cv
208.606 181.612 li
f
146.419 103.803 mo
147.306 103.803 li
147.425 103.803 147.545 103.813 147.664 103.813 cv
148.999 103.813 li
148.999 103.165 li
142.941 103.165 li
142.941 103.813 li
144.276 103.813 li
144.396 103.813 144.515 103.803 144.636 103.803 cv
145.532 103.803 li
145.532 110.02 li
146.419 110.02 li
146.419 103.803 li
f
153.021 109.235 mo
153.021 108.468 152.931 107.917 152.61 107.429 cv
152.393 107.108 151.961 106.829 151.403 106.829 cv
149.785 106.829 149.785 108.733 149.785 109.235 cv
149.785 109.738 149.785 111.599 151.403 111.599 cv
153.021 111.599 153.021 109.738 153.021 109.235 cv
cp
151.403 111.404 mo
151.083 111.404 150.657 111.216 150.517 110.644 cv
150.42 110.233 150.42 109.66 150.42 109.145 cv
150.42 108.635 150.42 108.106 150.524 107.722 cv
150.671 107.171 151.117 107.025 151.403 107.025 cv
151.78 107.025 152.142 107.254 152.268 107.659 cv
152.38 108.035 152.387 108.537 152.387 109.145 cv
152.387 109.66 152.387 110.177 152.296 110.615 cv
152.156 111.25 151.682 111.404 151.403 111.404 cv
f
135.193 128.612 mo
135.103 128.631 135.063 128.631 135.014 128.631 cv
134.724 128.631 134.565 128.482 134.565 128.223 cv
134.565 125.155 li
134.565 124.228 133.888 123.73 132.602 123.73 cv
131.846 123.73 131.218 123.948 130.869 124.337 cv
130.63 124.607 130.53 124.905 130.511 125.423 cv
131.348 125.423 li
131.417 124.785 131.796 124.496 132.573 124.496 cv
133.32 124.496 133.738 124.776 133.738 125.274 cv
133.738 125.493 li
133.738 125.842 133.529 125.991 132.872 126.071 cv
131.696 126.22 131.516 126.26 131.198 126.39 cv
130.591 126.639 130.281 127.107 130.281 127.784 cv
130.281 128.731 130.939 129.328 131.995 129.328 cv
132.652 129.328 133.181 129.1 133.768 128.562 cv
133.828 129.09 134.087 129.328 134.625 129.328 cv
134.795 129.328 134.924 129.309 135.193 129.239 cv
135.193 128.612 li
cp
133.738 127.455 mo
133.738 127.735 133.659 127.905 133.41 128.133 cv
133.071 128.442 132.663 128.602 132.175 128.602 cv
131.527 128.602 131.148 128.292 131.148 127.765 cv
131.148 127.217 131.516 126.938 132.403 126.808 cv
133.28 126.689 133.46 126.649 133.738 126.519 cv
133.738 127.455 li
f
137.515 128.064 mo
136.479 128.064 li
136.479 129.1 li
137.515 129.1 li
cp
137.515 123.879 mo
136.479 123.879 li
136.479 124.915 li
137.515 124.915 li
cp
f
148.315 129.1 mo
150.158 121.837 li
149.122 121.837 li
147.787 127.735 li
146.134 121.837 li
145.137 121.837 li
143.523 127.735 li
142.158 121.837 li
141.122 121.837 li
142.985 129.1 li
144.001 129.1 li
145.625 123.132 li
147.299 129.1 li
148.315 129.1 li
f
153.172 126.4 mo
154.926 123.879 li
153.989 123.879 li
152.733 125.772 li
151.478 123.879 li
150.532 123.879 li
152.275 126.44 li
150.432 129.1 li
151.379 129.1 li
152.704 127.097 li
154.009 129.1 li
154.975 129.1 li
153.172 126.4 li
f
160.623 125.582 mo
155.801 125.582 li
155.801 126.28 li
160.623 126.28 li
cp
160.623 127.296 mo
155.801 127.296 li
155.801 127.993 li
160.623 127.993 li
cp
f
163.643 124.069 mo
163.643 129.1 li
164.52 129.1 li
164.52 122.036 li
163.942 122.036 li
163.634 123.122 163.434 123.272 162.079 123.441 cv
162.079 124.069 li
163.643 124.069 li
f
130.521 153.637 mo
130.521 160.9 li
131.268 160.9 li
131.268 160.232 li
131.667 160.84 132.194 161.129 132.922 161.129 cv
134.297 161.129 135.193 160.003 135.193 158.27 cv
135.193 156.575 134.337 155.53 132.962 155.53 cv
132.244 155.53 131.736 155.799 131.348 156.387 cv
131.348 153.637 li
130.521 153.637 li
cp
132.803 156.307 mo
133.729 156.307 134.327 157.113 134.327 158.359 cv
134.327 159.544 133.709 160.352 132.803 160.352 cv
131.926 160.352 131.348 159.555 131.348 158.329 cv
131.348 157.104 131.926 156.307 132.803 156.307 cv
f
137.635 159.863 mo
136.599 159.863 li
136.599 160.9 li
137.635 160.9 li
cp
137.635 155.679 mo
136.599 155.679 li
136.599 156.715 li
137.635 156.715 li
cp
f
148.435 160.9 mo
150.278 153.637 li
149.242 153.637 li
147.907 159.534 li
146.253 153.637 li
145.257 153.637 li
143.643 159.534 li
142.278 153.637 li
141.242 153.637 li
143.105 160.9 li
144.121 160.9 li
145.745 154.932 li
147.419 160.9 li
148.435 160.9 li
f
154.009 155.679 mo
152.563 159.744 li
151.228 155.679 li
150.342 155.679 li
152.105 160.919 li
151.787 161.746 li
151.657 162.115 151.468 162.254 151.119 162.254 cv
151 162.254 150.86 162.235 150.681 162.195 cv
150.681 162.942 li
150.85 163.031 151.019 163.072 151.238 163.072 cv
151.508 163.072 151.797 162.982 152.015 162.822 cv
152.274 162.633 152.424 162.414 152.584 161.995 cv
154.905 155.679 li
154.009 155.679 li
f
160.503 157.383 mo
155.681 157.383 li
155.681 158.08 li
160.503 158.08 li
cp
160.503 159.096 mo
155.681 159.096 li
155.681 159.793 li
160.503 159.793 li
cp
f
163.523 155.868 mo
163.523 160.9 li
164.399 160.9 li
164.399 153.836 li
163.822 153.836 li
163.513 154.922 163.313 155.072 161.959 155.24 cv
161.959 155.868 li
163.523 155.868 li
f
196.354 153.637 mo
195.527 153.637 li
195.527 156.336 li
195.179 155.809 194.621 155.53 193.924 155.53 cv
192.568 155.53 191.682 156.615 191.682 158.28 cv
191.682 160.043 192.549 161.129 193.953 161.129 cv
194.671 161.129 195.169 160.86 195.617 160.212 cv
195.617 160.9 li
196.354 160.9 li
196.354 153.637 li
cp
194.063 156.307 mo
194.96 156.307 195.527 157.104 195.527 158.349 cv
195.527 159.555 194.949 160.352 194.073 160.352 cv
193.156 160.352 192.549 159.544 192.549 158.329 cv
192.549 157.113 193.156 156.307 194.063 156.307 cv
f
199.075 159.863 mo
198.039 159.863 li
198.039 160.9 li
199.075 160.9 li
cp
199.075 155.679 mo
198.039 155.679 li
198.039 156.715 li
199.075 156.715 li
cp
f
204.315 157.772 mo
206.707 157.772 li
207.534 157.772 207.902 158.17 207.902 159.067 cv
207.892 159.714 li
207.892 160.162 207.972 160.601 208.101 160.9 cv
209.227 160.9 li
209.227 160.67 li
208.879 160.431 208.808 160.172 208.789 159.206 cv
208.779 158.01 208.59 157.652 207.803 157.313 cv
208.62 156.914 208.948 156.406 208.948 155.579 cv
208.948 154.324 208.161 153.637 206.736 153.637 cv
203.39 153.637 li
203.39 160.9 li
204.315 160.9 li
204.315 157.772 li
cp
204.315 156.954 mo
204.315 154.453 li
206.557 154.453 li
207.075 154.453 207.374 154.533 207.603 154.733 cv
207.852 154.942 207.982 155.271 207.982 155.709 cv
207.982 156.566 207.544 156.954 206.557 156.954 cv
204.315 156.954 li
f
212.572 158.199 mo
214.325 155.679 li
213.389 155.679 li
212.134 157.572 li
210.878 155.679 li
209.932 155.679 li
211.675 158.239 li
209.832 160.9 li
210.778 160.9 li
212.103 158.897 li
213.409 160.9 li
214.375 160.9 li
212.572 158.199 li
f
220.022 157.383 mo
215.201 157.383 li
215.201 158.08 li
220.022 158.08 li
cp
220.022 159.096 mo
215.201 159.096 li
215.201 159.793 li
220.022 159.793 li
cp
f
223.043 155.868 mo
223.043 160.9 li
223.92 160.9 li
223.92 153.836 li
223.342 153.836 li
223.033 154.922 222.834 155.072 221.478 155.24 cv
221.478 155.868 li
223.043 155.868 li
f
196.355 125.633 mo
196.315 125.124 196.206 124.796 196.007 124.507 cv
195.648 124.019 195.02 123.73 194.293 123.73 cv
192.889 123.73 191.972 124.846 191.972 126.579 cv
191.972 128.263 192.868 129.328 194.283 129.328 cv
195.528 129.328 196.315 128.581 196.415 127.306 cv
195.578 127.306 li
195.439 128.143 195.011 128.562 194.304 128.562 cv
193.387 128.562 192.839 127.815 192.839 126.579 cv
192.839 125.274 193.377 124.496 194.283 124.496 cv
194.98 124.496 195.419 124.905 195.518 125.633 cv
196.355 125.633 li
f
198.835 128.064 mo
197.799 128.064 li
197.799 129.1 li
198.835 129.1 li
cp
198.835 123.879 mo
197.799 123.879 li
197.799 124.915 li
198.835 124.915 li
cp
f
204.076 125.971 mo
206.468 125.971 li
207.294 125.971 207.663 126.369 207.663 127.267 cv
207.653 127.914 li
207.653 128.363 207.732 128.801 207.862 129.1 cv
208.988 129.1 li
208.988 128.87 li
208.64 128.631 208.569 128.372 208.55 127.405 cv
208.54 126.21 208.35 125.852 207.563 125.513 cv
208.38 125.114 208.709 124.607 208.709 123.78 cv
208.709 122.525 207.922 121.837 206.497 121.837 cv
203.149 121.837 li
203.149 129.1 li
204.076 129.1 li
204.076 125.971 li
cp
204.076 125.155 mo
204.076 122.654 li
206.318 122.654 li
206.836 122.654 207.135 122.734 207.364 122.933 cv
207.613 123.142 207.742 123.471 207.742 123.909 cv
207.742 124.766 207.305 125.155 206.318 125.155 cv
204.076 125.155 li
f
213.289 123.879 mo
211.845 127.944 li
210.509 123.879 li
209.623 123.879 li
211.386 129.119 li
211.067 129.947 li
210.937 130.315 210.748 130.454 210.399 130.454 cv
210.28 130.454 210.14 130.435 209.961 130.395 cv
209.961 131.142 li
210.131 131.232 210.3 131.272 210.519 131.272 cv
210.788 131.272 211.077 131.182 211.296 131.023 cv
211.556 130.833 211.705 130.613 211.864 130.196 cv
214.185 123.879 li
213.289 123.879 li
f
219.783 125.582 mo
214.962 125.582 li
214.962 126.28 li
219.783 126.28 li
cp
219.783 127.296 mo
214.962 127.296 li
214.962 127.993 li
219.783 127.993 li
cp
f
222.804 124.069 mo
222.804 129.1 li
223.681 129.1 li
223.681 122.036 li
223.102 122.036 li
222.794 123.122 222.595 123.272 221.239 123.441 cv
221.239 124.069 li
222.804 124.069 li
f
206.898 103.803 mo
207.785 103.803 li
207.905 103.803 208.024 103.813 208.144 103.813 cv
209.479 103.813 li
209.479 103.165 li
203.422 103.165 li
203.422 103.813 li
204.757 103.813 li
204.876 103.813 204.996 103.803 205.115 103.803 cv
206.012 103.803 li
206.012 110.02 li
206.898 110.02 li
206.898 103.803 li
f
212.239 107.025 mo
212.239 106.836 212.225 106.829 212.03 106.829 cv
211.584 107.269 210.949 107.276 210.663 107.276 cv
210.663 107.527 li
210.83 107.527 211.291 107.527 211.675 107.331 cv
211.675 110.888 li
211.675 111.118 211.675 111.208 210.976 111.208 cv
210.712 111.208 li
210.712 111.459 li
210.838 111.452 211.695 111.432 211.953 111.432 cv
212.17 111.432 213.048 111.452 213.201 111.459 cv
213.201 111.208 li
212.936 111.208 li
212.239 111.208 212.239 111.118 212.239 110.888 cv
212.239 107.025 li
f
173.02 146.883 mo
173.02 151.06 li
173.69 151.06 li
173.69 148.892 li
173.69 148.294 173.842 147.904 174.16 147.672 cv
174.368 147.521 174.567 147.473 175.029 147.465 cv
175.029 146.787 li
174.918 146.772 174.862 146.764 174.774 146.764 cv
174.341 146.764 174.012 147.019 173.627 147.641 cv
173.627 146.883 li
173.02 146.883 li
.00772107 1 1 .00366217 cmyk
f
177.159 146.883 mo
176.466 146.883 li
176.466 146.23 li
176.466 145.95 176.625 145.807 176.928 145.807 cv
176.983 145.807 177.008 145.807 177.159 145.816 cv
177.159 145.265 li
177.008 145.234 176.92 145.226 176.784 145.226 cv
176.171 145.226 175.805 145.576 175.805 146.174 cv
175.805 146.883 li
175.246 146.883 li
175.246 147.425 li
175.805 147.425 li
175.805 151.06 li
176.466 151.06 li
176.466 147.425 li
177.159 147.425 li
177.159 146.883 li
f
197.501 145.477 mo
198.171 145.477 li
198.171 143.301 li
198.52 143.732 198.909 143.923 199.449 143.923 cv
200.523 143.923 201.231 143.054 201.231 141.723 cv
201.231 140.321 200.547 139.444 199.441 139.444 cv
198.874 139.444 198.419 139.698 198.107 140.193 cv
198.107 139.564 li
197.493 139.564 li
197.501 145.477 li
cp
199.33 140.066 mo
200.061 140.066 200.538 140.711 200.538 141.707 cv
200.538 142.655 200.054 143.301 199.33 143.301 cv
198.632 143.301 198.171 142.663 198.171 141.683 cv
198.171 140.703 198.632 140.066 199.33 140.066 cv
.72195 .689113 .649531 .889921 cmyk
f
203.671 139.444 mo
202.499 139.444 201.79 140.28 201.79 141.683 cv
201.79 143.086 202.491 143.923 203.679 143.923 cv
204.85 143.923 205.567 143.086 205.567 141.715 cv
205.567 140.273 204.874 139.444 203.671 139.444 cv
cp
203.679 140.058 mo
204.428 140.058 204.874 140.671 204.874 141.707 cv
204.874 142.688 204.412 143.309 203.679 143.309 cv
202.937 143.309 202.483 142.696 202.483 141.683 cv
202.483 140.679 202.937 140.058 203.679 140.058 cv
f
137.021 145.477 mo
137.69 145.477 li
137.69 143.301 li
138.04 143.732 138.43 143.923 138.97 143.923 cv
140.043 143.923 140.751 143.054 140.751 141.723 cv
140.751 140.321 140.067 139.444 138.962 139.444 cv
138.394 139.444 137.938 139.698 137.627 140.193 cv
137.627 139.564 li
137.014 139.564 li
137.021 145.477 li
cp
138.85 140.066 mo
139.581 140.066 140.057 140.711 140.057 141.707 cv
140.057 142.655 139.573 143.301 138.85 143.301 cv
138.151 143.301 137.69 142.663 137.69 141.683 cv
137.69 140.703 138.151 140.066 138.85 140.066 cv
f
143.19 139.444 mo
142.019 139.444 141.309 140.28 141.309 141.683 cv
141.309 143.086 142.011 143.923 143.198 143.923 cv
144.37 143.923 145.088 143.086 145.088 141.715 cv
145.088 140.273 144.394 139.444 143.19 139.444 cv
cp
143.198 140.058 mo
143.948 140.058 144.394 140.671 144.394 141.707 cv
144.394 142.688 143.932 143.309 143.198 143.309 cv
142.457 143.309 142.003 142.696 142.003 141.683 cv
142.003 140.679 142.457 140.058 143.198 140.058 cv
f
180.221 146.763 mo
180.221 150.94 li
180.89 150.94 li
180.89 148.772 li
180.89 148.174 181.042 147.783 181.36 147.552 cv
181.567 147.401 181.766 147.353 182.229 147.345 cv
182.229 146.667 li
182.118 146.652 182.061 146.644 181.974 146.644 cv
181.541 146.644 181.212 146.899 180.826 147.521 cv
180.826 146.763 li
180.221 146.763 li
.00772107 1 1 .00366217 cmyk
f
184.359 146.763 mo
183.666 146.763 li
183.666 146.11 li
183.666 145.83 183.825 145.688 184.128 145.688 cv
184.183 145.688 184.208 145.688 184.359 145.696 cv
184.359 145.146 li
184.208 145.113 184.12 145.106 183.984 145.106 cv
183.371 145.106 183.004 145.456 183.004 146.054 cv
183.004 146.763 li
182.446 146.763 li
182.446 147.305 li
183.004 147.305 li
183.004 150.94 li
183.666 150.94 li
183.666 147.305 li
184.359 147.305 li
184.359 146.763 li
f
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
UUNUKO+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319E4220BC810B4
CADF2216B3056307D1DA8A73EC78180A0FB2BB871CD9EF56ACC1CD52B6B9416F
F0F6CC105DB9F235573EA49040A80A9111450BB0A3B96123E69E500815CFC7CF
564552067BED0784FB65E0D025591F822D7ED553FA9ACD59EB8A476CA7B6AD8E
268F493C2C91D99FF49648FFC2772170FE015289F1DCCFD377216FF1F5ADD3B4
D09EAA924593AF3FAC43C888F801B765C80AD39E3E3AC8> |-
/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD
078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
UUNUKO+Helvetica /Encoding get
dup 46 /period put
dup 51 /three put
dup 70 /F put
dup 84 /T put
dup 102 /f put
pop
%ADOEndSubsetFont
/UUNUKO+Helvetica*1 
[46{/.notdef}rp /period 4{/.notdef}rp /three 3{/.notdef}rp /seven /.notdef /nine 
/colon 8{/.notdef}rp /C 2{/.notdef}rp /F /.notdef /H 11{/.notdef}rp 
/T 12{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g 
/.notdef /i 4{/.notdef}rp /n 3{/.notdef}rp /r /s /t 
139{/.notdef}rp]
UUNUKO+Helvetica nf
UUNUKO+Helvetica*1 [7.9701 0 0 -7.9701 0 0 ]msf
-50.769 197.61 mo
(Fig.3.)
[4.86807 1.76778 4.42978 4.43695 4.42978 0 ]xsh
%ADOBeginSubsetFont: GAAAAA+NewCenturySchlbk-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+NewCenturySchlbk-Roman def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1991 Adobe Systems Incorporated.  All Rights Reserved.) def
/Weight (Roman) def
/ItalicAngle 0 def
/BaseFontName (NewCenturySchlbk-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 174 /fi put
dup 175 /fl put
def
/FontBBox {-195 -250 1000 965} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 722 737 464 479 690 705] def
/OtherBlues [273 282 -205 -205] def
/StdHW [45] def
/StdVW [92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
59 dict dup begin
/quoteright <1C60D8A8C9B89E84A57A97E07C72ADA50550B5CC022B233AD85
86BC15BC6737D539CA857CD1730C4844BB39160418CEC9FD29C393A92D076AE2
881F15540F6062B785689D4DCE8634B> |-
/parenleft <1C60D8A8C9B81F2C368BC3322EAEF43482E98909A26D3AA10A10
E90987C0522E1644B9404E184D153290AC2AC956A74ED32A54CA7F9CEFDD308D
789DBE1C49F2> |-
/parenright <1C60D8A8C9B81F2C368BC3322EEAF87A88CDB5C1382A2D16526
FE6F4EB9A3B9D3AB26975DD8920E907F4179F5F27BE3812D592C6EC5EFD3DE0D
F14ACAED6C35D4E> |-
/comma <1C60D8A8C9B854D09AD70766E41E0E33C8605ACBE7471335FA3FDC23
D37C44240231B94D30864EA4E10E3BEFE050EC15643718AFCEFC20EEA8DFEB2C
2218E9141514E2D408237F9E8EE3AC1F2518DC632688A4C4C4E232FF> |-
/hyphen <1C60D8A8C9B81F2C3AE0F7E48C1BB6622FBE20A724C31732CFFFD87
CFB6C> |-
/period <1C60D8A8C9B854D07F2CCA4259E1BC866989B66FCDC617465236399
6D824065A52A3C8F3EDB1B6EF155F3C> |-
/zero <1C60D8A8C9B7EF32A0D5B6A4EE5D3EC4521733CE7FE3FECCEFE3116A3
2A269FD02460CDAD05B378D9ED480107EA9AA9E3AF55E9BC83D9D64C7A77B8A7
39D38AEA29C182C330F420B082DED3AF53D558A86DC511508E4DDAFA5F6869B1
4> |-
/one <1C60D8A8C9B7EF3257282EF3EEEB92F01EE7B32F7338EA85EE645F8ED2
72958B28EABD74B2AC9F7A902B819C67CA05CC3664FBD4E6731E3E5F6FC6AC07
5555D42B880A3008FE72> |-
/two <1C60D8A8C9B7EF325777E22F5A112FF9949165008E6D1CE12882CA1698
92E66560B37227CDE1B8A97433B87CF1818B9924130E2F1245896B43057FE6D5
A6AA7C15A93A3836C66C41223570CB74F98081A37380DB08849BFA3735FC2B6D
0DE79EB7D645C16952C1488781D8C5ECF90F60183CD0684A979BD0F53C45CAAC> |-
/three <1C60D8A8C9B7EF32A0D5B6AA76780E723361B9513A433CA7854C5C7B
38A77E90D7AECFF757BB400C5CE55AF44942E590841B157578E8A28EE0DD8FA8
ADF80532695B9B5896CF23ADBACD76BFAFD5C3D355EB94900A0542F6ACE690D8
8DE5B8C4C32BAE933305718881CAD0FECDB5ED12492AEA31D75F9DD5C71EEEAC
E0FB87D64A8473A54B50E60AEEE7C6645ACE53569E3AE24A0D841A60F5C40DBC
775DFBA121A645E56BF2C5FE326BA9EC38E0D0B8C44E9B4D1C851FE1FC29CDDA
133F80534B9498B1C3AECFB2D61532EEEA> |-
/four <1C60D8A8C9B7EF3257282EFC36A10F62A5529691098EEDCB503B64C13
D7F5AB6F8FC83B337FB49757C1C65F4A82BC67E2ED4C12D430DAD24444D06CAA
C86FB79B6B5F607B3E9FB0D38707E1FA0C00AF140F9E71E6E70C6A7934A632C4
2A62D52BC9F> |-
/six <1C60D8A8C9B7EF32A0D5B6A593D8C6CF7CB69AAC6636810135ED07DF21
65C95D036DE9AD3C2909CC839B4F74862A92A6C9BAE047A8544D0EE34E43C0FC
DD3EF4F918578582CE4C186BE3A7BB7D3B34B1C22F4C6E136EF282C45585186D
F321DC7162DFD51409D81C1909485919949BB0151A1EAB736D24F908110EC50B
618C8C6829200C432907BDF4004684B681A1E027BBB347183B865228350E3FEA
64535E0655574313A59B6A442BFE13B62E544A3A5C0EC89E50E61518BBEDF368
6DAE6AD0190BD8B2B0DFC6224DC0> |-
/seven <1C60D8A8C9B7EF324DF642F5A47FF209ED6F40C58D8E1F546698938E
D4744B14F5E5171841A20994F214AF4F04DF8CE24DC5EF605F780DF1B629D5A1
E79F50EDFD60D751D76A68FB72DEAD58E95B20CAD9AA9562C8D271295A4FEB3D
2A36C3711DA16C5D72660FDF5F3E9EF7173297A26F61A2D12CECAB54FCC1EDF2
E9BF5511195153F2C9428FA52046CA83972F0E873B149797B4A6BB86144301D8
60194C> |-
/nine <1C60D8A8C9B7EF32A0D5B6AA056594AE9045491E6334ADF4591FB115C
7D1EFF236AC647FD845560ECE261F639E4F61C02CB9DF8763C2D3DD76D207388
18F03649D1950F78BC24EF87967C9B27806A31FC42B7046BA47602D64A29DECC
EEABE1FAA68E2225B7652CEF5D7E92BD640BD58DAA027EF2859C5C9F570F142D
41C6330D8A4CAD645E7B98B9149B414D8C6E5D5E3B3A413DA7A2D2B999285365
544EF9EBCAB8F731C01678B79986DC5E7E072E6CDDE75BB> |-
/colon <1C60D8A8C9B854D0F4C1662E794E27DCF8D7F7052A15AA707E73262E
045DB5768B2A7CA529CA2FDA76320BD9F473BBEE675FDBC6A2B28DC906FEA255
FA9A0A66CC687D2CE28C5905645BC83655C3E9B63B> |-
/A <1C60D8A8C9B6079F1E6E28C363DC874DA112C854773A96B3504B8F778404
4ECEBCF17569C7E38E7843E9DCD77476369B3B2F20F5CD7844B8E255ED5580DE
B64F103867A9620F0F32637ABFD443ECE83082AED237E64E2DB0B87FCBA599A5
58C8670773E426A7603A04EE0B475CE5EBFE7738E3A54314EA390D9C32415592
9A04F6E455DB072B6CC1> |-
/C <1C60D8A8C9B6079FE93EE79EE83623E2A83C8EAAC499D891EE7AF049AA70
CE0D29BC67EFCC5DE1489F46602F176E15B983EC5FCAB09F098BFB05E6C78AFA
6D261CC0E65391EC905294181386411DBB8581C06199C2F7E76016353300C21A
BDA2463C69C4A54BBBB66F79451DF1BF68232F620D39A615B5E4723A8E5B5052
386BB329> |-
/E <1C60D8A8C9B6079F1E6E28C317A04C128EFD7F73926618D86E88D89BD0C8
F31BDB47EE37954F57AF9C3DFB0651942FC35C92259D5C6525BFFA5214E6851E
401E83301FE8FC8D726FA07D6E6ACB5ADA7E563C6FEE2CF0FA222726F758BD47
CFAE40DD0C0B35A283DD48C231F1B1D6740F9B8365962F4759DE4F3D5AF78C5C
CFE6> |-
/F <1C60D8A8C9B64EDF880777C0340D43640F9854E725045637A58B787BAF3B
D63DC57F366E326EB9E3D0DA029A166F10D69E6760315AAE45432EEDF56F50C3
6BB8CB069008B29D4BC0951494F4943EF83F7135A87C2450D7BAD81F1785955C
C9457471D56CB866ED62CF21DC2C639242B73232F91A> |-
/I <1C60D8A8C9B704CCC7B117A8A78BE6E8E8731DB807ABF4A202834D6D5D12
898576702F37E20EE733C459ADE69DB2945C7B35AF8E5EDBA97106CB87E3CDA1
6333102FEF1F39B3> |-
/J <1C60D8A8C9B7EF32A0D5B6AA8A16380ABD6292D1829A0E2394FD4C8D73D9
6F239155A57063319BAE6C066C8DFA5C427F7E556D73994E7E43719B7A01B782
F5403BCA59B1F5EB1082DC85E9C83122C39E51775FBF7AB4534410256112E4CD
BA7D429625387FD09EFED05905D85F03B5B09FF7009F98F123A97CB4CC4674BF> |-
/L <1C60D8A8C9B64EDF880777CE354E99ADEFF01E96B42EC472EDAD9587F4B9
A35415C0F1A956EEA12CA2A7C7104704D0682AF5CCE8FD2BDA0BB2A08059CA98
C91763E80BE3CD93E2642FAC52ADF216E4426305AC> |-
/M <1C60D8A8C9B5D6EF3EC3EE079A79DB0688F719229AD2C63192321073BEB2
BD8E2B4691BCF82DF8B4453E4717EE224FD3D7BFEC66C3D32327EFA570151C63
19AE21CA24346E8CEF3597385F06474A1C4A3891ADC4F58BFAB8A3E28B6CC6F6
BF42144E97CD549A574C025CBAC4BE46D23CA98F88B5547D60F7D96CE40BA9FD
4BED76AE11DEE5> |-
/N <1C60D8A8C9B6A283F4FB3B515690A5B84D34A421514D16D5320E43CD5144
9D92C99E8DFD1D41CDF9242914491AA21B1B53BD5DBF3A45901C91B6F791E391
50FC2861C0DADD6149886FCF570272DC624901927CDFFC9CB05BFDAB9B1CB718
8691D4BA13E00774A28408A639EABB87C8EEBFD647B87FDAA2F0D6FA707CA6F9
6E1F49CBE4411B9793F3> |-
/O <1C60D8A8C9B6FF867E41F3EF3BDCEF9110F0325CEEDA428796330396198A
F46977864D9329283CBE726B965D89B39017655C93C698136B2AD90B5BB43F92
A4E4A6AFDEEA897EF1514DD32DC47B7D7FCA01C927589649E42CA3FFAA834D18
D1D9DD26AAACCB> |-
/P <1C60D8A8C9B64EDF880777C017EBC6BC56BF2D764F26E77CBA25E71BD0B7
1F3AF3FF2F1825969255686A98F28A3375C919594692C2CAC16FA5EFF72408CC
DA7A2177D4FF34793E08FD9E40A24B0641C64A9037ECCD1644AC338C7E2DCD47
2F918F9E344764A2CF4720F5C0E1F90275D67F7B947A5A759DAE08B9B317A6BB
F06C07CD2E06ADED55098C8FD9624C028089B7E1> |-
/S <1C60D8A8C9B66B39DBD5A8045EA2921B5881BC49A185D833E43BE8AF41EC
921ABCF349AEC2253D0E4247E1AD49246DD8DB5A1BD136EA19F40F51BE885ACC
682E57A549DCBB695CB3D03919F64E27302CCBA6CF8C3CB317E923944E5B2545
DB61549C5CD92CA3FDB0FDDF4C9B996E6670449A766BFDA125D413E43B8975EC
B0108A6B67DD95EB887FBC876BE37B1480DDC65999ADD14F5A6D7BB8B907DE33
2CA85B4111367CFC691982C786C9F1491FEC1F20390DC4775FBD2595CC8DF925
C9772CD8645593653D6EBBC117588CD9C1AD8569253B09B8FB07C10D4316F167
46BAB8C24B5953> |-
/T <1C60D8A8C9B64EDF880777CE354E99AD6405CB636A205433893FEC5B675E
D6280288CBE0A0EB1B6A34DCE365F449C906A06021BAA530B5C674CA619018B1
EB5B0EA1DE51DFC4CE86F1086F82AC6E40CBD410D1A75B691210063788> |-
/V <1C60D8A8C9B6079F03666C378CB0CBE9B0A46453CD45DFD22E63096A0279
2D51035063B1B2D73166FAACE91BBB8D36FAF58ADFD28AAF37E0C595B66DE825
191344F7B04282EB3088F838443B1B8921C97C8B62F9E3426591C3D0CCEB7A36
EB6327CFA3E53401D44A9994400CD78DF04DBD> |-
/W <1C60D8A8C9B5FBBADCC7436682BA6C8BDF0BD11090238B6FFCC53A33C478
2EE773E677742D7FE32F8E2ADAA636EDE23DBCFE08A2F6A6BE39EEB23F39A97F
04BD277506AE59F465B845D3BEBF381395C0BD250125BCC01C916F578A497829
C3E0C3ED6808757941EE6AD8D95CCA43F2F581742B41338D72B14C5D603FBF5D
C1E4FB51E7C0B6A58816C1145CF9AB0C1E81406708257ECD5F3796752F7F86D0
C94A165120180B7C> |-
/bracketleft <1C60D8A8C9B81F2C3683695BE9034C29E5FD2E44A0B784485B
95317A35735455439C11452149CEF6244E9FAD0CF6> |-
/bracketright <1C60D8A8C9B81F2C3683695BE9034C29E5F826CC099D92884
4826D140023C31F8680C8B92C4D57BEAE033B2840> |-
/a <1C60D8A8C9B7EF32A0D0AE1EF0F62BB7BBE8AF01A5B7803A26674FB21109
340A467163967FCCC8F63CF4870D04DD1C3F30C6169566F86EF101915E7AD559
C615B9F2CAABDF32B5DB6E2292C2B723211E2994CBCDBB124767C1B84CDBEF29
256B065C4576B7AC57E373222B3153EE1A08433FD43753CFBA3315AC1E9D2E51
A6ECF7830AA2990F43FE03B50F4F7D0DF6435658637343E1CE6F5EF974F54243
004C50FAC54AF7D6D746D2B655809D860354CEA99D420A8B7B4906FB4B664C4D
098B724B41E9AEA5> |-
/b <1C60D8A8C9B7EF32A0D5B6A5D4358DA0EA6E4C63C75017C8D59D57F45A29
FAAE8D1728E386C95ACEF769792C460DFE4713AA41EE4A05C5DF29CCFEB7A527
4540B7266542EC6EE2552F758C32AF6B2D513611FD7FD954130388D442C927F7
99F927F4DAB18C16AC652C10406F8351FC7CB02FAB6D65524D6087A813FEB253
84211DE0E78508B91ABCAE3B4654> |-
/c <1C60D8A8C9B77FE245623FC01BE06AACFFB1E284500877FEB3448950247E
7D4BA890428A60A62DD745AA227720105C7A52055EE1A089FAD839026AD342F6
9390F076E82C13108F275B1A1C0CD2AE30D926016EC9CBCFF0625B2E020A6781
799E5385> |-
/d <1C60D8A8C9B7FD84115B7ADBBBBAF6547C0CCC072FBB86ABD0B9CAF03EDB
273AFCA29C0345BC11CA12FBECF7C78E9B64C52B55BDA66FFABD7237D61717B0
3CCFDE6091C1D7E1AA307DA3DC8D74A79B074B39F4052B86EF1FB85B87B2AFF7
528F0D86AA299C7B441DCF88ACEAD9473D0E557EB7AE1509E4B9945BBB7461E7
519212633D805AAA2156820759C883A47DA78D0151AEA071082C46AD9ED7536E
670CBE1077E7F4417DCD6F0F02C235EFE75E99C02BDE4B065FFE4287E633DB08
9F044C10027DAAA5D4EC9684DB89> |-
/e <1C60D8A8C9B7A73D32F7A6F0CEDBBA928DB8CCB39233B59FFE5FB31DB1B3
5C0D76BCD460F0EDA032A6184607F4BF31854DBDC4447881DB3E8BE2235397D0
D3505C20E952C6C9CE2D9EAB28ADE8DB4CBA1E935AA769AEACE103CEB19FC552
15C9396B1C248513> |-
/f <1C60D8A8C9B81F2C46DB626C6B39508EDC32BB51ABDDC92AC585C189B321
74741CAC439C3BF5CB52EA1FC3F219FC0BE86914EF91768C09CCDE2A9EFA7E5D
C0ADD67ECB6C7AFDC6840004A3985B0DECE70936460548151A67093065293E07
733A0202AFA65127E703CAEE8AA3F16ED9A96E02D3C05527> |-
/g <1C60D8A8C9B78256DE28BF97AD34075E4768927ECC8DB90642D77CD31DEC
CBDB5B707178FE864D33EB3286693E7709F074240787F0A3559D10DF0E400826
1E64CED714353CE1A792FE988C644EEB4092FB0271EEE971F242B4FC9A058289
1CA0D7264C7B6B4E527BC5E64F03A77595D9FB6AD2816E8E6AECD0FEE4386668
CFE736EE94DBB7643D0EE597166733E49AFD299893A4DEE4E5CA46C49DFF8629
1A74A8E4E1313D622B7D6F32A364A3760F9E54FDE2091C7BD2D2E71CD687F3ED
F345FB79486586213F5E603F7F7979627283757EB0D8CFCBD318F18B3D429AE0
3E9C7DC5A350E3EBE3FDA82E2B817C3992757C61D830E2E5830799F065659984
19DE1B58E709B52918CDCFE550DC4738A3DF78BA5E25858FDA1842A97F74F7B7
7E7CFBEE4D811BC132A1DC04BFEE3206F22C98CA11ADD53490B2BA5DB4D8853B
E222C805B6292CF528ED23FA879470B6> |-
/h <1C60D8A8C9B7D8BE6A6C43078112631D74441E1CE52948E1DF331D74C26C
D61852A52295A43A1324D5A45ED50FB807BABE903E31731156E4133C1A43634A
037822B1ABE6393C0C4FF937F4A4EA6442CB6A4D27B4D578599079A5D3974637
A3A8BA9A998FAEB77A92304091E6E59C4AB5FBD9F74B1E36AD6618FE44088A74
0EC42A9C9ADADA3C97955BABE9B1B97546EA2EADADC91D6E7A960B8C5D6D9075
7DFB5B3C6C> |-
/i <1C60D8A8C9B831A9FF8CD9197047825E848604FDD6E7F56F76E8364E24F6
D87E40CAC57E2383F9BBFE3BB7DA6CA71D7A4D9481D9CE16F654D52809C855A4
B8A9197C19C0A514FE849E2138CB99432640DCA012878EAE4F77DD8F6D542CA6
C7A1C20255312673CD406B24> |-
/j <1C60D8A8C9B842576D76BA97D5FAA603B56218C65BF587018E19F99D1B18
4BEC73F82466F913B96FFF3AE7A96DFC4D2FE97839E6A1587A706FCFDF0D11EA
161AB7D1DB31360E0B6CEB76B4E0936FCCCD91245AF21C7EDA3B471005175A16
60D160B4D109665201D9B9B5275C95DAAAE5AB51418D60A01F118BEC87B230AD
51AC45F2205367A4625A82D6FFD804F432B272FF> |-
/k <1C60D8A8C9B7CA64569795489A6C84DD00DFAF4F6C7C3876E6C24D36A4CA
D8FB578D2A2FD2A20B2372137E7416FFA4E88C06D7DE98F6B13600F189797122
2569DF9A1BF5143F430108398A3BC92AFEF2D22180B5648F7B89AE19E46CC6E4
13095C2422709F776F97E35A4F1841D4CEEE4B73AE0E8B68BE2F1FE148C177DE
AFDEA10B8823B41ABFDB03073448FAA62BC01ADBF4AA166B44275C526E9CBC8F
9B3B871C8568AFE96AFFC8AA81943D6D96ECC8BB6749A4D6E9A321A9CB25176D
7DE045> |-
/l <1C60D8A8C9B831A9FF8CD9183079FC75DFED442C6F696BE4504C6A290C2C
69FD68EB033C5B91DC3387487D8EA68C3D287BCC0F5CA866E6484C312B19A8DE
15847456788A6325367F3335BB26> |-
/m <1C60D8A8C9B59F85E7C388C8F8D42D4F9C4A07954277BFC922CB62C68FF6
454F0E9BCC64C880EAC95864E86E8260CBC1AB8B8E239EA06B039FDFB30F81A5
B39C51F7C85A927B05DA74CB9AC882C85457F650C386EF445B03FB245C8E321B
532366734F9E903D388575B4A94C1258A9927C501CB78F02C7025CE518A68F70
3A6DC98E705EBFBB972250E4A6ADE8992BE4526C22E6E71B0DB1C9D62AF2683B
7ABB8CCABF0B9FEB908FF6F15194B478D15A79E023FA83D3FC839F5BD5EF264B
4D54F22584B8DE67DC92A172003FAC0DF015046C111B301542B7D539BF1FE0A4
FEB832DD7A9C7315643D9C> |-
/n <1C60D8A8C9B7D8BE6A6C430784FDAE2103086296A83BCDE41BC6C4D542B2
B13631EB1A1FF34635BC8BEC4B88DA4DF2A8A7679F9735541036F171442F972C
2F980F76BC666E74BE29DEB5E8496D04405696B062BBB5FBE37E1FC6B7F85E2C
B2952BAE938A85763D727F32E58260AB4CEB4ECCD4AC11465B6D612E255EE186
62345520347A4A1001239E20717414F5D43EE3F372D9DA28D2> |-
/o <1C60D8A8C9B7A73D32F945FD647005A2F1A7707B71E1A8E0762102820CEB
364242DE4DD59050DDA5727D51AFFE041603A2E1901800384923D88D5E746139
7A2FCA19D5A84C3CE4A0DF8AF5DFB11D3E249B35D4DC6FDA8A56> |-
/p <1C60D8A8C9B7FD8496449B6B5DA3404CAEAF93ECD165DD9344A64EE8865A
51DE9D146B476994D2B7712BDF91851F77C31F7840CE9FB4BCD802712D55415B
319EA6FF9CE3F810D594CF8F336F681D0BCE6373BE25898C726C3492B0FD6C2C
CB343D66FDDFDD10CBA7C093CE389937880A50EF76C2D0327EA3FEFDF625B5F2
D81AB25ED5A2A34CE80D2CD06A4705D1013DD76B54782AC3CFF9CC532F7C663D
2BFA9CFCE62AD3506228D5BF540FF6D073339CFF14B292531B37CE912BD6F496
35668C76> |-
/r <1C60D8A8C9B77FE2B239EC2E62CF2DF5CFA62EC7BD4226DA91B4CEF23A48
5576BEB971FC2664E16D4FB864644556C4C02FA451134CBD4DEEC866E1019CD2
90AA46BEB1E032AFD32D08BE4251C821416623C707CAD2494F3E033F8ED65F62
57A84CD8B3138C8AEE956E8FDB04986ADB1743FA3EE8F1E92D5EC6F40DEA8C8A
DCDECC0A401C2A45C458F0D44C> |-
/s <1C60D8A8C9B74CDD12D9EE5CF892F5086698A8188F60B5A0E646E5570DDF
3FE5BCAC128C0572D20097703FFC435F3E1A978F0186692DA9956ED76501FDC6
636C7DBB2ACCCE8761D2814AE5D87C79037855D41AE65C069E2D7E21AEE30462
ECF122DF4A9C44458E2676CECFA5D51B043E51CF66D9F5E8C47FAB8926825BA6
0525BB67066C9A747C13264521CA966D9BBC4D5EB3593909ED2FBA375CA7E260
37383C549001E8CCDA77492C49AB0FABEAE0E5147032E5CBD5F551823D74F2AD
17652027E12E051F746896044B1C64A4FFBBCB38A2E91AA84FBEC5481EF9E039
FFA0> |-
/t <1C60D8A8C9B7361F894A6F48C35B1AC88BD46856678F93D99F5947E0379F
0D3BFA56C05875C92EA70AB6BAF5B60E86E32EE36B6E5A542EB587149C6271D3
6674605A3F51887D8505AC80C0C1E794011710E5> |-
/u <1C60D8A8C9B7D8BE9D3816895332C8CAD5267F2C5E39CE384D708D78928E
CAE15AA60EA89C65E1AE17F316A09776E8B779FDEE47DB0458EB5F12095DE6AF
F2889E91902D306FAE5C8259C9E42D98A2927FD86BD8CF608339FD64196791D4
4D096B91EB7224CE1E54C40425753CF8F4B7AC7A5125F2608277> |-
/v <1C60D8A8C9B78256B3EB580CE0438AF48636D44F69B05BBF18210A54606A
920D15C7D0A024CDC26812F36C950196E592097F6D4FC6DB4026B984F287B6E2
A2F39F2FC8D560F0C027C04B6753B783DD46B4DF88BA612C22ECF7FF7DA0F2B4
7ADF88A2E4EBBAE7D9C6> |-
/w <1C60D8A8C9B6FF8694C16FEA2F906376E8A29B657BAA7670EDA6A00FC8E8
8879DBDE3DA3140AFE2A38A2520F068B547349A35DEB837E58FEAC08E03DF7F7
45FF2E97849EF2198B7381C510688AF911054CD9DEC0CB9E99142D2CB6E0CD19
951ECE2C3BA69B3AE2B160BBE64E8A38C7EBCDA0BBE3CD22AA6E7592DCE763FA
56B7CD287CD7937B9525716E7F6B31A7516BB0F3F3B3DEF6FEFFD85A928AEA85
4272DC> |-
/x <1C60D8A8C9B78256AE267AA480272D96EF0F618D93EBA4CE699CB347C350
AF86825DF9AE51CF3CAE7406460C4FE489A042F6FEA8A52CCBFE03E6715B45D8
9016B12733BA5B408493011CD3800DF4CEA09B61215200D1239B27C842C7B604
44BDFEB51E9D288EA3B3FA42B0117F6519A5F013F019612C6858F7E3DB4EC16C
47FFC712B40C813716995B732BFCE35876AC7A58BCDB331DAAFDDDD1E7C4BEB1
F4CCE5946232C4DC896C9280BC81B3CF6DBD4CD5AF790D28DF482FCFDAF8D2F9
56A9792BDA2897998800839EF167680C6112026E77504702D024C3B4A399038D
2DE5AA49E72DC4> |-
/y <1C60D8A8C9B78256DE28B4B90C3C4B68D876D1D68230B7ACC30903138497
745BD36F21550328A271B815823F02C099A2A0494996944F6497CD089D8F3E66
113A32EB41BC3166AFCFE530C8919AE14A14E54A77113C3136B3EF9DC6AD5438
00FAD55E7C0FBC171900FB91118DEC634460FAAF99FCF59EA5D1750230EE7FAB
A08541D27C377920AE6AF670D7F0D78F13D0D5F74B9343092E9C5E0D19F9B42D
A0F908293754367F413D7096527DA155460E1BD63DBD91105DBD50CCE06F> |-
/fi <1C60D8A8C9B7D8BE6A6C4307816DC29BFF73138C0D0DFBB3772F7D480E8
8DE17A69DD2ADC2AD406D0F188408ED9F80F4141E4B801B235ECA8AAB76E9F82
44A34E2BC8CA7F377F3B515637A7566B3E86805D32FABCA900BE071E7BD4BFDB
EA6B51D39D51F0EE9A7B511EE19742BAF6C7064E7FC272E50F9C9A8B0BBC7070
DF7E07098A6CDBF5CCEEC1CA1A2DC96B569C72656A6326C80AE845E4915ACD2B
28BB524BAE2AA5EC662C8E49061DBB44FAD62CC3146AD869FEDE24AEEEFFC1A3
157025047E819E47D0BBB50237C819547C5F805F24133ECCFB07BE589> |-
/fl <1C60D8A8C9B7D8BE6A6C4307816DC29BFF73138C0D0DFBB3772F7D486A6
7AE2285B2842DE2A2957BE3DD7C5992489F1B6D59A40E1DA3697D7669F90F2E0
88C521FE709B07A616DE3E182DEB5D39B24184CF45BDCEED9CABC4CAED5C4987
9ACF93E9442DA4031B96814068DFC71CF11EA2D98DC6AE586667C8E414119C25
336B2CD8520236590B7FD7F75BD953B213319F7B1AAC5E3340E356E7B4405AE0
5D0958093706A1EED088B8E1A48C9A30B914BE8B337616A6DEA9F2F7A4E58C4F
7C7> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKP+NewCenturySchlbk-Roman /GAAAAA+NewCenturySchlbk-Roman findfont ct_VMDictPut
/UUNUKP+NewCenturySchlbk-Roman*1 
[39{/.notdef}rp /quoteright /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 
/.notdef /zero /one /two /three /four /.notdef /six 
/seven /.notdef /nine /colon 6{/.notdef}rp /A /.notdef /C 
/.notdef /E /F 2{/.notdef}rp /I /J /.notdef /L 
/M /N /O /P 2{/.notdef}rp /S /T /.notdef 
/V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/j /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
52{/.notdef}rp /fi /fl 80{/.notdef}rp]
UUNUKP+NewCenturySchlbk-Roman nf
UUNUKP+NewCenturySchlbk-Roman*1 [7.9701 0 0 -7.9701 0 0 ]msf
-21.3514 197.61 mo
(One)sh
-4.07945 197.61 mo
(possible)sh
27.5236 197.61 mo
(data\257ow)sh
61.3408 197.61 mo
(semantics)sh
100.474 197.61 mo
(for)sh
112.864 197.61 mo
(the)sh
127.036 197.61 mo
(control-\257ow)sh
172.497 197.61 mo
(semantics)sh
211.622 197.61 mo
(given)sh
233.752 197.61 mo
(inFigure2.)
[2.51062 7.08295 5.23801 2.51059 4.27997 4.86967 3.53873 6.18558 4.43137 0 ]xsh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-74.385 233.502 mo
(Theread-fromrelation)
[6.64314 6.08508 8.41541 4.4214 4.97931 5.53722 5.71658 3.31549 3.31548 4.4214 4.97931 12.2939 
4.4214 4.97931 3.13626 5.5372 3.87354 3.13625 4.97929 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
35.3231 233.502 mo
(rf)
[3.32047 0 ]xsh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
44.8374 233.502 mo
(describes,foranygivenread,fromwhichwritethisread)
[5.7166 4.97929 4.61067 4.4214 4.4214 3.13626 5.5372 4.97931 4.36459 6.20969 3.31549 4.97931 
7.84753 5.5372 6.08508 8.77509 5.34796 3.13623 5.34796 4.97931 9.52216 4.42142 4.97931 5.5372 
5.71658 6.20969 3.31546 4.42142 4.97931 12.2849 7.74893 6.08505 3.13626 4.34671 9.52216 7.7489 
4.42139 3.13625 3.87354 8.40643 3.87354 6.08508 3.13626 8.02783 4.42139 4.97931 5.53723 0 
]xsh
-84.3476 244.461 mo
(couldhavetakenitsvalue.Aread-fromarrowwithnosource,asinthetopleftof)
[4.4214 4.97931 6.08508 3.13625 9.87299 6.08508 5.43559 5.34796 9.12573 3.87354 5.53722 5.90585 
4.97931 10.2325 3.13626 3.87354 8.74814 5.34793 5.53722 3.13625 6.08508 4.79698 6.92102 11.3315 
4.42139 4.97931 5.53723 5.71655 3.31549 3.31549 4.42139 4.97931 13.0142 5.5372 4.42142 4.42139 
4.97931 11.9073 7.7489 3.13623 3.87354 10.2146 6.08508 9.12573 4.61066 4.97931 6.08508 4.42139 
4.42145 4.797 6.92999 5.53717 8.74817 3.13623 10.2235 3.87952 6.08514 9.11674 3.87354 4.97931 
9.86401 3.13629 4.97931 3.31549 8.01001 4.97937 0 ]xsh
-84.3476 255.41 mo
(Figure3,correspondstoreadingfromtheinitialstate.)
[6.54351 3.13725 5.34895 6.08608 4.42239 7.76685 5.53821 5.54417 4.42241 4.9803 4.42239 4.42241 
4.9803 4.61166 5.71759 4.98029 6.08609 5.71759 7.41612 3.87453 7.73996 4.42239 4.98029 5.53822 
5.71758 3.13725 6.08607 8.14545 3.31647 4.42239 4.98032 11.6284 3.87454 6.08609 7.7489 3.13727 
6.08606 3.13727 3.87454 3.13724 5.53821 5.90387 4.61169 3.87451 5.53821 3.87457 4.797 0 
]xsh
-74.385 266.369 mo
(Forexample,inFigure3,considerthedrawingatthebottomleft-mostcorner.The)
[6.0932 4.97931 7.69511 4.97931 5.34795 5.53722 8.85483 5.7166 3.13625 4.797 6.04829 3.13626 
9.35081 6.5435 3.13626 5.34795 6.08507 4.42142 8.25201 5.5372 6.03036 4.4214 4.97929 6.08508 
4.61066 3.13626 5.71658 4.97931 7.69513 3.87354 6.08508 8.24402 5.71661 4.42139 5.43558 7.7489 
3.13626 6.08508 8.62164 5.5372 7.14627 3.87354 6.08508 8.24402 5.5372 4.97931 3.87354 3.87354 
4.97931 12.1236 3.13623 4.97931 3.31549 3.87354 3.31546 8.85483 4.97931 4.61069 7.12831 4.42142 
4.97931 4.42142 6.08511 4.97931 3.42017 6.05728 6.64316 6.08508 0 ]xsh
-84.3476 277.318 mo
(read)
[4.41941 4.97732 5.53522 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+NewCenturySchlbk-Italic Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /HAAAAA+NewCenturySchlbk-Italic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1991 Adobe Systems Incorporated.  All Rights Reserved.) def
/Weight (Medium) def
/ItalicAngle -16 def
/BaseFontName (NewCenturySchlbk-Italic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 67 /C put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
dup 174 /fi put
def
/FontBBox {-166 -250 994 958} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 722 737 451 466 690 705] def
/OtherBlues [273 282 -205 -205] def
/StdHW [45] def
/StdVW [80] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/period <1C60D8A8C9B854D07F2CCA421D4256278866EC2F23B0BE726E1307E
C2F312D629E7BE85896D912B961D1D5> |-
/C <1C60D8A8C9B6079FE93EE79EE83623E9F3CBC10D36E29A1003DB18C723CD
BCCE00C6A3347C54C784C36E4CECDC4A48F40932CB0DC7B8FC22ED668EBA9475
1D5220626A01BA144A28709A8364E69B0AFBC27F1BE2CEC6377B97CDC7DB4BCE
4ACE57109A259009894D683344> |-
/S <1C60D8A8C9B64EDF7FC53CE5D0A0E75B293273EFAB0EADF3DA6A67231914
655727F98E1DC2A1E16FEE78A0973677E87DD81D11FCDD99E8A4DC82D1C5960B
9F2C2D3AC31B5B47B4DAB1AA9F80CA02D3CE6BEF8A2663764882F15156CB38F6
85593C5B64B40A50609F540D30CA8A304D140FD87D6DEE00ABD5BE876AAF3579
7629DDEBFCFECE21824F595E9E1CF19521522221C2448DCBB4B1BB3CBE26865E
087003B81FC4EE89F5AB46B5DC93AA23B1F4AB580202C331E851B05601EAA26A
BA8DE1D1B00BC633CBA68618548C3E90F4777FE4BEEA947BD2> |-
/a <1C60D8A8C9B7FD84115EE72F89F36FCFFF092BE54FC8B131BA3B6098DA98
587DBB9C1DEF9AA07C8336AD8B0EBDFE0311AEE34B780FC19AE16FD78EB1CC0A
F35213D61BAFE40960391AB3B92D959BCF51E87C09104960BA4A65657A8EB0D1
33DD7DFE6BE19A4433BB5121CED4E5C58E41C616FBF01DBCD60D1D4869F3E320
F3918CDEA3426BAD551E7754A913B53811529C22F8EAE7BEB134CA85AA944F62
568CB328D6EB496DB493900DA4AA3E19B5E5F9B65996506472D7F713434CCA03
6C5593B30D0B5C9A4D1EA280219E434388F4> |-
/c <1C60D8A8C9B77FE2451D9B3161B82AA8B84D987D9DE79C6FA35D9BBE72FC
119E205AC23F7E49471FE932A5CD8CD764B4AD48C450B0C4E36421591175872A
913E63DDCB0CD008A28AED218E807843A9D9D87F14840689E23F94C2B471C190
76386BA16D9AF0CE1A64> |-
/d <1C60D8A8C9B7D8BE9D4731BA826E444E5DBD5E85405E5B647F319C3A8627
16575D01E4025A65B3A0882A4CD038A9350DB651F154D371F71FE6C4A9ACF8E5
AC7EADB5491C41071127A3EFECA1CC4F6B44A820C73C81CFF02B06BD2FED456A
F9696B363D61FBFC701EBE8089550A8DEAD2D2DDD2CBB5E5CF60BBC6A01E490C
489AAD432C6609AF4F9FA8378DF9C003F35FB826697A1DD209A00941905B64A3
FAD8D7B27C8C4867AE48C5BF561ACA05730467C8899E183B32B4BD6135604A74
991B4CD288936EAED1> |-
/e <1C60D8A8C9B77FE2451D9B3161B82AA00BF8E4C405FFAC543A9AECD0EEF0
FCB834B0A4C2F6AAB7901C2F398E0205ED1928E2C562F348A61921216E2137A7
10FB0FD45BBF806987B4866CD410E4098F3948735ED2833EAE3857F6C76FDC8C
A942E2E244EF2ED172FF7F6A9317348B> |-
/i <1C60D8A8C9B81F2CB10DD09E7C5B141CA3242ABB87EA18A544F6C7035692
48F0E81E63E816A3A1B1ADF51D785AE4AC4AE1FE390071843F363B485923C9A9
4E624BD3CC6668F639655A74DAAE6091995928BEC8E288A2D58EB99134833A61
6374D2EEEDEED98405893E16ECF8611C71E2D1F5AD64E516A32B85E5143455E8
93CB003DE2D004632A4900A16B454D6A9921> |-
/n <1C60D8A8C9B7D8BE9D4226A7A351E871D9AF32218D4C6289E3F057DA6AA2
E9ECB556F5F6F170620D2892E97A54EE316C7971F7CDFF1AB82F53F71E2BB36E
ACA78D7541590BD56A7A59D2F6E01E9340E7704578E9FBD92D1024C512532D10
92D7941C04435DEAD3EEAB1B169D5E6A0F66BB0E78FF44E46827B4A3E1F3AEE0
3BA54013B96A7A717CB259BA05C741843DCB55CD4E12819036C908737F81585A
30BCAB6B5FB9F2627AD6919BD85B79791208B2> |-
/o <1C60D8A8C9B7A73D32E4548B10C91BF34C05577A306E55DE2CC40286F7BC
9B68D4538D50BE4C0123C2C5B32FC7A3E3A70E9996890FED9AF8CBC30ED3691A
A4C1DD5CF868EEDD130F6E2F17DEC0D63E820E62E732B31E57714B4CAD> |-
/p <1C60D8A8C9B7FD8496449B6B5DA6AC615165BC9525B1AD748502F8BE0197
6632F02C67AA3088EB6C5AF6E5DD1C24EF0E4E62E702B31CF3A39F5E21DF607D
B472BE1283617E4D52DDA2025C32F6F5D2F5AF982267F525A9F14D86504556D8
D1F24B53026B950A01B9F0DD96B4E1B5CC4E0692DFB8A3E2A283AA9662FB2766
3B7E75F4F30A50D87170E11C60BA7AB6767FFFE3A02E6D0DB5> |-
/r <1C60D8A8C9B77FE299176F631BAAD80B0BBAA01FA0F7562D0B66722F4DD0
0F5D8E9E4A8AEFC0930B9E6CCFA1E34DB53DFEB3EF6F7B2EDB2A5D25B5B6598B
21BA3FCD9F3B4A21EA9EFF2A40E20168DAEC73D32DE221C81A74D1E1322F2D7E
5FB45DC0241464D18EBB4B96CEEC215D4B810EBD3C0DBE> |-
/s <1C60D8A8C9B77FE2450B16570ACF29F237C9EEC7FED79FB3C847E3206007
A1F7927521B635FEACE54DB01E98F846B081A9ACF0ABC97F0A5D8D0251EF303F
B2FC32AE6CE8358A4F90438EA4B0C3218011D8CCA6C992542ABE4995BC254DBC
88CA2D3ED871DF4D5BC3E5C13631C33ABC813C38A9586C23872A40A0B65F8B14
6DBF044858494313F35E21BF18BAE7961F66F1F896B77A2957A5C23C4B2160E2
8E67E3EBF0E3BA8466077B7453B03A93ADFD6EB73B> |-
/t <1C60D8A8C9B80A3F090E5EC73E512A67C93955E8D5AD5F8E224088E46958
027EFE199C067BFF3923D3164AC85CC86927DCA51ED00E221DD2E518A1E13E4C
E91E41F626BCFA531A37E321A944015015CA1BBE05C5F73A0391D79895ED2818
0D> |-
/u <1C60D8A8C9B7D8BE9D4226A7A351E83E3B497BA6365CD90D92C3B5A28BDF
F7D89A5AA3212F78698CB82CFB37BA1943B9DE8459DF9A4C6D8E853BDB9FE24D
70E1F1433097AF2F1735E10ACAB3573C470AFDCABB107E76EF1114FC9B0CADCE
C4BFD256671F05299109B14AD8CC50AC550729109AA441E2D5F7D412EE3CB146
5A739EF5F008B74B9227E8B6E0633B48ADE27820923A184879FBE234B6CB8B06
D885486342897583AF68B5CE3C77F6D771219DBDF8F3996A5DB0DC9C> |-
/x <1C60D8A8C9B7A73D328D2FDBFD1DEAD6DB940811358A18A04979E733584F
44E745AAD3C1DABAAE7D93A5D564B3952AE105343F38D5D0F5588D6EEC354D6E
EB04C9E2A3BFF814821052FAAE5AEFF4FFCF9096D79FB2B659959E5A575E0559
025B64D2567F4E0BF688BC7DB3D0E7E5EBB43A43A012344B060BB08B2B8B9379
BCD15EAAE3789D2647B311E67D81CB8A82C1FED2D0849BB89C4FA8953B96D1DF
A9D0C48DEB405F3E2ECFCA61E49C02EC7E3ED12E7188E266C81B570E52E20327
08463BFD11D4768FEF763C185046AB92E152F53BB48B22> |-
/y <1C60D8A8C9B7A73DB58D81521E52BA3DDC381A15EA418F0FECD9B91D69AD
CD118737AE9ED356FADC9D060491D0F71D546BC8B6892487D74D8FEF3442A671
AE7D12C9A2897EF4CA0B975FCDB48141FA9D9AA9AF43F3DFC39E9D7FDC5286DB
35F30C173F217E181B03B3AF6283310F8F8A025AE541BEB640593793CC12203D
36DF889FB09FCAC6E8B70CDC97136EC0B2F9DBFEA0D03CEED7BD18437B7D> |-
/fi <1C60D8A8C9B7D8BE1A11D77B47DF011B01BEA6675CC1408CD9D0EF34CDD
BC36868EF3C10D207560E33107F5855DB5B18BE333428D045E80F17301F14B06
19917FD13D338E706C9FD554373F0BE76B5975F7CA66FD16BC62F4B4334B1678
FB6F51FE3A83A995C9693821FD02E6DE874BC48809021AD98C7C5E03CAE2E474
C62669A6A0349C4DEACAA0E278960053FA6410CC239F3E9A5FF8D8E5ECC0CDD0
14AA43E1D44530CBEC7BBA998C42270E13A83FA079E27F5CF547554E9CA0DC69
38C94DEE0A531687E22C6AEA751F2B0F2B09DB6326A2D928AB9069D30E2DDD41
882D7D92F38A3E51C053B9FEC1A218E2FC0FA> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UUNUKQ+NewCenturySchlbk-Italic /HAAAAA+NewCenturySchlbk-Italic findfont ct_VMDictPut
/UUNUKQ+NewCenturySchlbk-Italic*1 
[46{/.notdef}rp /period 20{/.notdef}rp /C 15{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n 
/o /p /.notdef /r /s /t /u 2{/.notdef}rp 
/x /y 52{/.notdef}rp /fi 81{/.notdef}rp]
UUNUKQ+NewCenturySchlbk-Italic nf
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-60.4374 277.318 mo
(c)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-52.5669 277.318 mo
(from)
[3.31548 4.4214 4.97931 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-27.1025 277.318 mo
(y)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-18.9232 277.318 mo
(takesitsvaluefromtheinitialstate,andhencereadsthevalue0.The)
[3.87354 5.53722 5.90585 4.97931 7.86644 3.13625 3.87354 7.8475 5.34796 5.5372 3.13626 6.08508 
8.23508 3.31549 4.4214 4.97931 12.1056 3.87354 6.08505 8.22614 3.13623 6.08508 3.13626 3.87354 
3.13626 5.53717 6.3811 4.61066 3.87354 5.53717 3.87354 4.797 6.01245 5.5372 6.08508 8.96439 
6.08508 4.97931 6.08508 4.42139 8.24408 4.42139 4.97931 5.5372 5.71658 7.8754 3.87357 6.08502 
8.21716 5.34795 5.53723 3.13623 6.08508 8.23505 5.53723 6.02142 6.64313 6.08508 0 ]xsh
-84.3476 288.276 mo
(read)
[4.41941 4.97732 5.53522 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-61.1846 288.276 mo
(d)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-52.9555 288.276 mo
(from)
[3.31548 4.4214 4.97931 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-28.6069 288.276 mo
(x)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-20.8062 288.276 mo
(takesitsvaluefromtheupdate)
[3.87453 5.53821 5.90685 4.98032 7.11925 3.13724 3.87453 7.10132 5.34895 5.53819 3.13725 6.08607 
7.48788 3.31648 4.42241 4.98029 11.3584 3.87454 6.08606 7.47894 6.08606 5.71759 5.71759 5.53821 
3.87451 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
124.229 288.276 mo
(a)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
132.189 288.276 mo
(of)
[4.97733 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
143.248 288.276 mo
(x)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
151.049 288.276 mo
(by)
[5.53522 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
164.438 288.276 mo
(T)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
170.523 289.788 mo
(0)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
174.897 288.294 mo
(,andhencereadsthevalue1.)
[5.26523 5.53622 6.08408 8.22617 6.08411 4.9783 6.08408 4.42041 7.48788 4.42041 4.97833 5.53619 
5.71561 7.12819 3.87256 6.08408 7.47891 5.34695 5.53622 3.13525 6.08405 7.48792 5.53619 0 
]xsh
-74.3872 299.253 mo
(Thecoherenceordergivestheorderinwhichallofthememorywritestoagiven)
[6.64314 6.08508 8.77507 4.4214 4.97931 6.08507 4.97931 4.42142 4.97931 6.08508 4.4214 8.80196 
4.97931 4.4214 5.7166 4.97929 8.22612 5.34795 3.13625 5.34795 4.97929 8.41539 3.87354 6.08507 
8.76611 4.97931 4.42139 5.71661 4.97928 8.22614 3.13626 9.87283 7.7489 6.08508 3.13626 4.34668 
9.88184 5.53717 3.13626 6.93002 4.97931 7.11023 3.8735 6.08508 8.76608 8.85486 4.97931 8.8548 
4.97931 4.42139 9.15271 7.7489 4.42139 3.13629 3.87354 4.97931 8.39745 3.8736 8.76605 9.33295 
5.34796 3.13623 5.34802 4.97931 0 ]xsh
-84.3498 310.202 mo
(locationhavehitthatlocationinmemory.Forexample,inFigure3,theinitialwrite)
[3.13725 4.98031 4.42239 5.53821 3.87453 3.13725 4.9803 9.51321 6.08607 5.43559 5.34895 8.40643 
6.08609 3.13724 7.28073 3.87454 6.08606 5.53821 7.29868 3.13725 4.9803 4.42239 5.53821 3.87454 
3.13724 4.9803 9.50426 3.13724 9.49527 8.85583 4.98035 8.85583 4.98029 4.42242 4.10364 6.20071 
6.09317 4.98035 7.83856 4.98032 5.34897 5.53821 8.85583 5.71759 3.13727 4.79697 6.20074 3.13724 
9.4953 6.54349 3.13727 5.34894 6.08609 4.42242 8.40247 5.53821 6.19174 3.87454 6.08606 8.38751 
3.13725 6.08609 3.13724 3.87454 3.13727 5.53821 6.55243 7.74991 4.42242 3.13727 3.87451 0 
]xsh
-84.3498 321.161 mo
(to)
[3.87951 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-72.3847 321.161 mo
(x)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-64.2552 321.161 mo
(\(notdepicted\)hitsthememorybeforethewrite)
[3.31648 6.08607 4.9803 6.71387 5.71759 4.9803 5.71759 3.13725 4.42239 3.87453 4.9803 5.71759 
6.15582 6.08606 3.13725 3.87453 7.43408 3.87451 6.08609 7.81168 8.85583 4.98029 8.85583 4.98032 
4.42239 8.19028 5.53821 4.98029 3.31647 4.98032 4.42239 7.82068 3.87451 6.08609 7.8027 7.74991 
4.42239 3.13727 3.87454 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
155.908 321.161 mo
(a)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
164.187 321.161 mo
(on)
[4.97733 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.085 321.161 mo
(T)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
184.167 322.665 mo
(0)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
188.541 321.171 mo
(,byconvention,andhence)
[5.59799 5.53619 8.18134 4.42041 4.9783 6.08408 5.34695 4.97833 6.08408 3.87253 3.13525 4.97833 
6.08406 5.62488 5.53622 6.08408 8.54996 6.08408 4.9783 6.08408 4.42041 0 ]xsh
-84.3446 332.13 mo
(thetwowritesareorderedincoherence.)
[3.87354 6.08508 7.75787 3.87952 7.7489 7.74892 7.74892 4.4214 3.13625 3.87354 4.97931 7.38028 
5.5372 4.42142 7.76685 4.97929 4.4214 5.71658 4.97931 4.4214 4.97931 8.50513 3.13625 8.85568 
4.4214 4.97929 6.08508 4.97931 4.42142 4.97931 6.08508 4.42139 4.797 0 ]xsh
-74.382 343.079 mo
(Wearenowatastagewherewehave,givenaprogramsuchastheoneinFigure1,an)
[9.18056 7.10134 5.53621 4.42041 7.10135 6.08408 4.97832 9.87292 5.53622 6.00354 7.65027 4.60968 
3.87253 5.53622 5.34694 7.10133 7.74792 6.08408 4.9783 4.42041 7.11031 7.74791 7.10135 6.08408 
5.43558 5.34698 4.797 4.89563 5.34692 3.13525 5.34698 4.9783 8.21707 7.65924 5.71561 4.42041 
4.9783 5.34698 4.42041 5.53622 10.9978 4.60968 6.08411 4.34668 8.20813 5.53619 6.73169 3.87256 
6.08411 7.09235 4.97833 6.08411 7.11029 3.13525 8.19916 6.5435 3.14124 5.34692 6.08411 4.42035 
7.10535 5.53619 4.88666 5.53619 0 ]xsh
-84.3446 354.038 mo
(eventgraphasgivenbythecontrol-\257owsemantics\(seeFigure2\),andseveralread-from)
[4.97931 5.34795 4.97931 6.08508 5.82321 5.34795 4.42142 5.5372 5.7166 8.03676 5.5372 6.54343 
5.34793 3.13626 5.34796 4.97929 8.02779 5.53722 7.28069 3.87354 6.08508 6.91205 4.4214 4.97931 
6.08507 3.87354 4.4214 4.97929 3.13626 3.31549 6.08505 4.97931 9.7016 4.61066 4.97931 8.85486 
5.53717 6.08508 3.87354 3.13626 4.42142 6.5434 3.31546 4.61069 4.97931 6.91205 6.54349 3.13626 
5.34793 6.08508 4.42139 6.91806 5.5372 3.31546 4.69836 5.5372 6.08508 7.6593 4.61664 4.97931 
5.34796 4.97934 4.42142 5.53722 5.08493 4.42142 4.97931 5.53723 5.71661 3.31549 3.31549 4.42142 
4.97934 0 ]xsh
-84.3446 364.996 mo
(relationsandcoherenceordersdescribingpossiblecommunicationsacrossthreads\(see)
[4.4214 4.97931 3.13625 5.53721 3.87354 3.13625 4.97931 6.08508 6.95685 5.53722 6.08508 8.04585 
4.4214 4.97931 6.08508 4.97931 4.4214 4.97931 6.08507 4.4214 7.34442 4.97931 4.4214 5.7166 
4.97929 4.4214 6.96584 5.71658 4.97929 4.61066 4.42142 4.42142 3.13623 5.53723 3.13623 6.08508 
7.68616 5.71661 4.97931 4.61066 4.61066 3.13623 5.53723 3.13623 7.30859 4.42139 4.97931 8.85483 
8.85483 6.08508 6.08508 3.13623 4.42142 5.5372 3.87354 3.13623 4.97931 6.08508 6.96582 5.53723 
4.42139 4.42142 4.97934 4.61066 6.94794 3.8795 6.08508 4.42142 4.97934 5.5372 5.71661 6.95685 
3.31549 4.61069 4.97931 0 ]xsh
-84.3446 375.945 mo
(Figure3\).InFigure3,wedonotdisplayanycoherenceorder,becausethereisonlyone)
[6.54351 3.13625 5.34795 6.08508 4.4214 7.46098 5.53722 3.31548 5.22937 4.05875 8.54086 6.54352 
3.13625 5.34795 6.08508 4.4214 7.45999 5.53722 5.22935 7.74892 7.44305 5.71658 7.45203 6.08508 
4.97929 6.34526 5.71658 3.13626 4.61069 5.71655 3.13626 5.43558 7.81171 5.53723 6.08508 7.81171 
4.42139 4.97931 6.08508 4.97931 4.42139 4.97931 6.08508 4.42139 7.47894 4.97928 4.42142 5.71658 
4.97931 3.42017 5.25626 5.5372 4.97931 4.42139 5.53723 6.08505 4.61069 7.461 3.87354 6.08511 
4.97931 4.42142 7.45204 3.13626 7.06546 4.97931 6.08511 3.13626 7.82068 4.97931 6.08511 0 
]xsh
-84.3446 386.904 mo
(writeperlocation.)
[7.74991 4.42239 3.13725 3.87453 7.75787 5.71759 4.9803 7.19997 3.13725 4.9803 4.42239 5.53821 
3.87454 3.13724 4.9803 6.08607 0 ]xsh
-74.382 397.863 mo
(Notethatforagivencontrol-\257owsemantics,therecouldbeseveralsuitabledata\257ow)
[8.11755 4.97931 3.87354 7.38029 3.87354 6.08507 5.53722 6.27353 3.31548 4.97931 6.81343 7.9382 
5.34793 3.13626 5.34796 4.97929 8.48708 4.42139 4.97931 6.08508 3.87354 4.42139 4.97931 3.13625 
3.31548 6.08508 4.97931 10.1608 4.61066 4.97931 8.85486 5.5372 6.08508 3.8735 3.13626 4.42142 
4.36456 5.16562 3.8735 6.08508 4.97931 4.42142 7.38028 4.42142 4.97931 6.08508 3.13626 8.1275 
5.53723 7.37134 4.61066 4.97931 5.34796 4.97931 4.42139 5.53717 5.55322 4.61066 6.08508 3.13623 
3.87354 5.53723 5.53722 3.13629 7.37128 5.71661 5.53723 3.87354 5.53723 6.08508 4.97937 0 
]xsh
-84.3446 408.812 mo
(semantics,if,forexample,therewereseveralwritesto)
[4.61066 4.97931 8.85484 5.53722 6.08507 3.87354 3.13625 4.42142 4.36459 4.87769 3.13625 2.95184 
4.86873 3.31548 4.97931 6.5255 4.97931 5.34796 5.5372 8.85483 5.71658 3.13626 4.79698 4.89561 
3.87354 6.08508 4.97929 4.4214 7.09238 7.7489 4.97931 4.42142 7.09238 4.61066 4.97931 5.34796 
4.97931 4.42139 5.5372 5.25632 7.7489 4.42139 3.13626 3.8735 4.97931 6.72275 3.87354 0 
]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
163.395 408.812 mo
(x)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
170.798 408.812 mo
(withvalue1inourexample:in)
[7.74991 3.13724 3.87454 8.19019 5.34894 5.53821 3.13724 6.08609 7.09238 7.6413 3.13724 8.19019 
4.98032 6.08606 6.53447 4.98029 5.34894 5.53821 8.85583 5.71759 3.13724 4.98032 4.88666 3.13724 
0 ]xsh
-84.3446 419.771 mo
(thatcase,therewouldbetwopossibleread-fromstogiveavaluetothereadof)
[3.87453 6.08608 5.5382 6.43492 4.42241 5.53821 4.61166 4.79698 5.33696 3.87454 6.08606 4.98032 
4.42239 7.54169 7.74991 4.9803 6.08607 3.13724 8.27997 5.53821 7.54169 3.87454 7.74989 7.54169 
5.71759 4.9803 4.61166 4.61166 3.13724 5.53821 3.13727 7.53271 4.42239 4.98032 5.53821 5.71759 
3.3165 3.3165 4.42239 4.98032 8.85583 7.18201 3.87454 7.53275 5.34894 3.13727 5.34894 7.54169 
8.09958 5.34897 5.53821 3.13727 6.08606 7.54169 3.87454 7.53271 3.87454 6.08609 7.53275 4.42239 
4.98032 5.53819 8.28894 4.98032 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
275.455 419.771 mo
(x)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
283.325 419.771 mo
(on)
[4.97733 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
296.954 419.771 mo
(T)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
303.03 421.296 mo
(1)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
307.404 419.802 mo
(.)sh
-74.3828 430.761 mo
(Eachsuchobject\(seeFigure3\),whichgathersevents,programorder,dependencies,)
[7.19101 5.5372 4.34669 8.75705 4.61066 6.08508 4.34669 8.74808 4.97931 5.5372 2.94699 4.97931 
4.42142 6.54352 3.31546 4.61067 4.97929 7.64133 6.54352 3.13623 5.34796 6.08508 4.42139 7.63933 
5.5372 3.31548 5.42664 7.7489 6.08508 3.13626 4.34668 8.75705 5.34793 5.53723 3.87354 6.08505 
4.97931 4.42142 7.28064 4.97931 5.34793 4.97928 6.08508 3.87354 4.36459 5.43558 5.71661 4.42139 
4.97931 5.34793 4.42142 5.5372 11.5378 4.97931 4.42142 5.71658 4.97931 3.42017 5.44455 5.71661 
4.97932 5.71658 4.97934 6.08508 5.71661 4.97934 6.08508 4.42142 3.13626 4.97934 4.36459 0 
]xsh
-84.3454 441.71 mo
(read-from,andcoherence,iscalleda)
[4.42041 4.97831 5.53622 5.71559 3.31448 3.31448 4.42041 4.9783 8.85385 5.9128 5.53621 6.08409 
8.8558 4.42041 4.97832 6.08408 4.9783 4.42041 4.9783 6.08408 4.42041 4.79698 5.93074 3.14124 
7.73094 4.42041 5.53621 3.13525 3.13525 4.9783 8.8558 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
88.2666 441.71 mo
(candidateexecution)
[4.42142 5.71658 6.08508 6.08508 3.31546 6.08508 5.71658 3.50491 7.56857 4.42142 4.97931 4.42142 
4.42139 6.08508 3.50491 3.31546 4.97931 0 ]xsh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
178.979 441.71 mo
(.AsonecanseeinFigure3,)
[5.89984 7.19101 7.74292 4.97729 6.08411 8.11752 4.4194 5.53522 9.21732 4.61664 4.97733 8.11154 
3.14122 9.21735 6.54352 3.14124 5.34595 6.08408 4.41943 8.11154 5.53522 0 ]xsh
-84.3454 452.669 mo
(therecanbemorethanonecandidateexecutionforagivenprogram.)
[3.87254 6.08408 4.97832 4.4204 7.76684 4.42041 5.53622 8.86464 5.53622 7.7489 8.85385 4.9783 
4.42041 7.76685 3.87253 6.08408 5.53622 8.85567 4.97832 6.08408 7.75787 4.42039 5.53622 6.08408 
5.71559 3.13525 5.71558 5.53622 3.87253 7.76685 4.97833 5.34695 4.9783 4.42041 6.08411 3.87256 
3.13525 4.97833 8.8736 3.31448 4.9783 7.19998 8.30679 5.34698 3.13525 5.34695 4.9783 8.86465 
5.71561 4.42041 4.97833 5.34695 4.42041 5.53622 8.85385 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-74.3828 468.609 mo
(ConstraintSpeci\256cation.)
[7.19101 4.97931 6.08508 4.4214 3.50488 4.4214 5.7166 3.31548 6.08508 6.86726 6.64314 5.7166 
4.4214 4.4214 3.31549 6.08508 4.42139 5.71658 3.5049 3.31548 4.97931 6.08508 0 ]xsh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
42.9667 468.609 mo
(Foreachcandidateexecution,theconstraintspeci\256cation)
[6.0932 4.97931 7.77582 4.97931 5.5372 4.34668 9.45047 4.42139 5.53723 6.08508 5.71658 3.13626 
5.71658 5.5372 3.87354 8.33374 4.97928 5.34796 4.97931 4.42139 6.08508 3.87354 3.13626 4.97931 
6.08505 6.13797 3.87949 6.08508 8.32474 4.42142 4.97931 6.08508 4.61066 3.87354 4.42142 5.53717 
3.13626 6.08508 7.22696 4.61064 5.71655 4.97931 4.42142 3.13626 6.08508 4.42139 5.5372 3.87354 
3.13626 4.97928 0 ]xsh
-84.3454 479.568 mo
(partofourmodeldecideswhetherthiscandidaterepresentsavalidexecutionornot.)
[5.71659 5.53721 4.42141 6.66006 4.97931 6.09306 4.97931 6.08507 7.19997 8.85484 4.97931 5.7166 
4.97931 5.92178 5.71658 4.97931 4.42142 3.13623 5.7166 4.97929 7.39821 7.74892 6.08508 4.97928 
3.87354 6.08508 4.97931 7.20895 3.87952 6.08505 3.13626 7.38025 4.42142 5.5372 6.08508 5.71658 
3.13626 5.71658 5.5372 3.87354 7.76685 4.42139 4.97931 5.71658 4.42142 4.97931 4.61066 4.97931 
6.08505 3.87354 7.39822 8.31577 5.34796 5.5372 3.13623 3.13626 8.48718 4.97931 5.34796 4.97934 
4.42142 6.08508 3.87355 3.13626 4.97934 8.87363 4.97931 7.19998 6.08511 4.97931 3.87357 0 
]xsh
-74.3828 490.517 mo
(Traditionally,suchspeci\256cationsareintermsofacyclicityorirre\257exivityofvarious)
[6.64413 4.4224 5.53821 5.71758 3.13725 3.87453 3.13725 4.9803 6.08607 5.53821 3.13725 3.13724 
4.10362 5.65178 4.61166 6.08607 4.34668 8.96426 4.61166 5.71759 4.98032 4.42239 3.13724 6.08607 
4.42241 5.53821 3.87451 3.13727 4.98029 6.08609 7.49683 5.53821 4.42239 7.85751 3.13724 8.95532 
3.87451 4.98032 4.42242 8.85583 7.47891 4.98032 6.19168 5.53821 4.42239 5.34897 4.34668 3.13724 
3.13727 4.42242 3.13724 3.87454 8.22617 4.98029 7.29861 3.13727 4.42239 4.42242 4.98032 6.08609 
4.98029 5.34897 3.13727 5.34894 3.13727 3.8745 8.23514 4.98032 6.19168 5.34897 5.53821 4.42239 
3.13727 4.98032 6.08609 0 ]xsh
-84.3454 501.475 mo
(combinationsoftherelationsovereventsgivenbythecandidateexecution.Thismeans)
[4.4214 4.97931 8.85484 5.53722 3.13625 6.08508 5.5372 3.87354 3.13626 4.97931 6.08508 6.85823 
4.97929 5.53516 3.87952 6.08508 7.19997 4.4214 4.97931 3.13623 5.53722 3.87354 3.13625 4.97931 
6.08508 6.8403 4.97928 5.34796 4.97931 6.66 4.97931 5.34793 4.97931 6.08508 3.87354 6.8403 
5.34793 3.13626 5.34793 4.97931 8.3157 5.5372 7.56863 3.87354 6.08505 7.19998 4.42142 5.5372 
6.08505 5.71661 3.13623 5.71658 5.53723 3.8735 7.21793 4.97931 5.34793 4.97931 4.42142 6.08505 
3.87357 3.13626 4.97934 6.08508 5.01317 6.64316 6.08508 3.13629 6.8313 8.85486 4.97931 5.53723 
6.08508 0 ]xsh
-84.3454 512.434 mo
(thatthemodelwouldrejectacandidateexecutionifthiscandidatecontainsacycle)
[3.87453 6.08608 5.53821 7.65036 3.87453 6.08607 8.75713 8.85583 4.9803 5.71758 4.98032 6.92104 
7.74991 4.9803 6.08609 3.13724 9.49539 4.42241 4.9803 2.94798 4.9803 4.42239 7.6683 9.30606 
4.42239 5.53821 6.08609 5.71759 3.13724 5.71759 5.53824 3.87454 8.76608 4.98032 5.34894 4.98032 
4.42242 6.08606 3.87454 3.13727 4.98032 9.88181 3.13727 7.08334 3.87451 6.08609 3.13727 8.37851 
4.42242 5.53821 6.08609 5.71759 3.13724 5.71762 5.53821 3.87454 8.77502 4.42242 4.98032 6.08606 
3.87454 5.53819 3.13727 6.08609 8.39743 9.30606 4.42242 5.34894 4.34668 3.13724 0 ]xsh
-84.3454 523.383 mo
(amongstacertainrelationde\256nedintheconstraintspeci\256cation.)
[5.53721 8.85484 4.97931 6.08508 5.34795 4.61067 6.66008 8.30681 4.4214 4.97931 4.42142 3.87354 
5.5372 3.13626 8.87361 4.4214 4.97931 3.13625 5.5372 3.87354 3.13625 4.97931 8.86465 5.71658 
4.97931 6.08505 6.08508 4.97931 8.50513 3.13623 8.85571 3.87952 6.08505 7.74893 4.42139 4.97931 
6.08508 4.61066 3.87354 4.42139 5.5372 3.13626 6.08508 6.66006 4.61066 5.71658 4.97931 4.42139 
3.13626 6.08508 4.42139 5.5372 3.87354 3.13626 4.97931 6.08508 0 ]xsh
-74.3828 534.342 mo
(Forexample,inFigure3,theconstraintsfordescribingLamport'sSC[Lamport1979])
[6.0932 4.97931 6.46174 4.97931 5.34795 5.53722 8.85483 5.7166 3.13625 4.797 4.8239 3.13625 
8.11844 6.54352 3.13626 5.34793 6.08508 4.4214 7.01866 5.5372 4.80597 3.87352 6.08508 7.01067 
4.42142 4.97931 6.08508 4.61066 3.87354 4.42139 5.5372 3.13626 6.08508 3.87354 6.651 3.31546 
4.97931 6.45276 5.71661 4.97928 4.61069 4.42139 4.42142 3.13623 5.5372 3.13626 6.08508 7.39825 
6.64313 5.53723 8.85483 5.71658 4.97931 4.42139 3.87354 1.78226 6.65997 6.27448 9.22537 3.31549 
6.64313 5.53723 8.85484 5.71658 4.97934 4.42142 5.92783 5.53723 5.53723 5.53723 5.53723 0 
]xsh
-84.3454 545.301 mo
(\(seealsoSection4.7\)wouldruleouttherighttop-mostcandidateexecutionbecause)
[3.31647 4.61166 4.9803 8.56784 5.53821 3.13724 4.61166 8.56784 6.27548 4.98032 4.42239 3.87453 
3.13725 4.9803 9.68257 5.53821 2.7686 5.53821 6.91197 7.74991 4.9803 6.08607 3.13724 9.31509 
4.42239 6.08609 3.13724 8.56784 4.98029 6.08609 7.47003 3.87454 6.08609 8.56784 4.42239 3.13727 
5.34894 6.08609 7.47003 3.87454 4.98032 5.71759 3.3165 8.85583 4.98032 4.61166 7.47003 4.42239 
5.53821 6.08609 5.71759 3.13727 5.71759 5.53821 3.87454 8.58575 4.98032 5.34894 4.98032 4.42239 
6.08609 3.87453 3.13727 4.98032 9.69254 5.53821 4.98032 4.42239 5.53824 6.08606 4.61169 0 
]xsh
-84.3454 556.25 mo
(thereadfrom)
[3.87354 6.08508 8.82885 4.4214 4.97931 5.53722 9.58507 3.31548 4.42142 4.97931 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
-15.3444 556.25 mo
(x)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
-6.17882 556.25 mo
(on)
[4.97731 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
8.7352 556.25 mo
(T)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
14.814 557.781 mo
(1)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
23.04 556.287 mo
(readsfromtheinitialstate,whereasthereadof)
[4.4214 4.97931 5.53722 5.71658 8.47815 3.32146 4.4214 4.97931 12.7084 3.87354 6.08508 8.82886 
3.13623 6.08508 3.13626 3.87354 3.13626 5.5372 6.9838 4.61066 3.87354 5.5372 3.87354 4.797 
6.61514 7.7489 6.08508 4.97931 4.42142 4.97931 5.5372 8.48712 3.87354 6.08508 8.82886 4.42139 
4.97931 5.53723 9.57608 4.97931 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
255.926 556.287 mo
(y)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
264.713 556.287 mo
(on)
[4.97733 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
279.637 556.287 mo
(T)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
285.714 557.781 mo
(1)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
293.94 556.287 mo
(has)
[6.0831 5.53522 0 ]xsh
-84.3499 567.246 mo
(observedtheupdateof)
[4.97931 5.53721 4.61066 4.97931 4.4214 5.34795 4.97931 8.51408 3.87355 6.08508 7.7489 6.08508 
5.7166 5.71658 5.53722 3.87354 7.76685 4.97929 0 ]xsh
UUNUKQ+NewCenturySchlbk-Italic*1 [9.9626 0 0 -9.9626 0 0 ]msf
23.1166 567.246 mo
(y)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
30.8277 567.246 mo
(by)
[5.53522 0 ]xsh
UUNUKO+Helvetica*1 [9.9626 0 0 -9.9626 0 0 ]msf
44.4864 567.246 mo
(T)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
50.58 568.743 mo
(0)sh
UUNUKP+NewCenturySchlbk-Roman*1 [9.9626 0 0 -9.9626 0 0 ]msf
54.954 567.249 mo
(.)sh
UUNUKP+NewCenturySchlbk-Roman*1 [6.9738 0 0 -6.9738 0 0 ]msf
-84.348 595.149 mo
(ACMTransactionsonProgrammingLanguagesandSystems,Vol.36,No.2,Article7,Publicationdate:June2014.)
[5.03439 5.03439 8.53245 4.65088 3.09567 3.87674 4.26024 3.22815 3.87674 3.09567 2.71216 2.19606 
3.48621 4.26024 5.18431 3.48621 6.20105 4.65088 3.09567 3.48621 3.74423 3.09567 3.87674 6.19907 
6.19907 2.19606 4.26024 5.68855 4.65089 3.87674 4.26022 3.74426 4.26025 3.87674 3.74426 3.48621 
5.17523 3.87674 4.26025 5.9494 4.39282 3.74426 3.22815 2.71219 3.48621 6.19907 3.06009 3.87881 
4.50928 3.48621 2.19608 3.87881 3.87674 3.87674 3.87881 5.68298 3.35718 3.87881 3.87674 3.87048 
5.03439 3.09567 2.71216 2.19608 3.05103 2.19608 5.43607 3.87674 3.87045 4.65091 4.26022 3.87674 
2.19608 2.19608 3.09567 3.87674 2.71219 2.19608 3.48621 6.21011 4.00229 3.87674 2.71219 3.48621 
3.88788 3.70798 4.26021 4.26025 5.427 3.87674 3.87674 3.87674 3.87674 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/UUNUKQ+NewCenturySchlbk-Italic*1 uf
/UUNUKQ+NewCenturySchlbk-Italic uf
/HAAAAA+NewCenturySchlbk-Italic uf
/UUNUKP+NewCenturySchlbk-Roman*1 uf
/UUNUKP+NewCenturySchlbk-Roman uf
/GAAAAA+NewCenturySchlbk-Roman uf
/UUNUKO+Helvetica*1 uf
/UUNUKO+Helvetica uf
/FAAAAA+Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
